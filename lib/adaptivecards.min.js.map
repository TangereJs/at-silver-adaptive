{"version":3,"sources":["webpack://AdaptiveCards/webpack/universalModuleDefinition","webpack://AdaptiveCards/webpack/bootstrap","webpack://AdaptiveCards/./src/enums.ts","webpack://AdaptiveCards/./src/shared.ts","webpack://AdaptiveCards/./src/serialization.ts","webpack://AdaptiveCards/./src/utils.ts","webpack://AdaptiveCards/./src/strings.ts","webpack://AdaptiveCards/./src/registry.ts","webpack://AdaptiveCards/./src/card-object.ts","webpack://AdaptiveCards/./src/host-capabilities.ts","webpack://AdaptiveCards/./src/host-config.ts","webpack://AdaptiveCards/./src/adaptivecards.ts","webpack://AdaptiveCards/./src/card-elements.ts","webpack://AdaptiveCards/./src/text-formatters.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Default","Positive","Destructive","ActionStyle","Size","ImageSize","SizeUnit","TextSize","TextWeight","FontType","Spacing","TextColor","HorizontalAlignment","VerticalAlignment","ActionAlignment","ImageStyle","ShowCardActionMode","Orientation","FillMode","ActionIconPlacement","InputTextStyle","Emphasis","Accent","Good","Attention","Warning","ContainerStyle","ValidationPhase","ValidationEvent","ContainerFitStatus","useAdvancedTextBlockTruncation","useAdvancedCardBottomTruncation","useMarkdownInRadioButtonAndCheckbox","allowMarkForTextHighlighting","alwaysBleedSeparators","enableFullJsonRoundTrip","displayInputValidationErrors","allowPreProcessingPropertyValues","setTabIndexAtCardRoot","enableFallback","GlobalSettings","ContentTypes","applicationJson","applicationXWwwFormUrlencoded","_isProcessed","getReferencedInputs","inputs","referencedInputs","Error","input","RegExp","id","exec","this","_original","substituteInputValues","contentType","_processed","regEx","matches","keys","toLowerCase","matchedInput","valueForReplace","JSON","stringify","slice","encodeURIComponent","replace","getOriginal","set","StringWithSubstitutions","top","right","bottom","left","SpacingDefinition","Enums","None","PaddingDefinition","physicalSize","unit","parse","requireUnitSpecifier","result","SizeAndUnit","Weight","expectedMatchCount","length","parseInt","Pixel","generate","d0","Math","random","d1","d2","d3","UUID","lut","initialize","toString","major","minor","label","_isValid","_major","_minor","_label","versionString","context","Version","_versionString","logParseEvent","undefined","InvalidPropertyValue","Strings","errors","invalidVersionString","toJSON","compareTo","otherVersion","isValid","v1_0","v1_1","v1_2","v1_3","latest","Versions","version","targetVersion","_validationEvents","serializeValue","target","propertyName","propertyValue","defaultValue","serializeNumber","isNaN","serializeEnum","enumType","targetValue","canDeleteTarget","serializeArray","items","item","serializedItem","SerializableObject","push","Array","isArray","clearEvents","logEvent","source","phase","event","message","Parse","getEventAt","index","BaseSerializationContext","onGetInitialValue","isSerializationEnabled","sequentialNumber","PropertyDefinition","_sequentialNumber","getInternalName","sender","treatEmptyAsUndefined","parsedValue","Utils","parseString","invalidPropertyValue","StringProperty","parseBool","BoolProperty","parseNumber","NumProperty","size","PixelSizeProperty","values","sourceValue","versionedValue","propertyValueNotSupported","valueFound","ToJSON","ValueSetProperty","_values","keyAsNumber","enumValue","getEnumValueByName","EnumProperty","objectType","serializedValue","SerializableObjectProperty","onItemAdded","sourceCollection","sourceItem","SerializableObjectCollectionProperty","onParse","onToJSON","CustomProperty","_properties","indexOf","add","properties","remove","splice","getItemAt","getCount","SerializableObjectSchema","propertyKey","descriptor","getOwnPropertyDescriptor","getValue","setValue","_propertyBag","_rawProperties","maxVersion","getSchema","populateSchema","schema","ctor","constructor","sortedProperties","sort","p1","p2","onRegisterCustomProperties","internalParse","UnsupportedProperty","propertyNotSupported","resetDefaultValues","internalToJSON","serializedProperties","shouldSerialize","SimpleSerializationContext","effectiveContext","hasDefaultValue","hasAllDefaultValues","setCustomProperty","getCustomProperty","_schemaCache","getSchemaKey","stringToCssColor","color","a","findNextCharacter","html","currIdx","userAgent","navigator","match","Shared","node","child","appendChild","obj","hostConfig","separationDefinition","orientation","spacing","lineThickness","separator","document","createElement","className","makeCssClassName","Horizontal","lineColor","style","paddingTop","marginBottom","borderBottom","height","paddingLeft","marginRight","borderRight","width","overflow","flex","element","maxHeight","lineHeight","fits","scrollHeight","fullText","innerHTML","truncateAt","idx","substring","breakableIndices","results","findBreakableIndices","lo","hi","bestBreakIdx","mid","floor","containerEnd","start","offsetTop","clientHeight","FullyInContainer","Overflowing","FullyOutOfContainer","unknownElementType","typeName","unknownActionType","elementTypeNotAllowed","actionTypeNotAllowed","showCardMustHaveCard","invalidColumnWidth","invalidWidth","invalidCardVersion","defaultingToVersion","supportedInVersion","versionUsed","indexOutOfRange","elementCannotBeUsedAsInline","inlineAlreadyParented","interactivityNotAllowed","inputsMustHaveUniqueId","choiceSetMustHaveAtLeastOneChoice","choiceSetChoicesMustHaveTitleAndValue","propertyMustBeSet","actionHttpHeadersMustHaveNameAndValue","tooManyActions","maximumActions","columnAlreadyBelongsToAnotherSet","invalidCardType","unsupportedCardVersion","maxSupportedVersion","duplicateId","markdownProcessingNotEnabled","processMarkdownEventRemoved","elementAlreadyParented","actionAlreadyParented","elementTypeNotStandalone","hints","dontUseWeightedAndStrecthedColumnsInSameSet","_items","findByName","clear","register","schemaVersion","registrationInfo","unregister","createInstance","getItemCount","CardObjectRegistry","allIds","validationEvents","addFailure","cardObject","Validation","ValidationResults","_shouldFallback","getJsonTypeName","CardObject","requiresProperty","preProcessPropertyValue","currentObject","onPreProcessPropertyValue","parent","setParent","_parent","setShouldFallback","shouldFallback","requires","areAllMet","hostCapabilities","getRootObject","rootObject","internalValidateProperties","DuplicateId","validateProperties","_renderedElement","typeNameProperty","idProperty","HostCapabilities","_capabilities","jsonVersion","addCapability","removeCapability","hasCapability","capabilityName","parseHostConfigEnum","targetEnum","parseEnum","defaultColor","subtleColor","default","subtle","ColorDefinition","highlightColors","TextColorDefinition","allowCustomStyle","AdaptiveCardConfig","imageSize","Medium","maxImageHeight","ImageSetConfig","allowInlinePlayback","defaultPoster","MediaConfig","isSubtle","weight","getDefaultWeight","BaseTextDefinition","suffix","suffixColor","RequiredInputLabelTextDefinition","inputSpacing","Small","requiredInputs","optionalInputs","InputLabelConfig","errorMessage","InputConfig","wrap","FactTextDefinition","maxWidth","Bolder","FactTitleDefinition","title","FactSetConfig","actionMode","Inline","inlineTopMargin","ShowCardActionConfig","maxActions","buttonSpacing","showCard","preExpandSingleShowCardAction","actionsOrientation","actionAlignment","Left","iconPlacement","LeftOfTitle","allowTitleToWrap","iconSize","sizeAndUnit","e","ActionsConfig","dark","light","accent","good","warning","attention","parseSingleColor","ColorSetDefinition","foregroundColors","backgroundColor","highlightBackgroundColor","highlightForegroundColor","ContainerStyleDefinition","_allStyles","BuiltInContainerStyleDefinition","customStyleArray","customStyle","styleName","forEach","isBuiltIn","emphasis","customStyles","getStyleByName","ContainerStyleSet","fontFamily","fontSizes","small","medium","large","extraLarge","fontWeights","lighter","bolder","monospace","FontTypeDefinition","getStyleDefinition","Monospace","FontTypeSet","choiceSetInputValueSeparator","supportsInteractivity","padding","imageSizes","containerStyles","actions","adaptiveCard","imageSet","media","factSet","alwaysAllowBleed","String","_legacyFontType","fontTypes","lineHeights","getFontTypeDefinition","getEffectiveSpacing","Large","ExtraLarge","Padding","paddingDefinitionToSpacingDefinition","paddingDefinition","makeCssClassNames","classNames","cssClassNamePrefix","join","HostConfig","defaultHostConfig","Lighter","_truncatedDueToOverflow","lang","CardElement","langProperty","isVisibleProperty","undoOverflowTruncation","isVisible","updateRenderedElementVisibility","raiseElementVisibilityChangedEvent","internalRenderSeparator","renderedSeparator","renderSeparation","separatorOrientation","parentContainer","getParentContainer","getEffectivePadding","parentPhysicalPadding","marginLeft","displayMode","isDesignMode","_defaultRenderedElementDisplayMode","display","removeProperty","_separatorElement","isFirstElement","hideElementDueToOverflow","visibility","showElementHiddenDueToOverflow","handleOverflow","isHiddenDueToOverflow","handled","truncateOverflow","resetOverflow","sizeChanged","createPlaceholderElement","styleDefinition","getEffectiveStyleDefinition","foregroundCssColor","border","minHeight","fontSize","innerText","adjustRenderedElementSize","renderedElement","isDisplayed","offsetHeight","overrideInternalRender","internalRender","applyPadding","separatorElement","isBleeding","getImmediateSurroundingPadding","physicalPadding","getDefaultPadding","getHasBackground","getPadding","_padding","setPadding","elementRegistry","SerializationContext","asString","getEffectiveStyle","defaultStyle","getForbiddenActionTypes","processTop","processRight","processBottom","processLeft","doProcessTop","isTopElement","doProcessRight","isRightMostElement","doProcessBottom","isBottomElement","doProcessLeft","isLeftMostElement","effectivePadding","getActionCount","getActionAt","CardElementContainer","removeItem","render","customCssSelector","classList","boxSizing","updateLayout","processChildren","cardElement","rootElement","getRootElement","AdaptiveCard","designMode","isLastElement","isAtTheVeryLeft","isAtTheVeryRight","isAtTheVeryTop","isAtTheVeryBottom","isBleedingAtTop","isBleedingAtBottom","currentElement","Container","getAllInputs","processActions","getResourceInformation","getElementById","getActionById","allowCustomPadding","_hostConfig","separatorProperty","heightProperty","horizontalAlignmentProperty","spacingProperty","forbiddenActionTypes","parseAction","ActionProperty","text","ariaHidden","BaseTextBlock","selectActionProperty","textProperty","setText","getFontSize","fontType","getColorDefinition","colorSet","Dark","Light","init","textDefinition","applyStylesTo","targetElement","fontWeight","colorDefinition","effectiveColor","setAttribute","sizeProperty","weightProperty","colorProperty","isSubtleProperty","fontTypeProperty","_treatAsPlainText","useMarkdown","restoreOriginalContent","maxLines","_computedLineHeight","_originalInnerHtml","truncateIfSupported","children","isTextOnly","tagName","truncate","_processedText","preProcessedText","forElementId","labelElement","htmlFor","selectAction","onclick","preventDefault","cancelBubble","execute","tabIndex","getAriaRole","formattedText","TextFormatters","formatText","markdownProcessingResult","applyMarkdown","didProcess","outputHtml","markStyle","effectiveStyle","firstElementChild","HTMLElement","marginTop","textOverflow","lastElementChild","anchors","getElementsByTagName","anchor","raiseAnchorClickedEvent","wordWrap","whiteSpace","isRtl","horizontalAlignment","Center","textAlign","Right","wrapProperty","maxLinesProperty","TextBlock","italic","strikethrough","highlight","underline","href","getHref","fontStyle","textDecoration","italicProperty","strikethroughProperty","highlightProperty","underlineProperty","TextRun","_inlines","internalAddInline","inline","forceAdd","isInline","jsonInline","textRun","parseElement","jsonInlines","renderedInlines","renderedInline","getInlineCount","getInlineAt","addInline","removeInline","RichTextBlock","titleProperty","valueProperty","Fact","facts","borderWidth","borderSpacing","borderStyle","borderCollapse","trElement","tdElement","verticalAlign","textBlock","factsProperty","FactSet","internalName","Auto","applySize","pixelWidth","pixelHeight","Stretch","url","alignItems","onkeypress","keyCode","justifyContent","imageElement","onload","raiseImageLoadedEvent","onerror","card","errorElement","minWidth","Person","borderRadius","backgroundPosition","backgroundRepeat","src","Image","urlProperty","altTextProperty","alt","mimeType","backgroundColorProperty","styleProperty","pixelWidthProperty","ImageDimensionProperty","pixelHeightProperty","allowVerticalOverflow","isSelectable","isElementAllowed","isInteractive","paddingRight","paddingBottom","InteractivityNotAllowed","_selectAction","overflowX","overflowY","concat","_images","flexWrap","image","renderedImage","margin","getFirstVisibleRenderedItem","getLastVisibleRenderedItem","itemIndex","addImage","imagesProperty","imageSizeProperty","ImageSet","type","mimeTypeProperty","MediaSource","sources","getPosterUrl","poster","processSources","_selectedSources","_selectedMediaType","mimeComponents","split","Media","supportedMediaTypes","renderPoster","posterRootElement","altText","position","posterUrl","parentNode","removeChild","playButtonOuterElement","mediaPlayerElement","renderMediaPlayer","play","onPlay","playButtonInnerElement","playButtonArrowWidth","playButtonArrowHeight","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopColor","borderRightColor","borderBottomColor","transform","playButtonContainer","mediaElement","videoPlayer","autoplay","controls","isMobileOS","muted","preload","renderedSource","mediaSource","sourcesProperty","posterProperty","getAllLabelIds","labelIds","_renderedLabelElement","_renderedErrorMessageElement","updateInputControlAriaLabelledBy","_renderedInputControlElement","removeAttribute","_inputControlContainerElement","_outerContainerElement","flexDirection","renderedInputControlId","generateUniqueId","labelRichTextBlock","labelInline","isRequired","isRequiredCueInline","isNullable","valueChanged","onInputValueChangedHandler","resetValidationFailureCue","onValueChanged","onInputValueChanged","renderedInputControlElement","showValidationErrorMessage","errorMessageTextBlock","focus","PropertyCantBeNull","RequiredInputsShouldHaveLabel","RequiredInputsShouldHaveErrorMessage","validateValue","isSet","labelProperty","isRequiredProperty","errorMessageProperty","Input","isMultiline","Text","setupInput","placeholder","maxLength","oninput","inlineAction","renderedInputControl","iconUrl","textContent","inputControlContainerElement","regex","test","maxLengthProperty","isMultilineProperty","placeholderProperty","inlineActionProperty","regexProperty","TextInput","valueOn","valueOff","_checkboxInputElement","joinedLabelIds","_checkboxInputLabelElement","checked","onchange","spacerElement","valueOnProperty","valueOffProperty","ToggleInput","Choice","isMultiSelect","choices","getUniqueCategoryName","uniqueCategoryName","ChoiceSetInput","uniqueCategoryCounter","renderCompoundInput","cssClassName","defaultValues","_toggleInputs","_labels","choice","_uniqueCategoryName","compoundInput","internalApplyAriaCurrent","options","_selectElement","selected","option","disabled","hidden","CollectionCantBeEmpty","toggleInput","isCompact","selectedIndex","choicesProperty","isMultiSelectProperty","_numberInputElement","min","max","valueAsNumber","minProperty","maxProperty","NumberInput","_dateInputElement","valueAsDate","Date","minDate","maxDate","DateInput","TimeProperty","convertTimeStringToDate","timeString","_timeInputElement","TimeInput","action","parentContainerStyle","_state","_parentContainerStyle","updateCssStyle","updateActionButtonCssStyle","click","onClick","addCssClasses","internalGetReferencedInputs","internalPrepareForExecution","internalValidateInputs","ignoreInputValidation","actionRegistry","actionButtonElement","buttonState","baseCssClass","buttonElement","titleElement","AboveTitle","iconElement","onExecuteActionHandler","onExecute","onExecuteAction","prepareForExecution","invalidInputs","_actionCollection","removeAction","validateInputs","iconUrlProperty","ignoreInputValidationProperty","Action","_ignoreInputValidation","_isPrepared","current","_originalData","_processedData","SubmitAction","JsonTypeName","dataProperty","OpenUrlAction","targetElements","ToggleVisibilityAction","elementId","addTargetElement","removeTargetElement","targetElementsProperty","_value","newValue","nameProperty","StringWithSubstitutionProperty","HttpHeader","allInputs","_url","headers","_body","header","HttpAction","bodyProperty","methodProperty","headersProperty","InlineAdaptiveCard","jsonCard","ShowCardAction","owner","_renderedActionCount","buttons","_owner","isActionAllowed","forbiddenTypes","forbiddenType","refreshContainer","_actionCardContainer","_actionCard","layoutChanged","hideActionCard","previouslyExpandedAction","_expandedAction","raiseInlineCardExpandedEvent","showActionCard","suppressStyle","raiseEvent","renderedCard","collapseExpandedAction","state","expandShowCardAction","button","actionClicked","actionButton","Popup","findActionButton","jsonAction","addAction","TooManyActions","ActionTypeNotAllowed","buttonStrip","allowedActions","filter","ActionButton","ab","spacer","buttonStripContainer","expandedAction","actionIndex","ActionCollection","renderedActionCount","orientationProperty","ActionSet","_bleed","StylableCardElementContainer","minPixelHeight","applyBackground","surroundingPadding","currentElementHasBackgroundImage","backgroundImage","hasExplicitStyle","getHasExpandedAction","getBleed","setBleed","explicitStyle","bleedProperty","minHeightProperty","apply","BackgroundImage","fillMode","Repeat","RepeatHorizontally","RepeatVertically","Cover","backgroundSize","backgroundPositionX","verticalAlignment","backgroundPositionY","Bottom","fillModeProperty","verticalAlignmentProperty","Top","verticalContentAlignment","_renderedItems","backgroundImageProperty","insertItemAt","forceInsert","isStandalone","supportsExcplitiHeight","getItemsCollectionPropertyName","rtl","dir","renderedItem","placeholderElement","elt","getFitStatus","jsonItems","firstRenderedItem","lastRenderedItem","addItem","insertItemBefore","insertBefore","insertItemAfter","insertAfter","verticalContentAlignmentProperty","rtlProperty","_computedWeight","Vertical","ColumnSet","widthProperty","Column","_columns","createColumnInstance","parseCardObject","errorType","ElementTypeNotAllowed","_renderedColumns","totalWeight","column","computedWeight","renderedColumn","jsonColumns","getColumnAt","weightedColumns","stretchedColumns","Hint","addColumn","onImageLoadedHandler","onImageLoaded","onAnchorClickedHandler","onAnchorClicked","isExpanded","onInlineCardExpandedHandler","onInlineCardExpanded","shouldUpdateLayout","onElementVisibilityChangedHandler","onElementVisibilityChanged","renderedActions","renderIfEmpty","ContainerWithActions","onProcessMarkdown","markdownit","markdownIt","console","warn","isVersionSupported","bypassVersionCheck","_fallbackCard","fallbackElement","versionProperty","MissingCardType","UnsupportedCardVersion","speak","schemaUrl","$schemaProperty","fallbackTextProperty","speakProperty","populateWithDefaultElements","registry","populateWithDefaultActions","reset","GlobalRegistry","elements","internalParseCardObject","forbiddenTypeNames","allowFallback","createInstanceCallback","tryToFallback","fallback","cardObjectParsed","onParseAction","onParseElement","UnknownElementType","UnknownActionType","_elementRegistry","setElementRegistry","_actionRegistry","setActionRegistry","regularExpression","_regularExpression","format","internalFormat","date","toLocaleDateString","day","weekday","month","year","AbstractTextFormatter","toLocaleTimeString","hour","minute","DateFormatter","TimeFormatter"],"mappings":"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","file":"adaptivecards.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AdaptiveCards\"] = factory();\n\telse\n\t\troot[\"AdaptiveCards\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// Note the \"weird\" way these readonly fields are declared is to work around\n// a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n// and adopt this syntax for all other static readonly fields.\nexport class ActionStyle {\n    static readonly Default: \"default\" = \"default\";\n    static readonly Positive: \"positive\" = \"positive\";\n    static readonly Destructive: \"destructive\" = \"destructive\";\n}\n\nexport enum Size {\n    Auto,\n    Stretch,\n    Small,\n    Medium,\n    Large\n}\n\nexport enum ImageSize {\n    Small,\n    Medium,\n    Large\n}\n\nexport enum SizeUnit {\n    Weight,\n    Pixel\n}\n\nexport enum TextSize {\n    Small,\n    Default,\n    Medium,\n    Large,\n    ExtraLarge\n}\n\nexport enum TextWeight {\n    Lighter,\n    Default,\n    Bolder\n}\n\nexport enum FontType {\n    Default,\n    Monospace\n}\n\nexport enum Spacing {\n    None,\n    Small,\n    Default,\n    Medium,\n    Large,\n    ExtraLarge,\n    Padding\n}\n\nexport enum TextColor {\n    Default,\n    Dark,\n    Light,\n    Accent,\n    Good,\n    Warning,\n    Attention\n}\n\nexport enum HorizontalAlignment {\n    Left,\n    Center,\n    Right\n}\n\nexport enum VerticalAlignment {\n    Top,\n    Center,\n    Bottom\n}\n\nexport enum ActionAlignment {\n    Left,\n    Center,\n    Right,\n    Stretch\n}\n\nexport enum ImageStyle {\n    Default,\n    Person\n}\n\nexport enum ShowCardActionMode {\n    Inline,\n    Popup\n}\n\nexport enum Orientation {\n    Horizontal,\n    Vertical\n}\n\nexport enum FillMode {\n    Cover,\n    RepeatHorizontally,\n    RepeatVertically,\n    Repeat\n}\n\nexport enum ActionIconPlacement {\n    LeftOfTitle,\n    AboveTitle\n}\n\nexport enum InputTextStyle {\n    Text,\n    Tel,\n    Url,\n    Email\n}\n\n/*\n    This should really be a string enum, e.g.\n\n        export enum ContainerStyle {\n            Default = \"default\",\n            Emphasis = \"emphasis\"\n        }\n\n    However, some hosts do not use a version of TypeScript\n    recent enough to understand string enums. This is\n    a compatible construct that does not require using\n    a more recent version of TypeScript.\n\n    Also note the \"weird\" way these readonly fields are declared is to work around\n    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    and adopt this syntax for all other static readonly fields.\n*/\nexport class ContainerStyle {\n    static readonly Default: \"default\" = \"default\";\n    static readonly Emphasis: \"emphasis\" = \"emphasis\";\n    static readonly Accent: \"accent\" = \"accent\";\n    static readonly Good: \"good\" = \"good\";\n    static readonly Attention: \"attention\" = \"attention\";\n    static readonly Warning: \"warning\" = \"warning\";\n}\n\nexport enum ValidationPhase {\n    Parse,\n    ToJSON,\n    Validation\n}\n\nexport enum ValidationEvent {\n    Hint,\n    ActionTypeNotAllowed,\n    CollectionCantBeEmpty,\n    Deprecated,\n    ElementTypeNotAllowed,\n    InteractivityNotAllowed,\n    InvalidPropertyValue,\n    MissingCardType,\n    PropertyCantBeNull,\n    TooManyActions,\n    UnknownActionType,\n    UnknownElementType,\n    UnsupportedCardVersion,\n    DuplicateId,\n    UnsupportedProperty,\n    RequiredInputsShouldHaveLabel,\n    RequiredInputsShouldHaveErrorMessage,\n    Other\n}\n\nexport enum ContainerFitStatus {\n    FullyInContainer,\n    Overflowing,\n    FullyOutOfContainer\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\n\nexport class GlobalSettings {\n    static useAdvancedTextBlockTruncation: boolean = true;\n    static useAdvancedCardBottomTruncation: boolean = false;\n    static useMarkdownInRadioButtonAndCheckbox: boolean = true;\n    static allowMarkForTextHighlighting: boolean = false;\n    static alwaysBleedSeparators: boolean = false;\n    static enableFullJsonRoundTrip: boolean = false;\n    static displayInputValidationErrors: boolean = true;\n    static allowPreProcessingPropertyValues: boolean = false;\n    static setTabIndexAtCardRoot: boolean = true;\n    static enableFallback: boolean = true;\n}\n\nexport const ContentTypes = {\n    applicationJson: \"application/json\",\n    applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\n}\n\nexport interface ISeparationDefinition {\n    spacing: number,\n    lineThickness?: number,\n    lineColor?: string\n}\n\nexport interface IInput {\n    id?: string;\n    value?: string;\n    validateValue(): boolean;\n}\n\nexport type Dictionary<T> = { [key: string]: T };\n\nexport class StringWithSubstitutions {\n    private _isProcessed: boolean = false;\n    private _original?: string;\n    private _processed?: string;\n\n    getReferencedInputs(inputs: IInput[], referencedInputs: Dictionary<IInput>) {\n        if (!referencedInputs) {\n            throw new Error(\"The referencedInputs parameter cannot be null.\")\n        }\n\n        for (let input of inputs) {\n            let matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(<string>this._original);\n\n            if (matches != null && input.id) {\n                referencedInputs[input.id] = input;\n            }\n        }\n    }\n\n    substituteInputValues(inputs: Dictionary<IInput>, contentType: string) {\n        this._processed = this._original;\n\n        if (this._original) {\n            let regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\n            let matches;\n\n            while ((matches = regEx.exec(<string>this._original)) !== null) {\n                for (let key of Object.keys(inputs)) {\n                    if (key.toLowerCase() == matches[1].toLowerCase()) {\n                        let matchedInput = inputs[key];\n\n                        let valueForReplace = \"\";\n\n                        if (matchedInput.value) {\n                            valueForReplace = matchedInput.value;\n                        }\n\n                        if (contentType === ContentTypes.applicationJson) {\n                            valueForReplace = JSON.stringify(valueForReplace);\n                            valueForReplace = valueForReplace.slice(1, -1);\n                        }\n                        else if (contentType === ContentTypes.applicationXWwwFormUrlencoded) {\n                            valueForReplace = encodeURIComponent(valueForReplace);\n                        }\n\n                        this._processed = (<string>this._processed).replace(matches[0], valueForReplace);\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        this._isProcessed = true;\n    }\n\n    getOriginal(): string | undefined {\n        return this._original;\n    }\n\n    get(): string | undefined {\n        if (!this._isProcessed) {\n            return this._original;\n        }\n        else {\n            return this._processed;\n        }\n    }\n\n    set(value: string | undefined) {\n        this._original = value;\n        this._isProcessed = false;\n    }\n}\n\nexport class SpacingDefinition {\n    left: number = 0;\n    top: number = 0;\n    right: number = 0;\n    bottom: number = 0;\n\n    constructor(top: number = 0,\n        right: number = 0,\n        bottom: number = 0,\n        left: number = 0) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n}\n\nexport class PaddingDefinition {\n    top: Enums.Spacing = Enums.Spacing.None;\n    right: Enums.Spacing = Enums.Spacing.None;\n    bottom: Enums.Spacing = Enums.Spacing.None;\n    left: Enums.Spacing = Enums.Spacing.None;\n\n    constructor(top: Enums.Spacing = Enums.Spacing.None,\n        right: Enums.Spacing = Enums.Spacing.None,\n        bottom: Enums.Spacing = Enums.Spacing.None,\n        left: Enums.Spacing = Enums.Spacing.None) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n}\n\nexport class SizeAndUnit {\n    physicalSize: number;\n    unit: Enums.SizeUnit;\n\n    static parse(input: string, requireUnitSpecifier: boolean = false): SizeAndUnit {\n        let result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\n\n        if (typeof input === \"number\") {\n            result.physicalSize = input;\n\n            return result;\n        }\n        else if (typeof input === \"string\") {\n            let regExp = /^([0-9]+)(px|\\*)?$/g;\n            let matches = regExp.exec(input);\n            let expectedMatchCount = requireUnitSpecifier ? 3 : 2;\n\n            if (matches && matches.length >= expectedMatchCount) {\n                result.physicalSize = parseInt(matches[1]);\n\n                if (matches.length == 3) {\n                    if (matches[2] == \"px\") {\n                        result.unit = Enums.SizeUnit.Pixel;\n                    }\n                }\n\n                return result;\n            }\n        }\n\n        throw new Error(\"Invalid size: \" + input);\n    }\n\n    constructor(physicalSize: number, unit: Enums.SizeUnit) {\n        this.physicalSize = physicalSize;\n        this.unit = unit;\n    }\n}\n\nexport interface IResourceInformation {\n    url: string;\n    mimeType: string;\n}\n\n/**\n * Fast UUID generator, RFC4122 version 4 compliant.\n * @author Jeff Ward (jcward.com).\n * @license MIT license\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n **/\nexport class UUID {\n    private static lut: string[] = [];\n\n    static generate(): string {\n        let d0 = Math.random() * 0xffffffff | 0;\n        let d1 = Math.random() * 0xffffffff | 0;\n        let d2 = Math.random() * 0xffffffff | 0;\n        let d3 = Math.random() * 0xffffffff | 0;\n\n        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +\n            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +\n            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +\n            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\n    }\n\n    static initialize() {\n        for (let i = 0; i < 256; i++) {\n            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n        }\n    }\n}\n\nUUID.initialize();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\nimport * as Utils from \"./utils\";\nimport * as Enums from \"./enums\";\nimport { Strings } from \"./strings\";\n\nexport interface IValidationEvent {\n    source?: SerializableObject,\n    phase: Enums.ValidationPhase,\n    event: Enums.ValidationEvent,\n    message: string;\n}\n\nexport class Version {\n    private _versionString: string;\n    private _major: number;\n    private _minor: number;\n    private _isValid: boolean = true;\n    private _label?: string;\n\n    constructor(major: number = 1, minor: number = 1, label?: string) {\n        this._major = major;\n        this._minor = minor;\n        this._label = label;\n    }\n\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\n        if (!versionString) {\n            return undefined;\n        }\n\n        let result = new Version();\n        result._versionString = versionString;\n\n        let regEx = /(\\d+).(\\d+)/gi;\n        let matches = regEx.exec(versionString);\n\n        if (matches != null && matches.length == 3) {\n            result._major = parseInt(matches[1]);\n            result._minor = parseInt(matches[2]);\n        }\n        else {\n            result._isValid = false;\n        }\n\n        if (!result._isValid) {\n            context.logParseEvent(\n                undefined,\n                Enums.ValidationEvent.InvalidPropertyValue,\n                Strings.errors.invalidVersionString(result._versionString));\n        }\n\n        return result;\n    }\n\n    toString(): string {\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\n    }\n\n    toJSON(): any {\n        return this.toString();\n    }\n\n    compareTo(otherVersion: Version): number {\n        if (!this.isValid || !otherVersion.isValid) {\n            throw new Error(\"Cannot compare invalid version.\");\n        }\n\n        if (this.major > otherVersion.major) {\n            return 1;\n        }\n        else if (this.major < otherVersion.major) {\n            return -1;\n        }\n        else if (this.minor > otherVersion.minor) {\n            return 1;\n        }\n        else if (this.minor < otherVersion.minor) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    get label(): string {\n        return this._label ? this._label : this.toString();\n    }\n\n    get major(): number {\n        return this._major;\n    }\n\n    get minor(): number {\n        return this._minor;\n    }\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n}\n\nexport type TargetVersion = Version | \"*\";\n\nexport class Versions {\n    static readonly v1_0 = new Version(1, 0);\n    static readonly v1_1 = new Version(1, 1);\n    static readonly v1_2 = new Version(1, 2);\n    static readonly v1_3 = new Version(1, 3);\n    static readonly latest = Versions.v1_3;\n}\n\nexport function isVersionLessOrEqual(version: TargetVersion, targetVersion: TargetVersion): boolean {\n    if (version instanceof Version) {\n        if (targetVersion instanceof Version) {\n            return targetVersion.compareTo(version) >= 0;\n        }\n        else {\n            // Target version is *\n            return true;\n        }\n    }\n    else {\n        // Version is *\n        return true;\n    }\n}\n\nexport abstract class BaseSerializationContext {\n    private _validationEvents: IValidationEvent[] = [];\n\n    serializeValue(target: { [key: string]: any }, propertyName: string, propertyValue: any, defaultValue: any = undefined) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            if (!GlobalSettings.enableFullJsonRoundTrip) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeNumber(target: { [key: string]: any }, propertyName: string, propertyValue: number | undefined, defaultValue: number | undefined = undefined) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeEnum(\n        enumType: { [s: number]: string },\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue: number | undefined,\n        defaultValue: number | undefined = undefined) {\n        let targetValue = target[propertyName];\n\n        let canDeleteTarget = targetValue == undefined ? true : enumType[targetValue] !== undefined;\n\n        if (propertyValue == defaultValue) {\n            if (canDeleteTarget) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            if (propertyValue == undefined) {\n                if (canDeleteTarget) {\n                    delete target[propertyName];\n                }\n            }\n            else {\n                target[propertyName] = enumType[propertyValue];\n            }\n        }\n    }\n\n    serializeArray(target: { [key: string]: any }, propertyName: string, propertyValue: any[] | undefined) {\n        let items = [];\n\n        if (propertyValue) {\n            for (let item of propertyValue) {\n                let serializedItem: any = undefined;\n\n                if (item instanceof SerializableObject) {\n                    serializedItem = item.toJSON(this);\n                }\n                else if (item.toJSON) {\n                    serializedItem = item.toJSON();\n                }\n                else {\n                    serializedItem = item;\n                }\n\n                if (serializedItem !== undefined) {\n                    items.push(serializedItem);\n                }\n            }\n        }\n\n        if (items.length == 0) {\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            this.serializeValue(target, propertyName, items);\n        }\n    }\n\n    clearEvents() {\n        this._validationEvents = [];\n    }\n\n    logEvent(\n        source: SerializableObject | undefined,\n        phase: Enums.ValidationPhase,\n        event: Enums.ValidationEvent,\n        message: string) {\n        this._validationEvents.push(\n            {\n                source: source,\n                phase: phase,\n                event: event,\n                message: message\n            }\n        )\n    }\n\n    logParseEvent(source: SerializableObject | undefined, event: Enums.ValidationEvent, message: string) {\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\n    }\n\n    getEventAt(index: number): IValidationEvent {\n        return this._validationEvents[index];\n    }\n\n    constructor(public targetVersion: Version = Versions.latest) {}\n\n    get eventCount(): number {\n        return this._validationEvents.length;\n    }\n}\n\nclass SimpleSerializationContext extends BaseSerializationContext {}\n\nexport class PropertyDefinition {\n    private static _sequentialNumber: number = 0;\n\n    getInternalName(): string {\n        return this.name;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): any {\n        return source[this.name];\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: any, context: BaseSerializationContext): void {\n        context.serializeValue(target, this.name, value, this.defaultValue);\n    }\n\n    readonly sequentialNumber: number;\n\n    isSerializationEnabled: boolean = true;\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: any,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\n            this.sequentialNumber = PropertyDefinition._sequentialNumber;\n\n            PropertyDefinition._sequentialNumber++;\n        }\n}\n\nexport class StringProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\n        let parsedValue = Utils.parseString(source[this.name], this.defaultValue);\n        let isUndefined = parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\n\n        if (!isUndefined && this.regEx !== undefined) {\n            let matches = this.regEx.exec(<string>parsedValue);\n\n            if (!matches) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(parsedValue, this.name));\n\n                return undefined;\n            }\n        }\n\n        return parsedValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\n            this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly treatEmptyAsUndefined: boolean = true,\n        readonly regEx?: RegExp,\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class BoolProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): boolean | undefined {\n        return Utils.parseBool(source[this.name], this.defaultValue);\n    }\n\n    toJSON(sender: SerializableObject, target: object, value: boolean | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            value,\n            this.defaultValue);\n    }\n}\n\nexport class NumProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        return Utils.parseNumber(source[this.name], this.defaultValue);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeNumber(\n            target,\n            this.name,\n            value,\n            this.defaultValue);\n    }\n}\n\nexport class PixelSizeProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let result: number | undefined = undefined;\n        let value = source[this.name];\n\n        if (typeof value === \"string\") {\n            let isValid = false;\n\n            try {\n                let size = SizeAndUnit.parse(value, true);\n\n                if (size.unit == Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n\n                    isValid = true;\n                }\n            }\n            catch {\n                // Do nothing. A parse error is emitted below\n            }\n\n            if (!isValid) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(source[this.name], \"minHeight\"));\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n    }\n}\n\nexport interface IVersionedValue<TValue> {\n    value: TValue;\n    targetVersion?: Version;\n}\n\nexport class ValueSetProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n\n        if (typeof sourceValue === \"string\") {\n            for (let versionedValue of this.values) {\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return versionedValue.value;\n                    }\n                    else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\n\n        return this.defaultValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\n        let valueFound = false;\n\n        for (let versionedValue of this.values) {\n            if (versionedValue.value === value) {\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                    valueFound = true;\n\n                    break;\n                }\n                else {\n                    context.logEvent(\n                        sender,\n                        Enums.ValidationPhase.ToJSON,\n                        Enums.ValidationEvent.InvalidPropertyValue,\n                        Strings.errors.propertyValueNotSupported(\n                            value,\n                            this.name,\n                            targetVersion.toString(),\n                            context.targetVersion.toString()));\n                }\n            }\n        }\n\n        if (valueFound) {\n            context.serializeValue(\n                target,\n                this.name,\n                value,\n                this.defaultValue);\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly values: IVersionedValue<string>[],\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\n    private _values: IVersionedValue<number>[] = [];\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let sourceValue = source[this.name];\n\n        if (typeof sourceValue !== \"string\") {\n            return this.defaultValue;\n        }\n\n        let enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\n\n        if (enumValue !== undefined) {\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === enumValue) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return enumValue;\n                    }\n                    else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\n\n        return this.defaultValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        if (value !== undefined) {\n            let valueFound = false;\n\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === value) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        valueFound = true;\n\n                        break;\n                    }\n                    else {\n                        context.logEvent(\n                            sender,\n                            Enums.ValidationPhase.ToJSON,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.invalidPropertyValue(value, this.name));\n                    }\n                }\n            }\n\n            if (valueFound) {\n                context.serializeEnum(\n                    this.enumType,\n                    target,\n                    this.name,\n                    value,\n                    this.defaultValue);\n            }\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly enumType: TEnum,\n        readonly defaultValue?: number,\n        values?: IVersionedValue<number>[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => number) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!values) {\n            for (let key in enumType) {\n                let keyAsNumber = parseInt(key, 10);\n\n                if (keyAsNumber >= 0) {\n                    this._values.push( { value: keyAsNumber });\n                }\n            }\n        }\n        else {\n            this._values = values;\n        }\n    }\n\n    get values(): IVersionedValue<number>[] {\n        return this._values;\n    }\n}\n\nexport type SerializableObjectType = { new(): SerializableObject };\n\nexport class SerializableObjectProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\n        }\n\n        let result = new this.objectType();\n        result.parse(sourceValue, context);\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject | undefined, context: BaseSerializationContext) {\n        let serializedValue = value !== undefined ? value.toJSON(context) : value;\n\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\n            serializedValue = undefined;\n        }\n\n        super.toJSON(sender, target, serializedValue, context);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        defaultValue?: SerializableObject) {\n        super(\n            targetVersion,\n            name,\n            defaultValue,\n            (sender: SerializableObject) => { return new this.objectType(); });\n    }\n}\n\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject[] | undefined {\n        let result: SerializableObject[] | undefined = [];\n\n        let sourceCollection = source[this.name];\n\n        if (Array.isArray(sourceCollection)) {\n            for (let sourceItem of sourceCollection) {\n                let item = new this.objectType();\n                item.parse(sourceItem, context);\n\n                result.push(item);\n\n                if (this.onItemAdded) {\n                    this.onItemAdded(sender, item);\n                }\n            }\n        }\n\n        return result.length > 0 ? result : (this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject[] | undefined, context: BaseSerializationContext) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void) {\n        super(\n            targetVersion,\n            name,\n            undefined,\n            (sender: SerializableObject) => { return []; });\n    }\n}\n\nexport class CustomProperty<T> extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\n        return this.onParse(sender, this, source, context);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: T, context: BaseSerializationContext) {\n        this.onToJSON(sender, this, target, value, context);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly onParse: (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => T,\n        readonly onToJSON: (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: T, context: BaseSerializationContext) => void,\n        readonly defaultValue?: T,\n        readonly onGetInitialValue?: (sender: SerializableObject) => T) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!this.onParse) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\n        }\n\n        if (!this.onToJSON) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\n        }\n    }\n}\n\nexport class SerializableObjectSchema {\n    private _properties: PropertyDefinition[] = [];\n\n    indexOf(property: PropertyDefinition): number {\n        for (let i = 0; i < this._properties.length; i++) {\n            if (this._properties[i] === property) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    add(...properties: PropertyDefinition[]) {\n        for (let i = 0; i < properties.length; i++) {\n            if (this.indexOf(properties[i]) === -1) {\n                this._properties.push(properties[i]);\n            }\n        }\n    }\n\n    remove(...properties: PropertyDefinition[]) {\n        for (let property of properties) {\n            while (true) {\n                let index = this.indexOf(property);\n\n                if (index >= 0) {\n                    this._properties.splice(index, 1);\n                }\n                else {\n                    break;\n                }\n            }\n        }\n    }\n\n    getItemAt(index: number): PropertyDefinition {\n        return this._properties[index];\n    }\n\n    getCount(): number {\n        return this._properties.length;\n    }\n}\n\n// This is a decorator function, used to map SerializableObject descendant class members to\n// schema properties\nexport function property(property: PropertyDefinition) {\n    return function(target: any, propertyKey: string) {\n        let descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\n\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.get = function(this: SerializableObject) { return this.getValue(property); };\n            descriptor.set = function(this: SerializableObject, value: any) { this.setValue(property, value); };\n\n            Object.defineProperty(target, propertyKey, descriptor)\n        }\n    }\n}\n\nexport type PropertyBag = { [propertyName: string]: any };\n\nexport abstract class SerializableObject {\n    static onRegisterCustomProperties?: (sender: SerializableObject, schema: SerializableObjectSchema) => void;\n\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\n\n    private _propertyBag: PropertyBag = {};\n    private _rawProperties: PropertyBag = {};\n\n    protected abstract getSchemaKey(): string;\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        let ctor = <any>this.constructor;\n        let properties: PropertyDefinition[] = [];\n\n        for (let propertyName in ctor) {\n            try {\n                let propertyValue = ctor[propertyName];\n\n                if (propertyValue instanceof PropertyDefinition) {\n                    properties.push(propertyValue);\n                }\n            }\n            catch {\n                // If a property happens to have a getter function and\n                // it throws an exception, we need to catch it here\n            }\n        }\n\n        if (properties.length > 0) {\n            let sortedProperties = properties.sort((p1: PropertyDefinition, p2: PropertyDefinition) => {\n                if (p1.sequentialNumber > p2.sequentialNumber) {\n                    return 1;\n                }\n                else if (p1.sequentialNumber < p2.sequentialNumber) {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            schema.add(...sortedProperties);\n        }\n\n        if (SerializableObject.onRegisterCustomProperties) {\n            SerializableObject.onRegisterCustomProperties(this, schema);\n        }\n    }\n\n    protected getValue(property: PropertyDefinition): any {\n        return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;\n    }\n\n    protected setValue(property: PropertyDefinition, value: any) {\n        if (value === undefined || value === null) {\n            delete this._propertyBag[property.getInternalName()];\n        }\n        else {\n            this._propertyBag[property.getInternalName()] = value;\n        }\n    }\n\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\n        this._propertyBag = {};\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\n\n        if (source) {\n            let s = this.getSchema();\n\n            for (let i = 0; i < s.getCount(); i++) {\n                let property = s.getItemAt(i);\n\n                if (property.isSerializationEnabled) {\n                    let propertyValue = property.onGetInitialValue ? property.onGetInitialValue(this) : undefined;\n\n                    if (source.hasOwnProperty(property.name)) {\n                        if (property.targetVersion.compareTo(context.targetVersion) <= 0) {\n                            propertyValue = property.parse(this, source, context);\n                        }\n                        else {\n                            context.logParseEvent(\n                                this,\n                                Enums.ValidationEvent.UnsupportedProperty,\n                                Strings.errors.propertyNotSupported(\n                                    property.name,\n                                    property.targetVersion.toString(),\n                                    context.targetVersion.toString()));\n                        }\n                    }\n\n                    this.setValue(property, propertyValue);\n                }\n            }\n        }\n        else {\n            this.resetDefaultValues();\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\n        let s = this.getSchema();\n        let serializedProperties: string[] = [];\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            // Avoid serializing the same property multiple times. This is necessary\n            // because some property definitions map to the same underlying schema\n            // property\n            if (property.isSerializationEnabled && property.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property.name) === -1) {\n                property.toJSON(this, target, this.getValue(property), context);\n\n                serializedProperties.push(property.name);\n            }\n        }\n    }\n\n    protected shouldSerialize(context: BaseSerializationContext): boolean {\n        return true;\n    }\n\n    maxVersion: Version = Versions.v1_3;\n\n    constructor() {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            if (property.onGetInitialValue) {\n                this.setValue(property, property.onGetInitialValue(this));\n            }\n        }\n    }\n\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\n    }\n\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\n        let effectiveContext = context ? context : new SimpleSerializationContext();\n\n        if (this.shouldSerialize(effectiveContext)) {\n            let result: PropertyBag;\n\n            if (GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\n                result = this._rawProperties;\n            }\n            else {\n                result = {};\n            }\n\n            this.internalToJSON(result, effectiveContext);\n\n            return result;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    hasDefaultValue(property: PropertyDefinition): boolean {\n        return this.getValue(property) === property.defaultValue;\n    }\n\n    hasAllDefaultValues(): boolean {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            if (!this.hasDefaultValue(property)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    resetDefaultValues() {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            this.setValue(property, property.defaultValue);\n        }\n    }\n\n    setCustomProperty(name: string, value: any) {\n        let shouldDeleteProperty = (typeof value === \"string\" && !value) || value === undefined || value === null;\n\n        if (shouldDeleteProperty) {\n            delete this._rawProperties[name];\n        }\n        else {\n            this._rawProperties[name] = value;\n        }\n    }\n\n    getCustomProperty(name: string): any {\n        return this._rawProperties[name];\n    }\n\n    getSchema(): SerializableObjectSchema {\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\n\n        if (!schema) {\n            schema = new SerializableObjectSchema();\n\n            this.populateSchema(schema);\n\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\n        }\n\n        return schema;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Shared from \"./shared\";\nimport { HostConfig } from \"./host-config\";\n\nexport function isMobileOS(): boolean {\n    let userAgent = window.navigator.userAgent;\n\n    return !!userAgent.match(/Android/i) || !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i);\n}\n\n/**\n * Generate a UUID prepended with \"__ac-\"\n */\nexport function generateUniqueId(): string {\n    return \"__ac-\" + Shared.UUID.generate();\n}\n\nexport function appendChild(node: Node, child: Node | undefined) {\n    if (child) {\n        node.appendChild(child);\n    }\n}\n\nexport function parseString(obj: any, defaultValue?: string): string | undefined {\n    return typeof obj === \"string\" ? obj : defaultValue;\n}\n\nexport function parseNumber(obj: any, defaultValue?: number): number | undefined {\n    return typeof obj === \"number\" ? obj : defaultValue;\n}\n\nexport function parseBool(value: any, defaultValue?: boolean): boolean | undefined {\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    else if (typeof value === \"string\") {\n        switch (value.toLowerCase()) {\n            case \"true\":\n                return true;\n            case \"false\":\n                return false;\n            default:\n                return defaultValue;\n        }\n    }\n\n    return defaultValue;\n}\n\nexport function getEnumValueByName(enumType: { [s: number]: string }, name: string) : number | undefined {\n    for (let key in enumType) {\n        let keyAsNumber = parseInt(key, 10);\n\n        if (keyAsNumber >= 0) {\n            let value = enumType[key];\n\n            if (value && typeof value === \"string\" && value.toLowerCase() === name.toLowerCase()) {\n                return keyAsNumber;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function parseEnum(enumType: { [s: number]: string }, name: string, defaultValue?: number): number | undefined {\n    if (!name) {\n        return defaultValue;\n    }\n\n    let enumValue = getEnumValueByName(enumType, name);\n\n    return enumValue !== undefined ? enumValue : defaultValue;\n}\n\nexport function renderSeparation(hostConfig: HostConfig, separationDefinition: Shared.ISeparationDefinition, orientation: Enums.Orientation): HTMLElement | undefined {\n    if (separationDefinition.spacing > 0 || (separationDefinition.lineThickness && separationDefinition.lineThickness > 0)) {\n        let separator = document.createElement(\"div\");\n        separator.className = hostConfig.makeCssClassName(\"ac-\" + (orientation == Enums.Orientation.Horizontal ? \"horizontal\" : \"vertical\") + \"-separator\");\n\n        let color = separationDefinition.lineColor ? stringToCssColor(separationDefinition.lineColor) : \"\";\n\n        if (orientation == Enums.Orientation.Horizontal) {\n            if (separationDefinition.lineThickness) {\n                separator.style.paddingTop = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.marginBottom = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.borderBottom = separationDefinition.lineThickness + \"px solid \" + color;\n            }\n            else {\n                separator.style.height = separationDefinition.spacing + \"px\";\n            }\n        }\n        else {\n            if (separationDefinition.lineThickness) {\n                separator.style.paddingLeft = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.marginRight = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.borderRight = separationDefinition.lineThickness + \"px solid \" + color;\n            }\n            else {\n                separator.style.width = separationDefinition.spacing + \"px\";\n            }\n        }\n\n        separator.style.overflow = \"hidden\";\n        separator.style.flex = \"0 0 auto\";\n\n        return separator;\n    }\n    else {\n        return undefined;\n    }\n}\n\nexport function stringToCssColor(color: string | undefined): string | undefined {\n    if (color) {\n        let regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;\n        let matches = regEx.exec(color);\n\n        if (matches && matches[4]) {\n            let a = parseInt(matches[1], 16) / 255;\n            let r = parseInt(matches[2], 16);\n            let g = parseInt(matches[3], 16);\n            let b = parseInt(matches[4], 16);\n\n            return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n        }\n    }\n\n    return color;\n}\n\nexport function truncate(element: HTMLElement,\n    maxHeight: number,\n    lineHeight?: number) {\n    let fits = () => {\n        // Allow a one pixel overflow to account for rounding differences\n        // between browsers\n        return maxHeight - element.scrollHeight >= -1.0;\n    };\n\n    if (fits()) return;\n\n    let fullText = element.innerHTML;\n    let truncateAt = (idx: any) => {\n        element.innerHTML = fullText.substring(0, idx) + '...';\n    }\n\n    let breakableIndices = findBreakableIndices(fullText);\n    let lo = 0;\n    let hi = breakableIndices.length;\n    let bestBreakIdx = 0;\n\n    // Do a binary search for the longest string that fits\n    while (lo < hi) {\n        let mid = Math.floor((lo + hi) / 2);\n        truncateAt(breakableIndices[mid]);\n\n        if (fits()) {\n            bestBreakIdx = breakableIndices[mid];\n            lo = mid + 1;\n        }\n        else {\n            hi = mid;\n        }\n    }\n\n    truncateAt(bestBreakIdx);\n\n    // If we have extra room, try to expand the string letter by letter\n    // (covers the case where we have to break in the middle of a long word)\n    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {\n        let idx = findNextCharacter(fullText, bestBreakIdx);\n\n        while (idx < fullText.length) {\n            truncateAt(idx);\n\n            if (fits()) {\n                bestBreakIdx = idx;\n                idx = findNextCharacter(fullText, idx);\n            }\n            else {\n                break;\n            }\n        }\n\n        truncateAt(bestBreakIdx);\n    }\n}\n\nfunction findBreakableIndices(html: string): number[] {\n    let results: number[] = [];\n    let idx = findNextCharacter(html, -1);\n\n    while (idx < html.length) {\n        if (html[idx] == ' ') {\n            results.push(idx);\n        }\n\n        idx = findNextCharacter(html, idx);\n    }\n\n    return results;\n}\n\nfunction findNextCharacter(html: string, currIdx: number): number {\n    currIdx += 1;\n\n    // If we found the start of an HTML tag, keep advancing until we get\n    // past it, so we don't end up truncating in the middle of the tag\n    while (currIdx < html.length && html[currIdx] == '<') {\n        while (currIdx < html.length && html[currIdx++] != '>');\n    }\n\n    return currIdx;\n}\n\nexport function getFitStatus(element: HTMLElement, containerEnd: number): Enums.ContainerFitStatus {\n    let start = element.offsetTop;\n    let end = start + element.clientHeight;\n\n    if (end <= containerEnd) {\n        return Enums.ContainerFitStatus.FullyInContainer;\n    }\n    else if (start < containerEnd) {\n        return Enums.ContainerFitStatus.Overflowing;\n    }\n    else {\n        return Enums.ContainerFitStatus.FullyOutOfContainer;\n    }\n}\n","export class Strings {\n    static readonly errors = {\n        unknownElementType: (typeName: string) => `Unknown element type \"${typeName}\". Fallback will be used if present.`,\n        unknownActionType: (typeName: string) => `Unknown action type \"${typeName}\". Fallback will be used if present.`,\n        elementTypeNotAllowed: (typeName: string) => `Element type \"${typeName}\" is not allowed in this context.`,\n        actionTypeNotAllowed: (typeName: string) => `Action type \"${typeName}\" is not allowed in this context.`,\n        invalidPropertyValue: (value: any, propertyName: string) => `Invalid value \"${value}\" for property \"${propertyName}\".`,\n        showCardMustHaveCard: () => `\"An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object.`,\n        invalidColumnWidth: (invalidWidth: string) => `Invalid column width \"${invalidWidth}\" - defaulting to \"auto\".`,\n        invalidCardVersion: (defaultingToVersion: string) => `Invalid card version. Defaulting to \"${defaultingToVersion}\".`,\n        invalidVersionString: (versionString: string) => `Invalid version string \"${versionString}\".`,\n        propertyValueNotSupported: (value: any, propertyName: string, supportedInVersion: string, versionUsed: string) => `Value \"${value}\" for property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\n        propertyNotSupported: (propertyName: string, supportedInVersion: string, versionUsed: string) => `Property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\n        indexOutOfRange: (index: number) => `Index out of range (${index}).`,\n        elementCannotBeUsedAsInline: () => \"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\",\n        inlineAlreadyParented: () => \"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\",\n        interactivityNotAllowed: () => \"Interactivity is not allowed.\",\n        inputsMustHaveUniqueId: () => \"All inputs must have a unique Id.\",\n        choiceSetMustHaveAtLeastOneChoice: () => \"An Input.ChoiceSet must have at least one choice defined.\",\n        choiceSetChoicesMustHaveTitleAndValue: () => \"All choices in an Input.ChoiceSet must have their title and value properties set.\",\n        propertyMustBeSet: (propertyName: string) => `Property \"${propertyName}\" must be set.`,\n        actionHttpHeadersMustHaveNameAndValue: () => \"All headers of an Action.Http must have their name and value properties set.\",\n        tooManyActions: (maximumActions: number) => `Maximum number of actions exceeded (${maximumActions}).`,\n        columnAlreadyBelongsToAnotherSet: () => \"This column already belongs to another ColumnSet.\",\n        invalidCardType: () => `Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\".`,\n        unsupportedCardVersion: (version: string, maxSupportedVersion: string) => `The specified card version (${version}) is not supported. The maximum supported card version is ${maxSupportedVersion}.`,\n        duplicateId: (id: string) => `Duplicate Id \"${id}\".`,\n        markdownProcessingNotEnabled: () => \"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\",\n        processMarkdownEventRemoved: () => \"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\",\n        elementAlreadyParented: () => \"The element already belongs to another container.\",\n        actionAlreadyParented: () => \"The action already belongs to another element.\",\n        elementTypeNotStandalone: (typeName: string) => `Elements of type ${typeName} cannot be used as standalone elements.`\n    };\n    static readonly hints = {\n        dontUseWeightedAndStrecthedColumnsInSameSet: () => \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\"\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { SerializableObject, Version, Versions } from \"./serialization\";\n\nexport interface ITypeRegistration<T extends SerializableObject> {\n    typeName: string,\n    objectType: { new(): T },\n    schemaVersion: Version\n}\n\nexport class CardObjectRegistry<T extends SerializableObject> {\n    private _items: { [typeName: string]: ITypeRegistration<T> } = {};\n\n    findByName(typeName: string): ITypeRegistration<T> | undefined {\n        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\n    }\n\n    clear() {\n        this._items = {};\n    }\n\n    register(typeName: string, objectType: { new(): T }, schemaVersion: Version = Versions.v1_0) {\n        let registrationInfo = this.findByName(typeName);\n\n        if (registrationInfo !== undefined) {\n            registrationInfo.objectType = objectType;\n        }\n        else {\n            registrationInfo = {\n                typeName: typeName,\n                objectType: objectType,\n                schemaVersion: schemaVersion\n            }\n        }\n\n        this._items[typeName] = registrationInfo;\n    }\n\n    unregister(typeName: string) {\n        delete this._items[typeName];\n    }\n\n    createInstance(typeName: string, targetVersion: Version): T | undefined {\n        let registrationInfo = this.findByName(typeName);\n\n        return (registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0) ? new registrationInfo.objectType() : undefined;\n    }\n\n    getItemCount(): number {\n        return Object.keys(this._items).length;\n    }\n\n    getItemAt(index: number): ITypeRegistration<T> {\n        return Object.values(this._items)[index];\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport { Strings} from \"./strings\";\nimport { Dictionary, GlobalSettings } from \"./shared\";\nimport { HostConfig } from \"./host-config\";\nimport { HostCapabilities } from \"./host-capabilities\";\nimport { Versions, property, SerializableObject, StringProperty, SerializableObjectProperty, IValidationEvent, PropertyDefinition } from \"./serialization\";\n\nexport class ValidationResults {\n    readonly allIds: Dictionary<number> = {};\n    readonly validationEvents: IValidationEvent[] = [];\n\n    addFailure(cardObject: CardObject, event: Enums.ValidationEvent, message: string) {\n        this.validationEvents.push(\n            {\n                phase: Enums.ValidationPhase.Validation,\n                source: cardObject,\n                event: event,\n                message: message\n            }\n        );\n    }\n}\n\nexport type CardObjectType = { new(): CardObject };\n\nexport abstract class CardObject extends SerializableObject {\n    //#region Schema\n\n    static readonly typeNameProperty = new StringProperty(\n        Versions.v1_0,\n        \"type\",\n        undefined,\n        undefined,\n        undefined,\n        (sender: object) => {\n            return (<CardObject>sender).getJsonTypeName()\n        });\n    static readonly idProperty = new StringProperty(Versions.v1_0, \"id\");\n    static readonly requiresProperty = new SerializableObjectProperty(\n        Versions.v1_2,\n        \"requires\",\n        HostCapabilities,\n        new HostCapabilities());\n\n    protected getSchemaKey(): string {\n        return this.getJsonTypeName();\n    }\n\n    @property(CardObject.idProperty)\n    id?: string;\n\n    @property(CardObject.requiresProperty)\n    get requires(): HostCapabilities {\n        return this.getValue(CardObject.requiresProperty);\n    }\n\n    //#endregion\n\n    private _shouldFallback: boolean = false;\n\n    protected _parent?: CardObject;\n    protected _renderedElement?: HTMLElement;\n\n    onPreProcessPropertyValue?: (sender: CardObject, property: PropertyDefinition, value: any) => any;\n\n    abstract getJsonTypeName(): string;\n\n    abstract get hostConfig(): HostConfig;\n\n    preProcessPropertyValue(property: PropertyDefinition, propertyValue?: any): any {\n        let value = propertyValue === undefined ? this.getValue(property) : propertyValue;\n\n        if (GlobalSettings.allowPreProcessingPropertyValues) {\n            let currentObject: CardObject | undefined = this;\n\n            while (currentObject && !currentObject.onPreProcessPropertyValue) {\n                currentObject = currentObject.parent;\n            }\n\n            if (currentObject && currentObject.onPreProcessPropertyValue) {\n                return currentObject.onPreProcessPropertyValue(this, property, value);\n            }\n        }\n\n        return value;\n    }\n\n    setParent(value: CardObject | undefined) {\n        this._parent = value;\n    }\n\n    setShouldFallback(value: boolean) {\n        this._shouldFallback = value;\n    }\n\n    shouldFallback(): boolean {\n        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);\n    }\n\n    getRootObject(): CardObject {\n        let rootObject: CardObject = this;\n\n        while (rootObject.parent) {\n            rootObject = rootObject.parent;\n        }\n\n        return rootObject;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        if (this.id) {\n            if (context.allIds.hasOwnProperty(this.id)) {\n                if (context.allIds[this.id] == 1) {\n                    context.addFailure(\n                        this,\n                        Enums.ValidationEvent.DuplicateId,\n                        Strings.errors.duplicateId(this.id));\n                }\n\n                context.allIds[this.id] += 1;\n            }\n            else {\n                context.allIds[this.id] = 1;\n            }\n        }\n    }\n\n    validateProperties(): ValidationResults {\n        let result = new ValidationResults();\n\n        this.internalValidateProperties(result);\n\n        return result;\n    }\n\n    get parent(): CardObject | undefined {\n        return this._parent;\n    }\n\n    get renderedElement(): HTMLElement | undefined {\n        return this._renderedElement;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { TargetVersion, Version, SerializableObject, BaseSerializationContext, PropertyBag } from \"./serialization\";\n\nexport class HostCapabilities extends SerializableObject {\n    private _capabilities: { [key: string]: TargetVersion } = {};\n\n    protected getSchemaKey(): string {\n        return \"HostCapabilities\";\n    }\n\n    protected internalParse(source: any, context: BaseSerializationContext) {\n        super.internalParse(source, context);\n\n        if (source) {\n            for (let name in source) {\n                let jsonVersion = source[name];\n\n                if (typeof jsonVersion === \"string\") {\n                    if (jsonVersion == \"*\") {\n                        this.addCapability(name, \"*\");\n                    }\n                    else {\n                        let version = Version.parse(jsonVersion, context);\n\n                        if (version && version.isValid) {\n                            this.addCapability(name, version);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\n        super.internalToJSON(target, context);\n\n        for (let key in this._capabilities) {\n            target[key] = this._capabilities[key];\n        }\n    }\n\n    addCapability(name: string, version: TargetVersion) {\n        this._capabilities[name] = version;\n    }\n\n    removeCapability(name: string) {\n        delete this._capabilities[name];\n    }\n\n    clear() {\n        this._capabilities = {};\n    }\n\n    hasCapability(name: string, version: TargetVersion): boolean {\n        if (this._capabilities.hasOwnProperty(name)) {\n            if (version == \"*\" || this._capabilities[name] == \"*\") {\n                return true;\n            }\n\n            return version.compareTo(<Version>this._capabilities[name]) <= 0;\n        }\n\n        return false;\n    }\n\n    areAllMet(hostCapabilities: HostCapabilities): boolean {\n        for (let capabilityName in this._capabilities) {\n            if (!hostCapabilities.hasCapability(capabilityName, this._capabilities[capabilityName])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport * as Shared from \"./shared\";\nimport { HostCapabilities } from \"./host-capabilities\";\n\nfunction parseHostConfigEnum(targetEnum: { [s: number]: string }, value: string | number, defaultValue: number): number {\n    if (typeof value === \"string\") {\n        let parsedValue = Utils.parseEnum(targetEnum, value, defaultValue);\n\n        return parsedValue !== undefined ? parsedValue : defaultValue;\n    }\n    else if (typeof value === \"number\") {\n        return value;\n    }\n    else {\n        return defaultValue;\n    }\n}\n\nexport class ColorDefinition {\n    default: string = \"#000000\";\n    subtle: string = \"#666666\";\n\n    constructor(defaultColor?: string, subtleColor?: string) {\n        if (defaultColor) {\n            this.default = defaultColor;\n        }\n\n        if (subtleColor) {\n            this.subtle = subtleColor;\n        }\n    }\n\n    parse(obj?: any) {\n        if (obj) {\n            this.default = obj[\"default\"] || this.default;\n            this.subtle = obj[\"subtle\"] || this.subtle;\n        }\n    }\n}\n\nexport class TextColorDefinition extends ColorDefinition {\n    readonly highlightColors = new ColorDefinition(\"#22000000\", \"#11000000\");\n\n    parse(obj?: any) {\n        super.parse(obj);\n\n        if (obj) {\n            this.highlightColors.parse(obj[\"highlightColors\"]);\n        }\n    }\n}\n\nexport class AdaptiveCardConfig {\n    allowCustomStyle: boolean = false;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.allowCustomStyle = obj[\"allowCustomStyle\"] || this.allowCustomStyle;\n        }\n    }\n}\n\nexport class ImageSetConfig {\n    imageSize: Enums.Size = Enums.Size.Medium;\n    maxImageHeight: number = 100;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.imageSize = obj[\"imageSize\"] != null ? obj[\"imageSize\"] : this.imageSize;\n            this.maxImageHeight = <number>Utils.parseNumber(obj[\"maxImageHeight\"], 100);\n        }\n    }\n\n    toJSON() {\n        return {\n            imageSize: Enums.Size[this.imageSize],\n            maxImageHeight: this.maxImageHeight\n        }\n    }\n}\n\nexport class MediaConfig {\n    defaultPoster?: string;\n    allowInlinePlayback: boolean = true;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.defaultPoster = obj[\"defaultPoster\"];\n            this.allowInlinePlayback = obj[\"allowInlinePlayback\"] || this.allowInlinePlayback;\n        }\n    }\n\n    toJSON() {\n        return {\n            defaultPoster: this.defaultPoster,\n            allowInlinePlayback: this.allowInlinePlayback\n        }\n    }\n}\n\nexport class BaseTextDefinition {\n    size: Enums.TextSize = Enums.TextSize.Default;\n    color: Enums.TextColor = Enums.TextColor.Default;;\n    isSubtle: boolean = false;\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.size = parseHostConfigEnum(Enums.TextSize, obj[\"size\"], this.size);\n            this.color = parseHostConfigEnum(Enums.TextColor, obj[\"color\"], this.color);\n            this.isSubtle = obj[\"isSubtle\"] || this.isSubtle;\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], this.getDefaultWeight());\n        }\n    }\n\n    getDefaultWeight() {\n        return Enums.TextWeight.Default;\n    }\n\n    toJSON(): any {\n        return {\n            size: Enums.TextSize[this.size],\n            color: Enums.TextColor[this.color],\n            isSubtle: this.isSubtle,\n            weight: Enums.TextWeight[this.weight]\n        }\n    }\n}\n\nexport class RequiredInputLabelTextDefinition extends BaseTextDefinition {\n    suffix?: string = \" *\";\n    suffixColor: Enums.TextColor = Enums.TextColor.Attention;\n\n    constructor(obj?: any) {\n        super(obj);\n\n        if (obj) {\n            this.suffix = obj[\"suffix\"] || this.suffix;\n            this.suffixColor = parseHostConfigEnum(Enums.TextColor, obj[\"suffixColor\"], this.suffixColor);\n        }\n    }\n\n    toJSON(): any {\n        let result = super.toJSON();\n        result[\"suffix\"] = this.suffix;\n        result[\"suffixColor\"] = Enums.TextColor[this.suffixColor];\n\n        return result;\n    }\n}\n\nexport class InputLabelConfig {\n    inputSpacing: Enums.Spacing = Enums.Spacing.Small;\n    readonly requiredInputs: RequiredInputLabelTextDefinition = new RequiredInputLabelTextDefinition();\n    readonly optionalInputs: BaseTextDefinition = new BaseTextDefinition();\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.inputSpacing = parseHostConfigEnum(Enums.Spacing, obj[\"inputSpacing\"], this.inputSpacing);\n            this.requiredInputs = new RequiredInputLabelTextDefinition(obj[\"requiredInputs\"]);\n            this.optionalInputs = new BaseTextDefinition(obj[\"optionalInputs\"]);\n        }\n    }\n}\n\nexport class InputConfig {\n    readonly label: InputLabelConfig = new InputLabelConfig();\n    readonly errorMessage: BaseTextDefinition = new BaseTextDefinition({ color: Enums.TextColor.Attention });\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.label = new InputLabelConfig(obj[\"label\"]);\n            this.errorMessage = new BaseTextDefinition(obj[\"errorMessage\"]);\n        }\n    }\n}\n\nexport class FactTextDefinition extends BaseTextDefinition {\n    wrap: boolean = true;\n\n    constructor(obj?: any) {\n        super(obj);\n\n        if (obj) {\n            this.wrap = obj[\"wrap\"] != null ? obj[\"wrap\"] : this.wrap;\n        }\n    }\n\n    toJSON(): any {\n        let result = super.toJSON();\n        result[\"wrap\"] = this.wrap;\n\n        return result;\n    }\n}\n\nexport class FactTitleDefinition extends FactTextDefinition {\n    maxWidth?: number = 150;\n    weight: Enums.TextWeight = Enums.TextWeight.Bolder;\n\n    constructor(obj?: any) {\n        super(obj);\n\n        if (obj) {\n            this.maxWidth = obj[\"maxWidth\"] != null ? obj[\"maxWidth\"] : this.maxWidth;\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], Enums.TextWeight.Bolder);\n        }\n    }\n\n    getDefaultWeight() {\n        return Enums.TextWeight.Bolder;\n    }\n}\n\nexport class FactSetConfig {\n    readonly title: FactTitleDefinition = new FactTitleDefinition();\n    readonly value: FactTextDefinition = new FactTextDefinition();\n    spacing: number = 10;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.title = new FactTitleDefinition(obj[\"title\"]);\n            this.value = new FactTextDefinition(obj[\"value\"]);\n            this.spacing = obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;\n        }\n    }\n}\n\nexport class ShowCardActionConfig {\n    actionMode: Enums.ShowCardActionMode = Enums.ShowCardActionMode.Inline;\n    inlineTopMargin: number = 16;\n    style?: string = Enums.ContainerStyle.Emphasis;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.actionMode = parseHostConfigEnum(Enums.ShowCardActionMode, obj[\"actionMode\"], Enums.ShowCardActionMode.Inline);\n            this.inlineTopMargin = obj[\"inlineTopMargin\"] != null ? obj[\"inlineTopMargin\"] : this.inlineTopMargin;\n            this.style = obj[\"style\"] && typeof obj[\"style\"] === \"string\" ? obj[\"style\"] : Enums.ContainerStyle.Emphasis;\n        }\n    }\n\n    toJSON() {\n        return {\n            actionMode: Enums.ShowCardActionMode[this.actionMode],\n            inlineTopMargin: this.inlineTopMargin,\n            style: this.style\n        }\n    }\n}\n\nexport class ActionsConfig {\n    maxActions: number = 5;\n    spacing: Enums.Spacing = Enums.Spacing.Default;\n    buttonSpacing: number = 20;\n    readonly showCard: ShowCardActionConfig = new ShowCardActionConfig();\n    preExpandSingleShowCardAction?: boolean = false;\n    actionsOrientation: Enums.Orientation = Enums.Orientation.Horizontal;\n    actionAlignment: Enums.ActionAlignment = Enums.ActionAlignment.Left;\n    iconPlacement: Enums.ActionIconPlacement = Enums.ActionIconPlacement.LeftOfTitle;\n    allowTitleToWrap: boolean = false;\n    iconSize: number = 16;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.maxActions = obj[\"maxActions\"] != null ? obj[\"maxActions\"] : this.maxActions;\n            this.spacing = parseHostConfigEnum(Enums.Spacing, obj.spacing && obj.spacing, Enums.Spacing.Default);\n            this.buttonSpacing = obj[\"buttonSpacing\"] != null ? obj[\"buttonSpacing\"] : this.buttonSpacing;\n            this.showCard = new ShowCardActionConfig(obj[\"showCard\"]);\n            this.preExpandSingleShowCardAction = Utils.parseBool(obj[\"preExpandSingleShowCardAction\"], false);\n            this.actionsOrientation = parseHostConfigEnum(Enums.Orientation, obj[\"actionsOrientation\"], Enums.Orientation.Horizontal);\n            this.actionAlignment = parseHostConfigEnum(Enums.ActionAlignment, obj[\"actionAlignment\"], Enums.ActionAlignment.Left);\n            this.iconPlacement = parseHostConfigEnum(Enums.ActionIconPlacement, obj[\"iconPlacement\"], Enums.ActionIconPlacement.LeftOfTitle);\n            this.allowTitleToWrap = obj[\"allowTitleToWrap\"] != null ? obj[\"allowTitleToWrap\"] : this.allowTitleToWrap;\n\n            try {\n                let sizeAndUnit = Shared.SizeAndUnit.parse(obj[\"iconSize\"]);\n\n                if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {\n                    this.iconSize = sizeAndUnit.physicalSize;\n                }\n            }\n            catch (e) {\n                // Swallow this, keep default icon size\n            }\n        }\n    }\n\n    toJSON() {\n        return {\n            maxActions: this.maxActions,\n            spacing: Enums.Spacing[this.spacing],\n            buttonSpacing: this.buttonSpacing,\n            showCard: this.showCard,\n            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,\n            actionsOrientation: Enums.Orientation[this.actionsOrientation],\n            actionAlignment: Enums.ActionAlignment[this.actionAlignment]\n        }\n    }\n}\n\nexport class ColorSetDefinition {\n    private parseSingleColor(obj: any, propertyName: string) {\n        if (obj) {\n            ((<any>this)[propertyName] as TextColorDefinition).parse(obj[propertyName]);\n        }\n    }\n\n    default: TextColorDefinition = new TextColorDefinition();\n    dark: TextColorDefinition = new TextColorDefinition();\n    light: TextColorDefinition = new TextColorDefinition();\n    accent: TextColorDefinition = new TextColorDefinition();\n    good: TextColorDefinition = new TextColorDefinition();\n    warning: TextColorDefinition = new TextColorDefinition();\n    attention: TextColorDefinition = new TextColorDefinition();\n\n    constructor(obj?: any) {\n        this.parse(obj);\n    }\n\n    parse(obj: any) {\n        if (obj) {\n            this.parseSingleColor(obj, \"default\");\n            this.parseSingleColor(obj, \"dark\");\n            this.parseSingleColor(obj, \"light\");\n            this.parseSingleColor(obj, \"accent\");\n            this.parseSingleColor(obj, \"good\");\n            this.parseSingleColor(obj, \"warning\");\n            this.parseSingleColor(obj, \"attention\");\n        }\n    }\n}\n\nexport class ContainerStyleDefinition {\n    backgroundColor?: string;\n\n    readonly foregroundColors: ColorSetDefinition = new ColorSetDefinition(\n        {\n            \"default\": { default: \"#333333\", subtle: \"#EE333333\" },\n            \"dark\": { default: \"#000000\", subtle: \"#66000000\" },\n            \"light\": { default: \"#FFFFFF\", subtle: \"#33000000\" },\n            \"accent\": { default: \"#2E89FC\", subtle: \"#882E89FC\" },\n            \"good\": { default: \"#028A02\", subtle: \"#DD027502\" },\n            \"warning\": { default: \"#E69500\", subtle: \"#DDE69500\" },\n            \"attention\": { default: \"#CC3300\", subtle: \"#DDCC3300\" }\n        }\n    );\n\n    highlightBackgroundColor?: string;\n    highlightForegroundColor?: string;\n\n    parse(obj: any) {\n        if (obj) {\n            this.backgroundColor = obj[\"backgroundColor\"];\n\n            this.foregroundColors.parse(obj[\"foregroundColors\"]);\n\n            this.highlightBackgroundColor = obj[\"highlightBackgroundColor\"];\n            this.highlightForegroundColor = obj[\"highlightForegroundColor\"];\n        }\n    }\n\n    constructor(obj?: any) {\n        this.parse(obj);\n    }\n\n    get isBuiltIn(): boolean {\n        return false;\n    }\n}\n\nclass BuiltInContainerStyleDefinition extends ContainerStyleDefinition {\n    get isBuiltIn(): boolean {\n        return true;\n    }\n}\n\nexport interface ILineHeightDefinitions {\n    small: number;\n    medium: number;\n    default: number;\n    large: number;\n    extraLarge: number;\n}\n\nexport class ContainerStyleSet {\n    private _allStyles: { [key: string]: ContainerStyleDefinition } = {};\n\n    constructor(obj?: any) {\n        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();\n\n        if (obj) {\n            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);\n            this._allStyles[Enums.ContainerStyle.Emphasis].parse(obj[Enums.ContainerStyle.Emphasis]);\n            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);\n            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);\n            this._allStyles[Enums.ContainerStyle.Attention].parse(obj[Enums.ContainerStyle.Attention]);\n            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);\n\n            const customStyleArray = obj[\"customStyles\"];\n\n            if (customStyleArray && Array.isArray(customStyleArray)) {\n                for (let customStyle of customStyleArray) {\n                    if (customStyle) {\n                        let styleName = customStyle[\"name\"];\n\n                        if (styleName && typeof styleName === \"string\") {\n                            if (this._allStyles.hasOwnProperty(styleName)) {\n                                this._allStyles[styleName].parse(customStyle[\"style\"]);\n                            }\n                            else {\n                                this._allStyles[styleName] = new ContainerStyleDefinition(customStyle[\"style\"]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    toJSON() {\n        let customStyleArray: any[] = [];\n\n        Object.keys(this._allStyles).forEach(\n            (key) => {\n                if (!this._allStyles[key].isBuiltIn) {\n                    customStyleArray.push({\n                        name: key,\n                        style: this._allStyles[key]\n                    });\n                }\n            });\n\n        let result: any = {\n            default: this.default,\n            emphasis: this.emphasis\n        }\n\n        if (customStyleArray.length > 0) {\n            result.customStyles = customStyleArray;\n        }\n\n        return result;\n    }\n\n    getStyleByName(name: string | undefined, defaultValue?: ContainerStyleDefinition): ContainerStyleDefinition {\n        if (name && this._allStyles.hasOwnProperty(name)) {\n            return this._allStyles[name];\n        }\n        else {\n            return defaultValue ? defaultValue : this._allStyles[Enums.ContainerStyle.Default];\n        }\n    }\n\n    get default(): ContainerStyleDefinition {\n        return this._allStyles[Enums.ContainerStyle.Default];\n    }\n\n    get emphasis(): ContainerStyleDefinition {\n        return this._allStyles[Enums.ContainerStyle.Emphasis];\n    }\n}\n\nexport interface IFontSizeDefinitions {\n    small: number;\n    default: number;\n    medium: number;\n    large: number;\n    extraLarge: number;\n}\n\nexport interface IFontWeightDefinitions {\n    lighter: number;\n    default: number;\n    bolder: number;\n}\n\nexport class FontTypeDefinition {\n    static readonly monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\n\n    fontFamily?: string = \"Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif\";\n\n    fontSizes: IFontSizeDefinitions = {\n        small: 12,\n        default: 14,\n        medium: 17,\n        large: 21,\n        extraLarge: 26\n    };\n\n    fontWeights: IFontWeightDefinitions = {\n        lighter: 200,\n        default: 400,\n        bolder: 600\n    };\n\n    constructor(fontFamily?: string) {\n        if (fontFamily) {\n            this.fontFamily = fontFamily;\n        }\n    }\n\n    parse(obj?: any) {\n        this.fontFamily = obj[\"fontFamily\"] || this.fontFamily;\n        this.fontSizes = {\n            small: obj.fontSizes && obj.fontSizes[\"small\"] || this.fontSizes.small,\n            default: obj.fontSizes && obj.fontSizes[\"default\"] || this.fontSizes.default,\n            medium: obj.fontSizes && obj.fontSizes[\"medium\"] || this.fontSizes.medium,\n            large: obj.fontSizes && obj.fontSizes[\"large\"] || this.fontSizes.large,\n            extraLarge: obj.fontSizes && obj.fontSizes[\"extraLarge\"] || this.fontSizes.extraLarge\n        };\n        this.fontWeights = {\n            lighter: obj.fontWeights && obj.fontWeights[\"lighter\"] || this.fontWeights.lighter,\n            default: obj.fontWeights && obj.fontWeights[\"default\"] || this.fontWeights.default,\n            bolder: obj.fontWeights && obj.fontWeights[\"bolder\"] || this.fontWeights.bolder\n        };\n    }\n}\n\nexport class FontTypeSet {\n    default: FontTypeDefinition;\n    monospace: FontTypeDefinition;\n\n    constructor(obj?: any) {\n        this.default = new FontTypeDefinition();\n        this.monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\n\n        if (obj) {\n            this.default.parse(obj[\"default\"]);\n            this.monospace.parse(obj[\"monospace\"]);\n        }\n    }\n\n    getStyleDefinition(style: Enums.FontType | undefined): FontTypeDefinition {\n        switch (style) {\n            case Enums.FontType.Monospace:\n                return this.monospace;\n            case Enums.FontType.Default:\n            default:\n                return this.default;\n        }\n    }\n}\n\nexport class HostConfig {\n    readonly hostCapabilities = new HostCapabilities();\n\n    private _legacyFontType: FontTypeDefinition;\n\n    choiceSetInputValueSeparator: string = \",\";\n    supportsInteractivity: boolean = true;\n    lineHeights?: ILineHeightDefinitions;\n    fontTypes?: FontTypeSet;\n\n    readonly spacing = {\n        small: 3,\n        default: 8,\n        medium: 20,\n        large: 30,\n        extraLarge: 40,\n        padding: 15\n    };\n\n    readonly separator = {\n        lineThickness: 1,\n        lineColor: \"#EEEEEE\"\n    };\n\n    readonly imageSizes = {\n        small: 40,\n        medium: 80,\n        large: 160\n    };\n\n    readonly containerStyles: ContainerStyleSet = new ContainerStyleSet();\n    readonly inputs: InputConfig = new InputConfig();\n    readonly actions: ActionsConfig = new ActionsConfig();\n    readonly adaptiveCard: AdaptiveCardConfig = new AdaptiveCardConfig();\n    readonly imageSet: ImageSetConfig = new ImageSetConfig();\n    readonly media: MediaConfig = new MediaConfig();\n    readonly factSet: FactSetConfig = new FactSetConfig();\n\n    cssClassNamePrefix?: string;\n    alwaysAllowBleed: boolean = false;\n\n    constructor(obj?: any) {\n        if (obj) {\n            if (typeof obj === \"string\" || obj instanceof String) {\n                obj = JSON.parse(obj as string);\n            }\n\n            this.choiceSetInputValueSeparator = (obj && typeof obj[\"choiceSetInputValueSeparator\"] === \"string\") ? obj[\"choiceSetInputValueSeparator\"] : this.choiceSetInputValueSeparator;\n            this.supportsInteractivity = (obj && typeof obj[\"supportsInteractivity\"] === \"boolean\") ? obj[\"supportsInteractivity\"] : this.supportsInteractivity;\n\n            this._legacyFontType = new FontTypeDefinition();\n            this._legacyFontType.parse(obj);\n\n            if (obj.fontTypes) {\n                this.fontTypes = new FontTypeSet(obj.fontTypes);\n            }\n\n            if (obj.lineHeights) {\n                this.lineHeights = {\n                    small: obj.lineHeights[\"small\"],\n                    default: obj.lineHeights[\"default\"],\n                    medium: obj.lineHeights[\"medium\"],\n                    large: obj.lineHeights[\"large\"],\n                    extraLarge: obj.lineHeights[\"extraLarge\"]\n                };\n            };\n\n            this.imageSizes = {\n                small: obj.imageSizes && obj.imageSizes[\"small\"] || this.imageSizes.small,\n                medium: obj.imageSizes && obj.imageSizes[\"medium\"] || this.imageSizes.medium,\n                large: obj.imageSizes && obj.imageSizes[\"large\"] || this.imageSizes.large,\n            };\n\n            this.containerStyles = new ContainerStyleSet(obj[\"containerStyles\"]);\n            this.spacing = {\n                small: obj.spacing && obj.spacing[\"small\"] || this.spacing.small,\n                default: obj.spacing && obj.spacing[\"default\"] || this.spacing.default,\n                medium: obj.spacing && obj.spacing[\"medium\"] || this.spacing.medium,\n                large: obj.spacing && obj.spacing[\"large\"] || this.spacing.large,\n                extraLarge: obj.spacing && obj.spacing[\"extraLarge\"] || this.spacing.extraLarge,\n                padding: obj.spacing && obj.spacing[\"padding\"] || this.spacing.padding\n            };\n\n            this.separator = {\n                lineThickness: obj.separator && obj.separator[\"lineThickness\"] || this.separator.lineThickness,\n                lineColor: obj.separator && obj.separator[\"lineColor\"] || this.separator.lineColor\n            }\n\n            this.inputs = new InputConfig(obj.inputs || this.inputs);\n            this.actions = new ActionsConfig(obj.actions || this.actions);\n            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);\n            this.imageSet = new ImageSetConfig(obj[\"imageSet\"]);\n            this.factSet = new FactSetConfig(obj[\"factSet\"])\n        }\n    }\n\n    getFontTypeDefinition(style?: Enums.FontType): FontTypeDefinition {\n        if (this.fontTypes) {\n            return this.fontTypes.getStyleDefinition(style);\n        }\n        else {\n            return style == Enums.FontType.Monospace ? FontTypeDefinition.monospace : this._legacyFontType;\n        }\n    }\n\n    getEffectiveSpacing(spacing: Enums.Spacing): number {\n        switch (spacing) {\n            case Enums.Spacing.Small:\n                return this.spacing.small;\n            case Enums.Spacing.Default:\n                return this.spacing.default;\n            case Enums.Spacing.Medium:\n                return this.spacing.medium;\n            case Enums.Spacing.Large:\n                return this.spacing.large;\n            case Enums.Spacing.ExtraLarge:\n                return this.spacing.extraLarge;\n            case Enums.Spacing.Padding:\n                return this.spacing.padding;\n            default:\n                return 0;\n        }\n    }\n\n    paddingDefinitionToSpacingDefinition(paddingDefinition: Shared.PaddingDefinition): Shared.SpacingDefinition {\n        return new Shared.SpacingDefinition(\n            this.getEffectiveSpacing(paddingDefinition.top),\n            this.getEffectiveSpacing(paddingDefinition.right),\n            this.getEffectiveSpacing(paddingDefinition.bottom),\n            this.getEffectiveSpacing(paddingDefinition.left));\n    }\n\n    makeCssClassNames(...classNames: string[]): string[] {\n        let result: string[] = [];\n\n        for (let className of classNames) {\n            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + \"-\" : \"\") + className);\n        }\n\n        return result;\n    }\n\n    makeCssClassName(...classNames: string[]): string {\n        let result = this.makeCssClassNames(...classNames).join(\" \");\n\n        return result ? result : \"\";\n    }\n\n    get fontFamily(): string | undefined {\n        return this._legacyFontType.fontFamily;\n    }\n\n    set fontFamily(value: string | undefined) {\n        this._legacyFontType.fontFamily = value;\n    }\n\n    get fontSizes(): IFontSizeDefinitions {\n        return this._legacyFontType.fontSizes;\n    }\n\n    get fontWeights(): IFontWeightDefinitions {\n        return this._legacyFontType.fontWeights;\n    }\n}\n\nexport const defaultHostConfig: HostConfig = new HostConfig(\n    {\n        supportsInteractivity: true,\n        spacing: {\n            small: 10,\n            default: 20,\n            medium: 30,\n            large: 40,\n            extraLarge: 50,\n            padding: 20\n        },\n        separator: {\n            lineThickness: 1,\n            lineColor: \"#EEEEEE\"\n        },\n        fontTypes: {\n            default: {\n                fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n                fontSizes: {\n                    small: 12,\n                    default: 14,\n                    medium: 17,\n                    large: 21,\n                    extraLarge: 26\n                },\n                fontWeights: {\n                    lighter: 200,\n                    default: 400,\n                    bolder: 600\n                }\n            },\n            monospace: {\n                fontFamily: \"'Courier New', Courier, monospace\",\n                fontSizes: {\n                    small: 12,\n                    default: 14,\n                    medium: 17,\n                    large: 21,\n                    extraLarge: 26\n                },\n                fontWeights: {\n                    lighter: 200,\n                    default: 400,\n                    bolder: 600\n                }\n            }\n        },\n        imageSizes: {\n            small: 40,\n            medium: 80,\n            large: 160\n        },\n        containerStyles: {\n            default: {\n                backgroundColor: \"#FFFFFF\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            emphasis: {\n                backgroundColor: \"#08000000\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            accent: {\n                backgroundColor: \"#C7DEF9\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            good: {\n                backgroundColor: \"#CCFFCC\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            attention: {\n                backgroundColor: \"#FFC5B2\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            warning: {\n                backgroundColor: \"#FFE2B2\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            }\n        },\n        inputs: {\n            label: {\n                requiredInputs: {\n                    color: Enums.TextColor.Accent,\n                    size: Enums.TextSize.ExtraLarge,\n                    weight: Enums.TextWeight.Bolder,\n                    isSubtle: true,\n                    suffix: \" (required)\",\n                    suffixColor: Enums.TextColor.Good\n                },\n                optionalInputs: {\n                    color: Enums.TextColor.Warning,\n                    size: Enums.TextSize.Medium,\n                    weight: Enums.TextWeight.Lighter,\n                    isSubtle: false\n                }\n            },\n            errorMessage: {\n                color: Enums.TextColor.Accent,\n                size: Enums.TextSize.Small,\n                weight: Enums.TextWeight.Bolder\n            }\n        },\n        actions: {\n            maxActions: 5,\n            spacing: Enums.Spacing.Default,\n            buttonSpacing: 10,\n            showCard: {\n                actionMode: Enums.ShowCardActionMode.Inline,\n                inlineTopMargin: 16\n            },\n            actionsOrientation: Enums.Orientation.Horizontal,\n            actionAlignment: Enums.ActionAlignment.Left\n        },\n        adaptiveCard: {\n            allowCustomStyle: false\n        },\n        imageSet: {\n            imageSize: Enums.Size.Medium,\n            maxImageHeight: 100\n        },\n        factSet: {\n            title: {\n                color: Enums.TextColor.Default,\n                size: Enums.TextSize.Default,\n                isSubtle: false,\n                weight: Enums.TextWeight.Bolder,\n                wrap: true,\n                maxWidth: 150,\n            },\n            value: {\n                color: Enums.TextColor.Default,\n                size: Enums.TextSize.Default,\n                isSubtle: false,\n                weight: Enums.TextWeight.Default,\n                wrap: true,\n            },\n            spacing: 10\n        }\n    });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport * from \"./serialization\";\nexport * from \"./registry\";\nexport * from \"./card-object\";\nexport * from \"./card-elements\";\nexport * from \"./enums\";\nexport * from \"./host-config\";\nexport * from \"./shared\";\nexport * from \"./utils\";\nexport * from \"./strings\";\nexport { IAdaptiveCard, ICardElement } from \"./schema\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport { PaddingDefinition, GlobalSettings, SizeAndUnit,SpacingDefinition,\n    Dictionary, StringWithSubstitutions, ContentTypes, IInput, IResourceInformation } from \"./shared\";\nimport * as Utils from \"./utils\";\nimport { HostConfig, defaultHostConfig, BaseTextDefinition, FontTypeDefinition, ColorSetDefinition, TextColorDefinition, ContainerStyleDefinition } from \"./host-config\";\nimport * as TextFormatters from \"./text-formatters\";\nimport { CardObject, ValidationResults } from \"./card-object\";\nimport { Versions, Version, property, BaseSerializationContext, SerializableObject, SerializableObjectSchema, StringProperty,\n    BoolProperty, ValueSetProperty, EnumProperty, SerializableObjectCollectionProperty, SerializableObjectProperty, PixelSizeProperty,\n    NumProperty, PropertyBag, CustomProperty, PropertyDefinition } from \"./serialization\";\nimport { CardObjectRegistry } from \"./registry\";\nimport { Strings } from \"./strings\";\n\nexport type CardElementHeight = \"auto\" | \"stretch\";\n\nexport abstract class CardElement extends CardObject {\n    //#region Schema\n\n    static readonly langProperty = new StringProperty(Versions.v1_1, \"lang\", true, /^[a-z]{2,3}$/ig);\n    static readonly isVisibleProperty = new BoolProperty(Versions.v1_2, \"isVisible\", true);\n    static readonly separatorProperty = new BoolProperty(Versions.v1_0, \"separator\", false);\n    static readonly heightProperty = new ValueSetProperty(\n        Versions.v1_1,\n        \"height\",\n        [\n            { value: \"auto\" },\n            { value: \"stretch\" }\n        ],\n        \"auto\");\n    static readonly horizontalAlignmentProperty = new EnumProperty(\n        Versions.v1_0,\n        \"horizontalAlignment\",\n        Enums.HorizontalAlignment,\n        Enums.HorizontalAlignment.Left);\n    static readonly spacingProperty = new EnumProperty(\n        Versions.v1_0,\n        \"spacing\",\n        Enums.Spacing,\n        Enums.Spacing.Default);\n\n    @property(CardElement.horizontalAlignmentProperty)\n    horizontalAlignment: Enums.HorizontalAlignment;\n\n    @property(CardElement.spacingProperty)\n    spacing: Enums.Spacing;\n\n    @property(CardElement.separatorProperty)\n    separator: boolean;\n\n    @property(CardElement.heightProperty)\n    height: CardElementHeight;\n\n    @property(CardElement.langProperty)\n    get lang(): string | undefined {\n        let lang = this.getValue(CardElement.langProperty);\n\n        if (lang) {\n            return lang;\n        }\n        else {\n            if (this.parent) {\n                return this.parent.lang;\n            }\n            else {\n                return undefined;\n            }\n        }\n    }\n\n    set lang(value: string | undefined) {\n        this.setValue(CardElement.langProperty, value);\n    }\n\n    @property(CardElement.isVisibleProperty)\n    get isVisible(): boolean {\n        return this.getValue(CardElement.isVisibleProperty);\n    }\n\n    set isVisible(value: boolean) {\n        // If the element is going to be hidden, reset any changes that were due\n        // to overflow truncation (this ensures that if the element is later\n        // un-hidden it has the right content)\n        if (GlobalSettings.useAdvancedCardBottomTruncation && !value) {\n            this.undoOverflowTruncation();\n        }\n\n        if (this.isVisible !== value) {\n            this.setValue(CardElement.isVisibleProperty, value);\n\n            this.updateRenderedElementVisibility();\n\n            if (this._renderedElement) {\n                raiseElementVisibilityChangedEvent(this);\n            }\n        }\n    }\n\n    //#endregion\n\n    private _hostConfig?: HostConfig;\n    private _separatorElement?: HTMLElement;\n    private _truncatedDueToOverflow: boolean = false;\n    private _defaultRenderedElementDisplayMode?: string;\n    private _padding?: PaddingDefinition;\n\n    private internalRenderSeparator(): HTMLElement | undefined {\n        let renderedSeparator = Utils.renderSeparation(\n            this.hostConfig,\n            {\n                spacing: this.hostConfig.getEffectiveSpacing(this.spacing),\n                lineThickness: this.separator ? this.hostConfig.separator.lineThickness : undefined,\n                lineColor: this.separator ? this.hostConfig.separator.lineColor : undefined\n            },\n            this.separatorOrientation);\n\n            if (GlobalSettings.alwaysBleedSeparators && renderedSeparator && this.separatorOrientation == Enums.Orientation.Horizontal) {\n                // Adjust separator's margins if the option to always bleed separators is turned on\n                let parentContainer = this.getParentContainer();\n\n                if (parentContainer && parentContainer.getEffectivePadding()) {\n                    let parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(parentContainer.getEffectivePadding());\n\n                    renderedSeparator.style.marginLeft = \"-\" + parentPhysicalPadding.left + \"px\";\n                    renderedSeparator.style.marginRight = \"-\" + parentPhysicalPadding.right + \"px\";\n                }\n            }\n\n            return renderedSeparator;\n    }\n\n    private updateRenderedElementVisibility() {\n        let displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : \"none\";\n\n        if (this._renderedElement) {\n            if (displayMode) {\n                this._renderedElement.style.display = displayMode;\n            }\n            else {\n                this._renderedElement.style.removeProperty(\"display\");\n            }\n        }\n\n        if (this._separatorElement) {\n            if (this.parent && this.parent.isFirstElement(this)) {\n                this._separatorElement.style.display = \"none\";\n            }\n            else {\n                if (displayMode) {\n                    this._separatorElement.style.display = displayMode;\n                }\n                else {\n                    this._separatorElement.style.removeProperty(\"display\");\n                }\n            }\n        }\n    }\n\n    private hideElementDueToOverflow() {\n        if (this._renderedElement && this.isVisible) {\n            this._renderedElement.style.visibility = \"hidden\";\n\n            this.isVisible = false;\n            raiseElementVisibilityChangedEvent(this, false);\n        }\n    }\n\n    private showElementHiddenDueToOverflow() {\n        if (this._renderedElement && !this.isVisible) {\n            this._renderedElement.style.removeProperty(\"visibility\");\n\n            this.isVisible = true;\n            raiseElementVisibilityChangedEvent(this, false);\n        }\n    }\n\n    // Marked private to emulate internal access\n    private handleOverflow(maxHeight: number) {\n        if (this.isVisible || this.isHiddenDueToOverflow()) {\n            let handled = this.truncateOverflow(maxHeight);\n\n            // Even if we were unable to truncate the element to fit this time,\n            // it still could have been previously truncated\n            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;\n\n            if (!handled) {\n                this.hideElementDueToOverflow();\n            }\n            else if (handled && !this.isVisible) {\n                this.showElementHiddenDueToOverflow();\n            }\n        }\n    }\n\n    // Marked private to emulate internal access\n    private resetOverflow(): boolean {\n        let sizeChanged = false;\n\n        if (this._truncatedDueToOverflow) {\n            this.undoOverflowTruncation();\n            this._truncatedDueToOverflow = false;\n            sizeChanged = true;\n        }\n\n        if (this.isHiddenDueToOverflow()) {\n            this.showElementHiddenDueToOverflow();\n        }\n\n        return sizeChanged;\n    }\n\n    protected createPlaceholderElement(): HTMLElement {\n        let styleDefinition = this.getEffectiveStyleDefinition();\n        let foregroundCssColor = Utils.stringToCssColor(styleDefinition.foregroundColors.default.subtle);\n\n        let element = document.createElement(\"div\");\n        element.style.border = \"1px dashed \" + foregroundCssColor;\n        element.style.padding = \"4px\";\n        element.style.minHeight = \"32px\";\n        element.style.fontSize = \"10px\";\n        element.style.color = <string>foregroundCssColor;\n        element.innerText = \"Empty \" + this.getJsonTypeName();\n\n        return element;\n    }\n\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\n        if (this.height === \"auto\") {\n            renderedElement.style.flex = \"0 0 auto\";\n        }\n        else {\n            renderedElement.style.flex = \"1 1 auto\";\n        }\n    }\n\n    protected isDisplayed(): boolean {\n        return this._renderedElement !== undefined && this.isVisible && this._renderedElement.offsetHeight > 0;\n    }\n\n    protected abstract internalRender(): HTMLElement | undefined;\n\n    protected overrideInternalRender(): HTMLElement | undefined {\n        return this.internalRender();\n    }\n\n    protected applyPadding() {\n        if (this.separatorElement) {\n            if (GlobalSettings.alwaysBleedSeparators && this.separatorOrientation == Enums.Orientation.Horizontal && !this.isBleeding()) {\n                let padding = new PaddingDefinition();\n\n                this.getImmediateSurroundingPadding(padding);\n\n                let physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n                this.separatorElement.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\n                this.separatorElement.style.marginRight = \"-\" + physicalPadding.right + \"px\";\n            }\n            else {\n                this.separatorElement.style.marginRight = \"0\";\n                this.separatorElement.style.marginLeft = \"0\";\n            }\n        }\n    }\n\n    /*\n     * Called when this element overflows the bottom of the card.\n     * maxHeight will be the amount of space still available on the card (0 if\n     * the element is fully off the card).\n     */\n    protected truncateOverflow(maxHeight: number): boolean {\n        // Child implementations should return true if the element handled\n        // the truncation request such that its content fits within maxHeight,\n        // false if the element should fall back to being hidden\n        return false;\n    }\n\n    /*\n     * This should reverse any changes performed in truncateOverflow().\n     */\n    protected undoOverflowTruncation() { }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition();\n    }\n\n    protected getHasBackground(): boolean {\n        return false;\n    }\n\n    protected getPadding(): PaddingDefinition | undefined {\n        return this._padding;\n    }\n\n    protected setPadding(value: PaddingDefinition | undefined) {\n        this._padding = value;\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return context.elementRegistry.findByName(this.getJsonTypeName()) !== undefined;\n    }\n\n    protected get useDefaultSizing(): boolean {\n        return true;\n    }\n\n    protected get allowCustomPadding(): boolean {\n        return true;\n    }\n\n    protected get separatorOrientation(): Enums.Orientation {\n        return Enums.Orientation.Horizontal;\n    }\n\n    protected get defaultStyle(): string {\n        return Enums.ContainerStyle.Default;\n    }\n\n    customCssSelector?: string;\n\n    parse(source: any, context?: SerializationContext) {\n        super.parse(source, context ? context : new SerializationContext());\n    }\n\n    toJSON(context?: SerializationContext): PropertyBag | undefined {\n        return super.toJSON(context ? context : new SerializationContext());\n    }\n\n    asString(): string | undefined {\n        return \"\";\n    }\n\n    isBleeding(): boolean {\n        return false;\n    }\n\n    getEffectiveStyle(): string {\n        if (this.parent) {\n            return this.parent.getEffectiveStyle();\n        }\n\n        return this.defaultStyle;\n    }\n\n    getEffectiveStyleDefinition(): ContainerStyleDefinition {\n        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());\n    }\n\n    getForbiddenActionTypes(): ActionType[] {\n        return [];\n    }\n\n    getImmediateSurroundingPadding(\n        result: PaddingDefinition,\n        processTop: boolean = true,\n        processRight: boolean = true,\n        processBottom: boolean = true,\n        processLeft: boolean = true) {\n        if (this.parent) {\n            let doProcessTop = processTop && this.parent.isTopElement(this);\n            let doProcessRight = processRight && this.parent.isRightMostElement(this);\n            let doProcessBottom = processBottom && this.parent.isBottomElement(this);\n            let doProcessLeft = processLeft && this.parent.isLeftMostElement(this);\n\n            let effectivePadding = this.parent.getEffectivePadding();\n\n            if (effectivePadding) {\n                if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {\n                    result.top = effectivePadding.top;\n\n                    doProcessTop = false;\n                }\n\n                if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {\n                    result.right = effectivePadding.right;\n\n                    doProcessRight = false;\n                }\n\n                if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {\n                    result.bottom = effectivePadding.bottom;\n\n                    doProcessBottom = false;\n                }\n\n                if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {\n                    result.left = effectivePadding.left;\n\n                    doProcessLeft = false;\n                }\n            }\n\n            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {\n                this.parent.getImmediateSurroundingPadding(\n                    result,\n                    doProcessTop,\n                    doProcessRight,\n                    doProcessBottom,\n                    doProcessLeft);\n            }\n        }\n    }\n\n    getActionCount(): number {\n        return 0;\n    }\n\n    getActionAt(index: number): Action | undefined {\n        throw new Error(Strings.errors.indexOutOfRange(index));\n    }\n\n    remove(): boolean {\n        if (this.parent && this.parent instanceof CardElementContainer) {\n            return this.parent.removeItem(this);\n        }\n\n        return false;\n    }\n\n    render(): HTMLElement | undefined {\n        this._renderedElement = this.overrideInternalRender();\n        this._separatorElement = this.internalRenderSeparator();\n\n        if (this._renderedElement) {\n            if (this.customCssSelector) {\n                this._renderedElement.classList.add(this.customCssSelector);\n            }\n\n            this._renderedElement.style.boxSizing = \"border-box\";\n            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display ? this._renderedElement.style.display : undefined;\n\n            this.adjustRenderedElementSize(this._renderedElement);\n            this.updateLayout(false);\n        }\n        else if (this.isDesignMode()) {\n            this._renderedElement = this.createPlaceholderElement();\n        }\n\n        return this._renderedElement;\n    }\n\n    updateLayout(processChildren: boolean = true) {\n        this.updateRenderedElementVisibility();\n        this.applyPadding();\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return -1;\n    }\n\n    isDesignMode(): boolean {\n        let rootElement = this.getRootElement();\n\n        return rootElement instanceof AdaptiveCard && rootElement.designMode;\n    }\n\n    isFirstElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isLastElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isAtTheVeryLeft(): boolean {\n        return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;\n    }\n\n    isAtTheVeryRight(): boolean {\n        return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;\n    }\n\n    isAtTheVeryTop(): boolean {\n        return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;\n    }\n\n    isAtTheVeryBottom(): boolean {\n        return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;\n    }\n\n    isBleedingAtTop(): boolean {\n        return false;\n    }\n\n    isBleedingAtBottom(): boolean {\n        return false;\n    }\n\n    isLeftMostElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isRightMostElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isTopElement(element: CardElement): boolean {\n        return this.isFirstElement(element);\n    }\n\n    isBottomElement(element: CardElement): boolean {\n        return this.isLastElement(element);\n    }\n\n    isHiddenDueToOverflow(): boolean {\n        return this._renderedElement !== undefined && this._renderedElement.style.visibility == 'hidden';\n    }\n\n    getRootElement(): CardElement {\n        return this.getRootObject() as CardElement;\n    }\n\n    getParentContainer(): Container | undefined {\n        let currentElement = this.parent;\n\n        while (currentElement) {\n            if (currentElement instanceof Container) {\n                return <Container>currentElement;\n            }\n\n            currentElement = currentElement.parent;\n        }\n\n        return undefined;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return [];\n    }\n\n    getElementById(id: string): CardElement | undefined {\n        return this.id === id ? this : undefined;\n    }\n\n    getActionById(id: string): Action | undefined {\n        return undefined;\n    }\n\n    getEffectivePadding(): PaddingDefinition {\n        let padding = this.getPadding();\n\n        return (padding && this.allowCustomPadding) ? padding : this.getDefaultPadding();\n    }\n\n    get hostConfig(): HostConfig {\n        if (this._hostConfig) {\n            return this._hostConfig;\n        }\n        else {\n            if (this.parent) {\n                return this.parent.hostConfig;\n            }\n            else {\n                return defaultHostConfig;\n            }\n        }\n    }\n\n    set hostConfig(value: HostConfig) {\n        this._hostConfig = value;\n    }\n\n    get index(): number {\n        if (this.parent) {\n            return this.parent.indexOf(this);\n        }\n        else {\n            return 0;\n        }\n    }\n\n    get isInteractive(): boolean {\n        return false;\n    }\n\n    get isStandalone(): boolean {\n        return true;\n    }\n\n    get isInline(): boolean {\n        return false;\n    }\n\n    get hasVisibleSeparator(): boolean {\n        if (this.parent && this.separatorElement) {\n            return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());\n        }\n        else {\n            return false;\n        }\n    }\n\n    get separatorElement(): HTMLElement | undefined {\n        return this._separatorElement;\n    }\n\n    get parent(): CardElement | undefined {\n        return <CardElement>this._parent;\n    }\n}\n\nexport class ActionProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: SerializationContext): Action | undefined {\n        let parent = <CardElement>sender;\n\n        return context.parseAction(\n            parent,\n            source[this.name],\n            this.forbiddenActionTypes,\n            parent.isDesignMode());\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: Action | undefined, context: SerializationContext) {\n        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly forbiddenActionTypes: string[] = []) {\n        super(targetVersion, name, undefined);\n    }\n}\n\nexport abstract class BaseTextBlock extends CardElement {\n    //#region Schema\n\n    static readonly textProperty = new StringProperty(\n        Versions.v1_0,\n        \"text\",\n        true);\n    static readonly sizeProperty = new EnumProperty(\n        Versions.v1_0,\n        \"size\",\n        Enums.TextSize,\n        Enums.TextSize.Default);\n    static readonly weightProperty = new EnumProperty(\n        Versions.v1_0,\n        \"weight\",\n        Enums.TextWeight,\n        Enums.TextWeight.Default);\n    static readonly colorProperty = new EnumProperty(\n        Versions.v1_0,\n        \"color\",\n        Enums.TextColor,\n        Enums.TextColor.Default);\n    static readonly isSubtleProperty = new BoolProperty(\n        Versions.v1_0,\n        \"isSubtle\",\n        false);\n    static readonly fontTypeProperty = new EnumProperty(\n        Versions.v1_2,\n        \"fontType\",\n        Enums.FontType);\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_0, \"selectAction\", [ \"Action.ShowCard\" ]);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        // selectAction is declared on BaseTextBlock but is only exposed on TextRun,\n        // so the property is removed from the BaseTextBlock schema.\n        schema.remove(BaseTextBlock.selectActionProperty);\n    }\n\n    @property(BaseTextBlock.sizeProperty)\n    size: Enums.TextSize = Enums.TextSize.Default;\n\n    @property(BaseTextBlock.weightProperty)\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\n\n    @property(BaseTextBlock.colorProperty)\n    color: Enums.TextColor = Enums.TextColor.Default;\n\n    @property(BaseTextBlock.fontTypeProperty)\n    fontType?: Enums.FontType;\n\n    @property(BaseTextBlock.isSubtleProperty)\n    isSubtle: boolean = false;\n\n    @property(BaseTextBlock.textProperty)\n    get text(): string | undefined {\n        return this.getValue(BaseTextBlock.textProperty);\n    }\n\n    set text(value: string | undefined) {\n        this.setText(value);\n    }\n\n    @property(BaseTextBlock.selectActionProperty)\n    selectAction?: Action;\n\n    //#endregion\n\n    protected getFontSize(fontType: FontTypeDefinition): number {\n        switch (this.size) {\n            case Enums.TextSize.Small:\n                return fontType.fontSizes.small;\n            case Enums.TextSize.Medium:\n                return fontType.fontSizes.medium;\n            case Enums.TextSize.Large:\n                return fontType.fontSizes.large;\n            case Enums.TextSize.ExtraLarge:\n                return fontType.fontSizes.extraLarge;\n            default:\n                return fontType.fontSizes.default;\n        }\n    }\n\n    protected getColorDefinition(colorSet: ColorSetDefinition, color: Enums.TextColor): TextColorDefinition {\n        switch (color) {\n            case Enums.TextColor.Accent:\n                return colorSet.accent;\n            case Enums.TextColor.Dark:\n                return colorSet.dark;\n            case Enums.TextColor.Light:\n                return colorSet.light;\n            case Enums.TextColor.Good:\n                return colorSet.good;\n            case Enums.TextColor.Warning:\n                return colorSet.warning;\n            case Enums.TextColor.Attention:\n                return colorSet.attention;\n            default:\n                return colorSet.default;\n        }\n    }\n\n    protected setText(value: string | undefined) {\n        this.setValue(BaseTextBlock.textProperty, value);\n    }\n\n    ariaHidden: boolean = false;\n\n    constructor(text?: string) {\n        super();\n        \n        if (text) {\n            this.text = text;\n        }\n    }\n\n    init(textDefinition: BaseTextDefinition) {\n        this.size = textDefinition.size;\n        this.weight = textDefinition.weight;\n        this.color = textDefinition.color;\n        this.isSubtle = textDefinition.isSubtle;\n    }\n\n    asString(): string | undefined {\n        return this.text;\n    }\n\n    applyStylesTo(targetElement: HTMLElement) {\n        let fontType = this.hostConfig.getFontTypeDefinition(this.fontType);\n\n        if (fontType.fontFamily) {\n            targetElement.style.fontFamily = fontType.fontFamily;\n        }\n\n        let fontSize: number;\n\n        switch (this.size) {\n            case Enums.TextSize.Small:\n                fontSize = fontType.fontSizes.small;\n                break;\n            case Enums.TextSize.Medium:\n                fontSize = fontType.fontSizes.medium;\n                break;\n            case Enums.TextSize.Large:\n                fontSize = fontType.fontSizes.large;\n                break;\n            case Enums.TextSize.ExtraLarge:\n                fontSize = fontType.fontSizes.extraLarge;\n                break;\n            default:\n                fontSize = fontType.fontSizes.default;\n                break;\n        }\n\n        targetElement.style.fontSize = fontSize + \"px\";\n\n        let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\n\n        targetElement.style.color = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.subtle : colorDefinition.default);\n\n        let fontWeight: number;\n\n        switch (this.weight) {\n            case Enums.TextWeight.Lighter:\n                fontWeight = fontType.fontWeights.lighter;\n                break;\n            case Enums.TextWeight.Bolder:\n                fontWeight = fontType.fontWeights.bolder;\n                break;\n            default:\n                fontWeight = fontType.fontWeights.default;\n                break;\n        }\n\n        targetElement.style.fontWeight = fontWeight.toString();\n\n        if (this.ariaHidden) {\n            targetElement.setAttribute(\"aria-hidden\", \"true\");\n        }\n    }\n\n    get effectiveColor(): Enums.TextColor {\n        return this.color ? this.color : Enums.TextColor.Default;\n    }\n}\n\nexport class TextBlock extends BaseTextBlock {\n    //#region Schema\n\n    static readonly wrapProperty = new BoolProperty(Versions.v1_0, \"wrap\", false);\n    static readonly maxLinesProperty = new NumProperty(Versions.v1_0, \"maxLines\");\n\n    @property(TextBlock.wrapProperty)\n    wrap: boolean = false;\n\n    @property(TextBlock.maxLinesProperty)\n    maxLines?: number;\n\n    //#endregion\n\n    private _computedLineHeight: number;\n    private _originalInnerHtml: string;\n    private _processedText?: string;\n    private _treatAsPlainText: boolean = true;\n\n    private restoreOriginalContent() {\n        if (this.renderedElement !== undefined) {\n            if (this.maxLines && this.maxLines > 0) {\n                this.renderedElement.style.maxHeight = this._computedLineHeight * this.maxLines + \"px\";\n            }\n\n            this.renderedElement.innerHTML = this._originalInnerHtml;\n        }\n    }\n\n    private truncateIfSupported(maxHeight: number): boolean {\n        if (this.renderedElement !== undefined) {\n            // For now, only truncate TextBlocks that contain just a single\n            // paragraph -- since the maxLines calculation doesn't take into\n            // account Markdown lists\n            let children = this.renderedElement.children;\n            let isTextOnly = !children.length;\n            let truncationSupported = isTextOnly || children.length == 1 && (<HTMLElement>children[0]).tagName.toLowerCase() == 'p';\n\n            if (truncationSupported) {\n                let element = isTextOnly ? this.renderedElement : <HTMLElement>children[0];\n\n                Utils.truncate(element, maxHeight, this._computedLineHeight);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    protected setText(value: string) {\n        super.setText(value);\n\n        this._processedText = undefined;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._processedText = undefined;\n\n        if (this.text) {\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\n            let hostConfig = this.hostConfig;\n\n            let element: HTMLElement;\n            \n            if (this.forElementId) {\n                let labelElement = document.createElement(\"label\");\n                labelElement.htmlFor = this.forElementId;\n\n                element = labelElement;\n            }\n            else {\n                element = document.createElement(\"div\");\n            }\n\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textBlock\"));\n            element.style.overflow = \"hidden\";\n\n            this.applyStylesTo(element);\n\n            if (this.selectAction) {\n                element.onclick = (e) => {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    if (this.selectAction) {\n                        this.selectAction.execute();\n                    }\n                }\n\n                if (hostConfig.supportsInteractivity) {\n                    element.tabIndex = 0\n                    element.setAttribute(\"role\", this.selectAction.getAriaRole());\n\n                    if (this.selectAction.title) {\n                        element.setAttribute(\"aria-label\", this.selectAction.title);\n                    }\n\n                    element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n                }\n            }\n\n            if (!this._processedText) {\n                this._treatAsPlainText = true;\n\n                let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\n\n                if (this.useMarkdown && formattedText) {\n                    if (GlobalSettings.allowMarkForTextHighlighting) {\n                        formattedText = formattedText.replace(/<mark>/g, \"===\").replace(/<\\/mark>/g, \"/==/\");\n                    }\n\n                    let markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);\n\n                    if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {\n                        this._processedText = markdownProcessingResult.outputHtml;\n                        this._treatAsPlainText = false;\n\n                        // Only process <mark> tag if markdown processing was applied because\n                        // markdown processing is also responsible for sanitizing the input string\n                        if (GlobalSettings.allowMarkForTextHighlighting && this._processedText) {\n                            let markStyle: string = \"\";\n                            let effectiveStyle = this.getEffectiveStyleDefinition();\n\n                            if (effectiveStyle.highlightBackgroundColor) {\n                                markStyle += \"background-color: \" + effectiveStyle.highlightBackgroundColor + \";\";\n                            }\n\n                            if (effectiveStyle.highlightForegroundColor) {\n                                markStyle += \"color: \" + effectiveStyle.highlightForegroundColor + \";\";\n                            }\n\n                            if (markStyle) {\n                                markStyle = 'style=\"' + markStyle + '\"';\n                            }\n\n                            this._processedText = this._processedText.replace(/===/g, \"<mark \" + markStyle + \">\").replace(/\\/==\\//g, \"</mark>\");\n                        }\n                    } else {\n                        this._processedText = formattedText;\n                        this._treatAsPlainText = true;\n                    }\n                }\n                else {\n                    this._processedText = formattedText;\n                    this._treatAsPlainText = true;\n                }\n            }\n\n            if (!this._processedText) {\n                this._processedText = \"\";\n            }\n\n            if (this._treatAsPlainText) {\n                element.innerText = this._processedText;\n            }\n            else {\n                element.innerHTML = this._processedText;\n            }\n\n            if (element.firstElementChild instanceof HTMLElement) {\n                let firstElementChild = <HTMLElement>element.firstElementChild;\n                firstElementChild.style.marginTop = \"0px\";\n                firstElementChild.style.width = \"100%\";\n\n                if (!this.wrap) {\n                    firstElementChild.style.overflow = \"hidden\";\n                    firstElementChild.style.textOverflow = \"ellipsis\";\n                }\n            }\n\n            if (element.lastElementChild instanceof HTMLElement) {\n                (<HTMLElement>element.lastElementChild).style.marginBottom = \"0px\";\n            }\n\n            let anchors = element.getElementsByTagName(\"a\");\n\n            for (let i = 0; i < anchors.length; i++) {\n                let anchor = <HTMLAnchorElement>anchors[i];\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\n                anchor.target = \"_blank\";\n                anchor.onclick = (e) => {\n                    if (raiseAnchorClickedEvent(this, e.target as HTMLAnchorElement)) {\n                        e.preventDefault();\n                        e.cancelBubble = true;\n                    }\n                }\n            }\n\n            if (this.wrap) {\n                element.style.wordWrap = \"break-word\";\n\n                if (this.maxLines && this.maxLines > 0) {\n                    element.style.maxHeight = (this._computedLineHeight * this.maxLines) + \"px\";\n                    element.style.overflow = \"hidden\";\n                }\n            }\n            else {\n                element.style.whiteSpace = \"nowrap\";\n                element.style.textOverflow = \"ellipsis\";\n            }\n\n            if (GlobalSettings.useAdvancedTextBlockTruncation || GlobalSettings.useAdvancedCardBottomTruncation) {\n                this._originalInnerHtml = element.innerHTML;\n            }\n\n            return element;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    protected truncateOverflow(maxHeight: number): boolean {\n        if (maxHeight >= this._computedLineHeight) {\n            return this.truncateIfSupported(maxHeight);\n        }\n\n        return false;\n    }\n\n    protected undoOverflowTruncation() {\n        this.restoreOriginalContent();\n\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines) {\n            let maxHeight = this._computedLineHeight * this.maxLines;\n\n            this.truncateIfSupported(maxHeight);\n        }\n    }\n\n    useMarkdown: boolean = true;\n    forElementId?: string;\n\n    applyStylesTo(targetElement: HTMLElement) {\n        super.applyStylesTo(targetElement);\n\n        let parentContainer = this.getParentContainer();\n        let isRtl = parentContainer ? parentContainer.isRtl() : false;\n\n        switch (this.horizontalAlignment) {\n            case Enums.HorizontalAlignment.Center:\n                targetElement.style.textAlign = \"center\";\n                break;\n            case Enums.HorizontalAlignment.Right:\n                targetElement.style.textAlign = isRtl ? \"left\" : \"right\";\n                break;\n            default:\n                targetElement.style.textAlign = isRtl ? \"right\" : \"left\";\n                break;\n        }\n\n        let lineHeights = this.hostConfig.lineHeights;\n\n        if (lineHeights) {\n            switch (this.size) {\n                case Enums.TextSize.Small:\n                    this._computedLineHeight = lineHeights.small;\n                    break;\n                case Enums.TextSize.Medium:\n                    this._computedLineHeight = lineHeights.medium;\n                    break;\n                case Enums.TextSize.Large:\n                    this._computedLineHeight = lineHeights.large;\n                    break;\n                case Enums.TextSize.ExtraLarge:\n                    this._computedLineHeight = lineHeights.extraLarge;\n                    break;\n                default:\n                    this._computedLineHeight = lineHeights.default;\n                    break;\n            }\n        }\n        else {\n            // Looks like 1.33 is the magic number to compute line-height\n            // from font size.\n            this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.fontType)) * 1.33;\n        }\n\n        targetElement.style.lineHeight = this._computedLineHeight + \"px\";\n    }\n\n    getJsonTypeName(): string {\n        return \"TextBlock\";\n    }\n\n    updateLayout(processChildren: boolean = false) {\n        super.updateLayout(processChildren);\n\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines && this.isDisplayed()) {\n            // Reset the element's innerHTML in case the available room for\n            // content has increased\n            this.restoreOriginalContent();\n            this.truncateIfSupported(this._computedLineHeight * this.maxLines);\n        }\n    }\n}\n\nexport class TextRun extends BaseTextBlock {\n    //#region Schema\n\n    static readonly italicProperty = new BoolProperty(Versions.v1_2, \"italic\", false);\n    static readonly strikethroughProperty = new BoolProperty(Versions.v1_2, \"strikethrough\", false);\n    static readonly highlightProperty = new BoolProperty(Versions.v1_2, \"highlight\", false);\n    static readonly underlineProperty = new BoolProperty(Versions.v1_3, \"underline\", false);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.add(BaseTextBlock.selectActionProperty);\n    }\n\n    @property(TextRun.italicProperty)\n    italic: boolean = false;\n\n    @property(TextRun.strikethroughProperty)\n    strikethrough: boolean = false;\n\n    @property(TextRun.highlightProperty)\n    highlight: boolean = false;\n\n    @property(TextRun.underlineProperty)\n    underline: boolean = false;\n\n    //#endregion\n\n    protected internalRender(): HTMLElement | undefined {\n        if (this.text) {\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\n            let hostConfig = this.hostConfig;\n\n            let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\n\n            if (!formattedText) {\n                formattedText = \"\";\n            }\n\n            let element = document.createElement(\"span\");\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textRun\"));\n\n            this.applyStylesTo(element);\n\n            if (this.selectAction && hostConfig.supportsInteractivity) {\n                let anchor = document.createElement(\"a\");\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\n\n                let href = this.selectAction.getHref();\n\n                anchor.href = href ? href : \"\";\n                anchor.target = \"_blank\";\n                anchor.onclick = (e) => {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    if (this.selectAction) {\n                        this.selectAction.execute();\n                    }\n                }\n\n                anchor.innerText = formattedText;\n\n                element.appendChild(anchor);\n            }\n            else {\n                element.innerText = formattedText;\n            }\n\n            return element;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    applyStylesTo(targetElement: HTMLElement) {\n        super.applyStylesTo(targetElement);\n\n        if (this.italic) {\n            targetElement.style.fontStyle = \"italic\";\n        }\n\n        if (this.strikethrough) {\n            targetElement.style.textDecoration = \"line-through\";\n        }\n\n        if (this.highlight) {\n            let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\n\n            targetElement.style.backgroundColor = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);\n        }\n\n        if (this.underline) {\n            targetElement.style.textDecoration = \"underline\";\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"TextRun\";\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n\n    get isInline(): boolean {\n        return true;\n    }\n}\n\nexport class RichTextBlock extends CardElement {\n    private _inlines: CardElement[] = [];\n\n    private internalAddInline(inline: CardElement, forceAdd: boolean = false) {\n        if (!inline.isInline) {\n            throw new Error(Strings.errors.elementCannotBeUsedAsInline());\n        }\n\n        let doAdd: boolean = inline.parent === undefined || forceAdd;\n\n        if (!doAdd && inline.parent != this) {\n            throw new Error(Strings.errors.inlineAlreadyParented());\n        }\n        else {\n            inline.setParent(this);\n\n            this._inlines.push(inline);\n        }\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._inlines = [];\n\n        if (Array.isArray(source[\"inlines\"])) {\n            for (let jsonInline of source[\"inlines\"]) {\n                let inline: CardElement | undefined;\n\n                if (typeof jsonInline === \"string\") {\n                    let textRun = new TextRun();\n                    textRun.text = jsonInline;\n\n                    inline = textRun;\n                }\n                else {\n                    // No fallback for inlines in 1.2\n                    inline = context.parseElement(this, jsonInline, false);\n                }\n\n                if (inline) {\n                    this.internalAddInline(inline, true);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        if (this._inlines.length > 0) {\n            let jsonInlines: any[] = [];\n\n            for (let inline of this._inlines) {\n                jsonInlines.push(inline.toJSON(context));\n            }\n\n            context.serializeValue(target, \"inlines\", jsonInlines);\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        if (this._inlines.length > 0) {\n            let element: HTMLElement;\n\n            if (this.forElementId) {\n                let labelElement = document.createElement(\"label\");\n                labelElement.htmlFor = this.forElementId;\n\n                element = labelElement;\n            }\n            else {\n                element = document.createElement(\"div\");\n            }\n\n            element.className = this.hostConfig.makeCssClassName(\"ac-richTextBlock\");\n\n            let parentContainer = this.getParentContainer();\n            let isRtl = parentContainer ? parentContainer.isRtl() : false;\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.style.textAlign = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.style.textAlign = isRtl ? \"left\" : \"right\";\n                    break;\n                default:\n                    element.style.textAlign = isRtl ? \"right\" : \"left\";\n                    break;\n            }\n\n            let renderedInlines: number = 0;\n\n            for (let inline of this._inlines) {\n                let renderedInline = inline.render();\n\n                if (renderedInline) {\n                    element.appendChild(renderedInline);\n\n                    renderedInlines++;\n                }\n            }\n\n            if (renderedInlines > 0) {\n                return element;\n            }\n        }\n\n        return undefined;\n    }\n\n    forElementId?: string;\n\n    asString(): string | undefined {\n        let result = \"\";\n\n        for (let inline of this._inlines) {\n            result += inline.asString();\n        }\n\n        return result;\n    }\n\n    getJsonTypeName(): string {\n        return \"RichTextBlock\";\n    }\n\n    getInlineCount(): number {\n        return this._inlines.length;\n    }\n\n    getInlineAt(index: number): CardElement {\n        if (index >= 0 && index < this._inlines.length) {\n            return this._inlines[index];\n        }\n        else {\n            throw new Error(Strings.errors.indexOutOfRange(index));\n        }\n    }\n\n    addInline(inline: CardElement | string) {\n        if (typeof inline === \"string\") {\n            this.internalAddInline(new TextRun(inline));\n        }\n        else {\n            this.internalAddInline(inline);\n        }\n    }\n\n    removeInline(inline: CardElement): boolean {\n        let index = this._inlines.indexOf(inline);\n\n        if (index >= 0) {\n            this._inlines[index].setParent(undefined);\n            this._inlines.splice(index, 1);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport class Fact extends SerializableObject {\n    //#region Schema\n\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n\n    // For historic reasons, the \"title\" schema property is exposed as \"name\" in the OM.\n    @property(Fact.titleProperty)\n    name?: string;\n\n    @property(Fact.valueProperty)\n    value?: string;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"Fact\";\n    }\n\n    constructor(name?: string, value?: string) {\n        super();\n\n        this.name = name;\n        this.value = value;\n    }\n}\n\nexport class FactSet extends CardElement {\n    //#region Schema\n\n    static readonly factsProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"facts\", Fact);\n\n    @property(FactSet.factsProperty)\n    facts: Fact[];\n\n    //#endregion\n\n    protected get useDefaultSizing(): boolean {\n        return false;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element: HTMLElement | undefined = undefined;\n        let hostConfig = this.hostConfig;\n\n        if (this.facts.length > 0) {\n            element = document.createElement(\"table\");\n            element.style.borderWidth = \"0px\";\n            element.style.borderSpacing = \"0px\";\n            element.style.borderStyle = \"none\";\n            element.style.borderCollapse = \"collapse\";\n            element.style.display = \"block\";\n            element.style.overflow = \"hidden\";\n            element.classList.add(hostConfig.makeCssClassName(\"ac-factset\"));\n            element.setAttribute(\"role\", \"presentation\");\n\n            for (let i = 0; i < this.facts.length; i++) {\n                let trElement = document.createElement(\"tr\");\n\n                if (i > 0) {\n                    trElement.style.marginTop = hostConfig.factSet.spacing + \"px\";\n                }\n\n                // Title column\n                let tdElement = document.createElement(\"td\");\n                tdElement.style.padding = \"0\";\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-title\"));\n\n                if (hostConfig.factSet.title.maxWidth) {\n                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + \"px\";\n                }\n\n                tdElement.style.verticalAlign = \"top\";\n\n                let textBlock = new TextBlock();\n                textBlock.setParent(this);\n                textBlock.text = (!this.facts[i].name && this.isDesignMode()) ? \"Title\" : this.facts[i].name;\n                textBlock.size = hostConfig.factSet.title.size;\n                textBlock.color = hostConfig.factSet.title.color;\n                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;\n                textBlock.weight = hostConfig.factSet.title.weight;\n                textBlock.wrap = hostConfig.factSet.title.wrap;\n                textBlock.spacing = Enums.Spacing.None;\n\n                Utils.appendChild(tdElement, textBlock.render());\n                Utils.appendChild(trElement, tdElement);\n\n                // Spacer column\n                tdElement = document.createElement(\"td\");\n                tdElement.style.width = \"10px\";\n\n                Utils.appendChild(trElement, tdElement);\n\n                // Value column\n                tdElement = document.createElement(\"td\");\n                tdElement.style.padding = \"0\";\n                tdElement.style.verticalAlign = \"top\";\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-value\"));\n\n                textBlock = new TextBlock();\n                textBlock.setParent(this);\n                textBlock.text = this.facts[i].value;\n                textBlock.size = hostConfig.factSet.value.size;\n                textBlock.color = hostConfig.factSet.value.color;\n                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;\n                textBlock.weight = hostConfig.factSet.value.weight;\n                textBlock.wrap = hostConfig.factSet.value.wrap;\n                textBlock.spacing = Enums.Spacing.None;\n\n                Utils.appendChild(tdElement, textBlock.render());\n                Utils.appendChild(trElement, tdElement);\n                Utils.appendChild(element, trElement);\n            }\n        }\n\n        return element;\n    }\n\n    getJsonTypeName(): string {\n        return \"FactSet\";\n    }\n}\n\nclass ImageDimensionProperty extends PropertyDefinition {\n    getInternalName(): string {\n        return this.internalName;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let result: number | undefined = undefined;\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n\n        let isValid = false;\n\n        if (typeof sourceValue === \"string\") {\n            try {\n                let size = SizeAndUnit.parse(sourceValue, true);\n\n                if (size.unit == Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n\n                    isValid = true;\n                }\n            }\n            catch {\n                // Do nothing. A parse error is emitted below\n            }\n        }\n\n        if (!isValid) {\n            context.logParseEvent(\n                sender,\n                Enums.ValidationEvent.InvalidPropertyValue,\n                Strings.errors.invalidPropertyValue(sourceValue, this.name));\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly internalName: string) {\n        super(targetVersion, name);\n    }\n}\n\nexport class Image extends CardElement {\n    //#region Schema\n\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\n    static readonly altTextProperty = new StringProperty(Versions.v1_0, \"altText\");\n    static readonly backgroundColorProperty = new StringProperty(Versions.v1_1, \"backgroundColor\");\n    static readonly styleProperty = new EnumProperty(\n        Versions.v1_0,\n        \"style\",\n        Enums.ImageStyle,\n        Enums.ImageStyle.Default);\n    static readonly sizeProperty = new EnumProperty(\n        Versions.v1_0,\n        \"size\",\n        Enums.Size,\n        Enums.Size.Auto);\n    static readonly pixelWidthProperty = new ImageDimensionProperty(Versions.v1_1, \"width\", \"pixelWidth\");\n    static readonly pixelHeightProperty = new ImageDimensionProperty(Versions.v1_1, \"height\", \"pixelHeight\");\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_0, \"selectAction\", [ \"Action.ShowCard\" ]);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.remove(CardElement.heightProperty);\n    }\n\n    @property(Image.urlProperty)\n    url?: string;\n\n    @property(Image.altTextProperty)\n    altText?: string;\n\n    @property(Image.backgroundColorProperty)\n    backgroundColor?: string;\n\n    @property(Image.sizeProperty)\n    size: Enums.Size = Enums.Size.Auto;\n\n    @property(Image.styleProperty)\n    style: Enums.ImageStyle = Enums.ImageStyle.Default;\n\n    @property(Image.pixelWidthProperty)\n    pixelWidth?: number;\n\n    @property(Image.pixelHeightProperty)\n    pixelHeight?: number;\n\n    @property(Image.selectActionProperty)\n    selectAction?: Action;\n\n    //#endregion\n\n    private applySize(element: HTMLElement) {\n        if (this.pixelWidth || this.pixelHeight) {\n            if (this.pixelWidth) {\n                element.style.width = this.pixelWidth + \"px\";\n            }\n\n            if (this.pixelHeight) {\n                element.style.height = this.pixelHeight + \"px\";\n            }\n        }\n        else {\n            if (this.maxHeight) {\n                // If the image is constrained in height, we set its height property and\n                // auto and stretch are ignored (default to medium). THis is necessary for\n                // ImageSet which uses a maximum image height as opposed to the cards width\n                // as a constraining dimension\n                switch (this.size) {\n                    case Enums.Size.Small:\n                        element.style.height = this.hostConfig.imageSizes.small + \"px\";\n                        break;\n                    case Enums.Size.Large:\n                        element.style.height = this.hostConfig.imageSizes.large + \"px\";\n                        break;\n                    default:\n                        element.style.height = this.hostConfig.imageSizes.medium + \"px\";\n                        break;\n                }\n\n                element.style.maxHeight = this.maxHeight + \"px\";\n            }\n            else {\n                switch (this.size) {\n                    case Enums.Size.Stretch:\n                        element.style.width = \"100%\";\n                        break;\n                    case Enums.Size.Auto:\n                        element.style.maxWidth = \"100%\";\n                        break;\n                    case Enums.Size.Small:\n                        element.style.width = this.hostConfig.imageSizes.small + \"px\";\n                        break;\n                    case Enums.Size.Large:\n                        element.style.width = this.hostConfig.imageSizes.large + \"px\";\n                        break;\n                    case Enums.Size.Medium:\n                        element.style.width = this.hostConfig.imageSizes.medium + \"px\";\n                        break;\n                }\n\n                element.style.maxHeight = \"100%\";\n            }\n        }\n    }\n\n    protected get useDefaultSizing() {\n        return false;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element: HTMLElement | undefined = undefined;\n\n        if (this.url) {\n            element = document.createElement(\"div\");\n            element.style.display = \"flex\";\n            element.style.alignItems = \"flex-start\";\n\n            element.onkeypress = (e) => {\n                if (this.selectAction && (e.keyCode == 13 || e.keyCode == 32)) { // enter or space pressed\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    this.selectAction.execute();\n                }\n            }\n\n            element.onclick = (e) => {\n                if (this.selectAction) {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    this.selectAction.execute();\n                }\n            }\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.style.justifyContent = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.style.justifyContent = \"flex-end\";\n                    break;\n                default:\n                    element.style.justifyContent = \"flex-start\";\n                    break;\n            }\n\n            // Cache hostConfig to avoid walking the parent hierarchy multiple times\n            let hostConfig = this.hostConfig;\n\n            let imageElement = document.createElement(\"img\");\n            imageElement.onload = (e: Event) => {\n                raiseImageLoadedEvent(this);\n            }\n            imageElement.onerror = (e: Event) => {\n                if (this.renderedElement) {\n                    let card = this.getRootElement() as AdaptiveCard;\n\n                    this.renderedElement.innerHTML = \"\";\n\n                    if (card && card.designMode) {\n                        let errorElement = document.createElement(\"div\");\n                        errorElement.style.display = \"flex\";\n                        errorElement.style.alignItems = \"center\";\n                        errorElement.style.justifyContent = \"center\";\n                        errorElement.style.backgroundColor = \"#EEEEEE\";\n                        errorElement.style.color = \"black\";\n                        errorElement.innerText = \":-(\";\n                        errorElement.style.padding = \"10px\";\n\n                        this.applySize(errorElement);\n\n                        this.renderedElement.appendChild(errorElement);\n                    }\n                }\n\n                raiseImageLoadedEvent(this);\n            }\n            imageElement.style.minWidth = \"0\";\n            imageElement.classList.add(hostConfig.makeCssClassName(\"ac-image\"));\n\n            if (this.selectAction !== undefined && hostConfig.supportsInteractivity) {\n                imageElement.tabIndex = 0\n                imageElement.setAttribute(\"role\", this.selectAction.getAriaRole());\n\n                if (this.selectAction.title) {\n                    imageElement.setAttribute(\"aria-label\", <string>this.selectAction.title);\n                }\n\n                imageElement.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n            }\n\n            this.applySize(imageElement);\n\n            if (this.style === Enums.ImageStyle.Person) {\n                imageElement.style.borderRadius = \"50%\";\n                imageElement.style.backgroundPosition = \"50% 50%\";\n                imageElement.style.backgroundRepeat = \"no-repeat\";\n            }\n\n            imageElement.style.backgroundColor = <string>Utils.stringToCssColor(this.backgroundColor);\n            imageElement.src = <string>this.preProcessPropertyValue(Image.urlProperty);\n\n            const altTextProperty = this.preProcessPropertyValue(Image.altTextProperty);\n            if (altTextProperty) {\n                imageElement.alt = <string>altTextProperty;\n            }\n\n            element.appendChild(imageElement);\n        }\n\n        return element;\n    }\n\n    maxHeight?: number;\n\n    getJsonTypeName(): string {\n        return \"Image\";\n    }\n\n    getActionById(id: string) {\n        let result = super.getActionById(id);\n\n        if (!result && this.selectAction) {\n            result = this.selectAction.getActionById(id);\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return this.url ? [{ url: this.url, mimeType: \"image\" }] : [];\n    }\n}\n\nexport abstract class CardElementContainer extends CardElement {\n    //#region Schema\n\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_0, \"selectAction\", [ \"Action.ShowCard\" ]);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        if (!this.isSelectable) {\n            schema.remove(CardElementContainer.selectActionProperty);\n        }\n    }\n\n    @property(CardElementContainer.selectActionProperty)\n    protected _selectAction?: Action;\n\n    //#endregion\n\n    protected isElementAllowed(element: CardElement) {\n        return this.hostConfig.supportsInteractivity || !element.isInteractive;\n    }\n\n    protected applyPadding() {\n        super.applyPadding();\n\n        if (!this.renderedElement) {\n            return;\n        }\n\n        let physicalPadding = new SpacingDefinition();\n\n        if (this.getEffectivePadding()) {\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\n        }\n\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\n\n        this.renderedElement.style.marginRight = \"0\";\n        this.renderedElement.style.marginLeft = \"0\";\n    }\n\n    protected get isSelectable(): boolean {\n        return false;\n    }\n\n    abstract getItemCount(): number;\n    abstract getItemAt(index: number): CardElement;\n    abstract getFirstVisibleRenderedItem(): CardElement | undefined;\n    abstract getLastVisibleRenderedItem(): CardElement | undefined;\n    abstract removeItem(item: CardElement): boolean;\n\n    allowVerticalOverflow: boolean = false;\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            let item = this.getItemAt(i);\n\n            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.InteractivityNotAllowed,\n                    Strings.errors.interactivityNotAllowed());\n            }\n\n            if (!this.isElementAllowed(item)) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.InteractivityNotAllowed,\n                    Strings.errors.elementTypeNotAllowed(item.getJsonTypeName()));\n            }\n\n            item.internalValidateProperties(context);\n        }\n\n        if (this._selectAction) {\n            this._selectAction.internalValidateProperties(context);\n        }\n    }\n\n    render(): HTMLElement | undefined {\n        let element = super.render();\n\n        if (element) {\n            let hostConfig = this.hostConfig;\n\n            if (this.allowVerticalOverflow) {\n                element.style.overflowX = \"hidden\";\n                element.style.overflowY = \"auto\";\n            }\n\n            if (element && this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {\n                element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n                element.tabIndex = 0;\n                element.setAttribute(\"role\", this._selectAction.getAriaRole());\n\n                if (this._selectAction.title) {\n                    element.setAttribute(\"aria-label\", this._selectAction.title);\n                }\n\n                element.onclick = (e) => {\n                    if (this._selectAction !== undefined) {\n                        e.preventDefault();\n                        e.cancelBubble = true;\n\n                        this._selectAction.execute();\n                    }\n                }\n\n                element.onkeypress = (e) => {\n                    if (this._selectAction !== undefined && (e.keyCode == 13 || e.keyCode == 32)) {\n                        // Enter or space pressed\n                        e.preventDefault();\n                        e.cancelBubble = true;\n\n                        this._selectAction.execute();\n                    }\n                }\n            }\n        }\n\n        return element;\n    }\n\n    updateLayout(processChildren: boolean = true) {\n        super.updateLayout(processChildren);\n\n        if (processChildren) {\n            for (let i = 0; i < this.getItemCount(); i++) {\n                this.getItemAt(i).updateLayout();\n            }\n        }\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        let result: Input[] = [];\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            result = result.concat(this.getItemAt(i).getAllInputs(processActions));\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result: IResourceInformation[] = [];\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            result = result.concat(this.getItemAt(i).getResourceInformation());\n        }\n\n        return result;\n    }\n\n    getElementById(id: string): CardElement | undefined {\n        let result = super.getElementById(id);\n\n        if (!result) {\n            for (let i = 0; i < this.getItemCount(); i++) {\n                result = this.getItemAt(i).getElementById(id);\n\n                if (result) {\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\nexport class ImageSet extends CardElementContainer {\n    //#region Schema\n\n    static readonly imagesProperty = new SerializableObjectCollectionProperty(\n        Versions.v1_0,\n        \"images\",\n        Image,\n        (sender: SerializableObject, item: Image) => { item.setParent(<CardElement>sender); });\n    static readonly imageSizeProperty = new EnumProperty(\n        Versions.v1_0,\n        \"imageSize\",\n        Enums.ImageSize,\n        Enums.ImageSize.Medium);\n\n    @property(ImageSet.imagesProperty)\n    private _images: Image[] = [];\n\n    @property(ImageSet.imageSizeProperty)\n    imageSize: Enums.ImageSize = Enums.ImageSize.Medium;\n\n    //#endregion\n\n    protected internalRender(): HTMLElement | undefined {\n        let element: HTMLElement | undefined = undefined;\n\n        if (this._images.length > 0) {\n            element = document.createElement(\"div\");\n            element.style.display = \"flex\";\n            element.style.flexWrap = \"wrap\";\n\n            for (let image of this._images) {\n                switch (this.imageSize) {\n                    case Enums.ImageSize.Small:\n                        image.size = Enums.Size.Small;\n                        break;\n                    case Enums.ImageSize.Large:\n                        image.size = Enums.Size.Large;\n                        break;\n                    default:\n                        image.size = Enums.Size.Medium;\n                        break;\n                }\n\n                image.maxHeight = this.hostConfig.imageSet.maxImageHeight;\n\n                let renderedImage = image.render();\n\n                if (renderedImage) {\n                    renderedImage.style.display = \"inline-flex\";\n                    renderedImage.style.margin = \"0px\";\n                    renderedImage.style.marginRight = \"10px\";\n\n                    Utils.appendChild(element, renderedImage);\n                }\n            }\n        }\n\n        return element;\n    }\n\n    getItemCount(): number {\n        return this._images.length;\n    }\n\n    getItemAt(index: number): CardElement {\n        return this._images[index];\n    }\n\n    getFirstVisibleRenderedItem(): CardElement | undefined {\n        return this._images && this._images.length > 0 ? this._images[0] : undefined;\n    }\n\n    getLastVisibleRenderedItem(): CardElement | undefined {\n        return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : undefined;\n    }\n\n    removeItem(item: CardElement): boolean {\n        if (item instanceof Image) {\n            let itemIndex = this._images.indexOf(item);\n\n            if (itemIndex >= 0) {\n                this._images.splice(itemIndex, 1);\n\n                item.setParent(undefined);\n\n                this.updateLayout();\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getJsonTypeName(): string {\n        return \"ImageSet\";\n    }\n\n    addImage(image: Image) {\n        if (!image.parent) {\n            this._images.push(image);\n\n            image.setParent(this);\n        }\n        else {\n            throw new Error(\"This image already belongs to another ImageSet\");\n        }\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;\n    }\n}\n\nexport class MediaSource extends SerializableObject {\n    //#region Schema\n\n    static readonly mimeTypeProperty = new StringProperty(Versions.v1_1, \"mimeType\");\n    static readonly urlProperty = new StringProperty(Versions.v1_1, \"url\");\n\n    @property(MediaSource.mimeTypeProperty)\n    mimeType?: string;\n\n    @property(MediaSource.urlProperty)\n    url?: string;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"MediaSource\";\n    }\n\n    constructor(url?: string, mimeType?: string) {\n        super();\n\n        this.url = url;\n        this.mimeType = mimeType;\n    }\n\n    isValid(): boolean {\n        return this.mimeType && this.url ? true : false;\n    }\n\n    render(): HTMLElement | undefined {\n        let result: HTMLSourceElement | undefined = undefined;\n\n        if (this.isValid()) {\n            result = document.createElement(\"source\");\n            result.src = <string>this.url;\n            result.type = <string>this.mimeType;\n        }\n\n        return result;\n    }\n}\n\nexport class Media extends CardElement {\n    //#region Schema\n\n    static readonly sourcesProperty = new SerializableObjectCollectionProperty(Versions.v1_1, \"sources\", MediaSource);\n    static readonly posterProperty = new StringProperty(Versions.v1_1, \"poster\");\n    static readonly altTextProperty = new StringProperty(Versions.v1_1, \"altText\");\n\n    @property(Media.sourcesProperty)\n    sources: MediaSource[] = [];\n\n    @property(Media.posterProperty)\n    poster?: string;\n\n    @property(Media.altTextProperty)\n    altText?: string;\n\n    //#endregion\n\n    static readonly supportedMediaTypes = [\"audio\", \"video\"];\n\n    private _selectedMediaType?: string;\n    private _selectedSources: MediaSource[];\n\n    private getPosterUrl(): string | undefined {\n        return this.poster ? this.poster : this.hostConfig.media.defaultPoster;\n    }\n\n    private processSources() {\n        this._selectedSources = [];\n        this._selectedMediaType = undefined;\n\n        for (let source of this.sources) {\n            let mimeComponents = source.mimeType ? source.mimeType.split('/') : [];\n\n            if (mimeComponents.length == 2) {\n                if (!this._selectedMediaType) {\n                    let index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);\n\n                    if (index >= 0) {\n                        this._selectedMediaType = Media.supportedMediaTypes[index];\n                    }\n                }\n                if (mimeComponents[0] == this._selectedMediaType) {\n                    this._selectedSources.push(source);\n                }\n            }\n        }\n    }\n\n    private renderPoster(): HTMLElement {\n        const playButtonArrowWidth = 12;\n        const playButtonArrowHeight = 15;\n\n        let posterRootElement = document.createElement(\"div\");\n        posterRootElement.className = this.hostConfig.makeCssClassName(\"ac-media-poster\");\n        posterRootElement.setAttribute(\"role\", \"contentinfo\");\n        posterRootElement.setAttribute(\"aria-label\", this.altText ? this.altText : \"Media content\");\n        posterRootElement.style.position = \"relative\";\n        posterRootElement.style.display = \"flex\";\n\n        let posterUrl = this.getPosterUrl();\n\n        if (posterUrl) {\n            let posterImageElement = document.createElement(\"img\");\n            posterImageElement.style.width = \"100%\";\n            posterImageElement.style.height = \"100%\";\n\n            posterImageElement.onerror = (e: Event) => {\n                if (posterImageElement.parentNode) {\n                    posterImageElement.parentNode.removeChild(posterImageElement);\n                }\n\n                posterRootElement.classList.add(\"empty\");\n                posterRootElement.style.minHeight = \"150px\";\n            }\n\n            posterImageElement.src = posterUrl;\n\n            posterRootElement.appendChild(posterImageElement);\n        }\n        else {\n            posterRootElement.classList.add(\"empty\");\n            posterRootElement.style.minHeight = \"150px\";\n        }\n\n        if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {\n            let playButtonOuterElement = document.createElement(\"div\");\n            playButtonOuterElement.tabIndex = 0;\n            playButtonOuterElement.setAttribute(\"role\", \"button\");\n            playButtonOuterElement.setAttribute(\"aria-label\", \"Play media\");\n            playButtonOuterElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton\");\n            playButtonOuterElement.style.display = \"flex\";\n            playButtonOuterElement.style.alignItems = \"center\";\n            playButtonOuterElement.style.justifyContent = \"center\";\n            playButtonOuterElement.onclick = (e) => {\n                if (this.hostConfig.media.allowInlinePlayback) {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    if (this.renderedElement) {\n                        let mediaPlayerElement = this.renderMediaPlayer();\n\n                        this.renderedElement.innerHTML = \"\";\n                        this.renderedElement.appendChild(mediaPlayerElement);\n\n                        mediaPlayerElement.play();\n                    }\n                }\n                else {\n                    if (Media.onPlay) {\n                        e.preventDefault();\n                        e.cancelBubble = true;\n\n                        Media.onPlay(this);\n                    }\n                }\n            }\n\n            let playButtonInnerElement = document.createElement(\"div\");\n            playButtonInnerElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton-arrow\");\n            playButtonInnerElement.style.width = playButtonArrowWidth + \"px\";\n            playButtonInnerElement.style.height = playButtonArrowHeight + \"px\";\n            playButtonInnerElement.style.borderTopWidth = (playButtonArrowHeight / 2) + \"px\";\n            playButtonInnerElement.style.borderBottomWidth = (playButtonArrowHeight / 2) + \"px\";\n            playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + \"px\";\n            playButtonInnerElement.style.borderRightWidth = \"0\";\n            playButtonInnerElement.style.borderStyle = \"solid\";\n            playButtonInnerElement.style.borderTopColor = \"transparent\";\n            playButtonInnerElement.style.borderRightColor = \"transparent\";\n            playButtonInnerElement.style.borderBottomColor = \"transparent\";\n            playButtonInnerElement.style.transform = \"translate(\" + (playButtonArrowWidth / 10) + \"px,0px)\";\n\n            playButtonOuterElement.appendChild(playButtonInnerElement);\n\n            let playButtonContainer = document.createElement(\"div\");\n            playButtonContainer.style.position = \"absolute\";\n            playButtonContainer.style.left = \"0\";\n            playButtonContainer.style.top = \"0\";\n            playButtonContainer.style.width = \"100%\";\n            playButtonContainer.style.height = \"100%\";\n            playButtonContainer.style.display = \"flex\";\n            playButtonContainer.style.justifyContent = \"center\";\n            playButtonContainer.style.alignItems = \"center\";\n\n            playButtonContainer.appendChild(playButtonOuterElement);\n            posterRootElement.appendChild(playButtonContainer);\n        }\n\n        return posterRootElement;\n    }\n\n    private renderMediaPlayer(): HTMLMediaElement {\n        let mediaElement: HTMLMediaElement;\n\n        if (this._selectedMediaType == \"video\") {\n            let videoPlayer = document.createElement(\"video\");\n\n            let posterUrl = this.getPosterUrl();\n\n            if (posterUrl) {\n                videoPlayer.poster = posterUrl;\n            }\n\n            mediaElement = videoPlayer;\n        }\n        else {\n            mediaElement = document.createElement(\"audio\");\n        }\n\n        mediaElement.setAttribute(\"webkit-playsinline\", \"\");\n        mediaElement.setAttribute(\"playsinline\", \"\");\n        mediaElement.autoplay = true;\n        mediaElement.controls = true;\n\n        if (Utils.isMobileOS()) {\n            mediaElement.muted = true;\n        }\n\n        mediaElement.preload = \"none\";\n        mediaElement.style.width = \"100%\";\n\n        for (let source of this.sources) {\n            let renderedSource = source.render();\n\n            Utils.appendChild(mediaElement, renderedSource);\n        }\n\n        return mediaElement;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element = <HTMLElement>document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-media\");\n\n        this.processSources();\n\n        element.appendChild(this.renderPoster());\n\n        return element;\n    }\n\n    static onPlay?: (sender: Media) => void;\n\n    getJsonTypeName(): string {\n        return \"Media\";\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result: IResourceInformation[] = [];\n\n        let posterUrl = this.getPosterUrl();\n\n        if (posterUrl) {\n            result.push({ url: posterUrl, mimeType: \"image\" });\n        }\n\n        for (let mediaSource of this.sources) {\n            if (mediaSource.isValid()) {\n                result.push(\n                    {\n                        url: <string>mediaSource.url,\n                        mimeType: <string>mediaSource.mimeType\n                    }\n                );\n            }\n        }\n\n        return result;\n    }\n\n    get selectedMediaType(): string | undefined {\n        return this._selectedMediaType;\n    }\n}\n\nexport abstract class Input extends CardElement implements IInput {\n    //#region Schema\n\n    static readonly labelProperty = new StringProperty(Versions.v1_3, \"label\", true);\n    static readonly isRequiredProperty = new BoolProperty(Versions.v1_3, \"isRequired\", false);\n    static readonly errorMessageProperty = new StringProperty(Versions.v1_3, \"errorMessage\", true);\n\n    @property(Input.labelProperty)\n    label?: string;\n\n    @property(Input.isRequiredProperty)\n    isRequired: boolean;\n\n    @property(Input.errorMessageProperty)\n    errorMessage?: string;\n\n    //#endregion\n\n    private _outerContainerElement: HTMLElement;\n    private _inputControlContainerElement: HTMLElement;\n    private _renderedErrorMessageElement?: HTMLElement;\n    private _renderedLabelElement?: HTMLElement;\n    private _renderedInputControlElement?: HTMLElement;\n\n    protected getAllLabelIds(): string[] {\n        let labelIds: string[] = [];\n\n        if (this._renderedLabelElement) {\n            labelIds.push(this._renderedLabelElement.id);\n        }\n\n        if (this._renderedErrorMessageElement) {\n            labelIds.push(this._renderedErrorMessageElement.id);\n        }\n\n        return labelIds;\n    }\n\n    protected updateInputControlAriaLabelledBy() {\n        if (this._renderedInputControlElement) {\n            let labelIds: string[] = this.getAllLabelIds();\n\n            if (this._renderedLabelElement) {\n                labelIds.push(this._renderedLabelElement.id);\n            }\n\n            if (this._renderedErrorMessageElement) {\n                labelIds.push(this._renderedErrorMessageElement.id);\n            }\n\n            if (labelIds.length > 0) {\n                this._renderedInputControlElement.setAttribute(\"aria-labelledby\", labelIds.join(\" \"));\n            }\n            else {\n                this._renderedInputControlElement.removeAttribute(\"aria-labelledby\");\n            }\n        }\n    }\n\n    protected get isNullable(): boolean {\n        return true;\n    }\n\n    protected get renderedInputControlElement(): HTMLElement | undefined {\n        return this._renderedInputControlElement;\n    }\n\n    protected get inputControlContainerElement(): HTMLElement {\n        return this._inputControlContainerElement;\n    }\n\n    protected overrideInternalRender(): HTMLElement | undefined {\n        let hostConfig = this.hostConfig;\n\n        this._outerContainerElement = document.createElement(\"div\");\n        this._outerContainerElement.style.display = \"flex\";\n        this._outerContainerElement.style.flexDirection = \"column\";\n\n        let renderedInputControlId = Utils.generateUniqueId();\n\n        if (this.label) {\n            let labelRichTextBlock = new RichTextBlock();\n            labelRichTextBlock.setParent(this);\n            labelRichTextBlock.forElementId = renderedInputControlId;\n\n            let labelInline = new TextRun(this.label);\n            labelRichTextBlock.addInline(labelInline);\n\n            if (this.isRequired) {\n                labelInline.init(hostConfig.inputs.label.requiredInputs);\n\n                let isRequiredCueInline = new TextRun(hostConfig.inputs.label.requiredInputs.suffix);\n                isRequiredCueInline.color = hostConfig.inputs.label.requiredInputs.suffixColor;\n                isRequiredCueInline.ariaHidden = true;\n\n                labelRichTextBlock.addInline(isRequiredCueInline);\n            }\n            else {\n                labelInline.init(hostConfig.inputs.label.optionalInputs);\n            }\n\n            this._renderedLabelElement = labelRichTextBlock.render();\n\n            if (this._renderedLabelElement) {\n                this._renderedLabelElement.id = Utils.generateUniqueId();\n                this._renderedLabelElement.style.marginBottom = hostConfig.getEffectiveSpacing(hostConfig.inputs.label.inputSpacing) + \"px\";\n\n                this._outerContainerElement.appendChild(this._renderedLabelElement);\n            }\n        }\n\n        this._inputControlContainerElement = document.createElement(\"div\");\n        this._inputControlContainerElement.className = hostConfig.makeCssClassName(\"ac-input-container\");\n        this._inputControlContainerElement.style.display = \"flex\";\n\n        this._renderedInputControlElement = this.internalRender();\n\n        if (this._renderedInputControlElement) {\n            this._renderedInputControlElement.id = renderedInputControlId;\n            this._renderedInputControlElement.style.minWidth = \"0px\";\n\n            if (this.isNullable && this.isRequired) {\n                this._renderedInputControlElement.setAttribute(\"aria-required\", \"true\");\n                this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName(\"ac-input-required\"));\n            }\n\n            this._inputControlContainerElement.appendChild(this._renderedInputControlElement);\n            this._outerContainerElement.appendChild(this._inputControlContainerElement);\n\n            this.updateInputControlAriaLabelledBy();\n\n            return this._outerContainerElement;\n        }\n\n        return undefined;\n    }\n\n    protected valueChanged() {\n        if (this.isValid()) {\n            this.resetValidationFailureCue();\n        }\n\n        if (this.onValueChanged) {\n            this.onValueChanged(this);\n        }\n\n        raiseInputValueChangedEvent(this);\n    }\n\n    protected resetValidationFailureCue() {\n        if (this.renderedInputControlElement) {\n            this.renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\n\n            this.updateInputControlAriaLabelledBy();\n\n            if (this._renderedErrorMessageElement) {\n                this._outerContainerElement.removeChild(this._renderedErrorMessageElement);\n\n                this._renderedErrorMessageElement = undefined;\n            }\n        }\n    }\n\n    protected showValidationErrorMessage() {\n        if (this.renderedElement && this.errorMessage && GlobalSettings.displayInputValidationErrors) {\n            let errorMessageTextBlock = new TextBlock();\n            errorMessageTextBlock.setParent(this);\n            errorMessageTextBlock.text = this.errorMessage;\n            errorMessageTextBlock.wrap = true;\n            errorMessageTextBlock.init(this.hostConfig.inputs.errorMessage);\n\n            this._renderedErrorMessageElement = errorMessageTextBlock.render();\n\n            if (this._renderedErrorMessageElement) {\n                this._renderedErrorMessageElement.id = Utils.generateUniqueId();\n                this._outerContainerElement.appendChild(this._renderedErrorMessageElement);\n\n                this.updateInputControlAriaLabelledBy();\n            }\n        }\n    }\n\n    onValueChanged: (sender: Input) => void;\n\n    abstract isSet(): boolean;\n\n    focus() {\n        if (this._renderedInputControlElement) {\n            this._renderedInputControlElement.focus();\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.id) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.inputsMustHaveUniqueId());\n        }\n\n        if (this.isRequired) {\n            if (!this.label) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.RequiredInputsShouldHaveLabel,\n                    \"Required inputs should have a label\");\n            }\n\n            if (!this.errorMessage) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.RequiredInputsShouldHaveErrorMessage,\n                    \"Required inputs should have an error message\");\n            }\n        }\n    }\n\n    validateValue(): boolean {\n        this.resetValidationFailureCue();\n\n        let result = this.isRequired ? this.isSet() && this.isValid() : this.isValid();\n\n        if (!result && this.renderedInputControlElement) {\n            this.renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\n\n            this.showValidationErrorMessage();\n        }\n\n        return result;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return [ this ];\n    }\n\n    abstract get value(): any;\n\n    get isInteractive(): boolean {\n        return true;\n    }\n}\n\nexport class TextInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly maxLengthProperty = new NumProperty(Versions.v1_0, \"maxLength\");\n    static readonly isMultilineProperty = new BoolProperty(Versions.v1_0, \"isMultiline\", false);\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly styleProperty = new EnumProperty(Versions.v1_0, \"style\", Enums.InputTextStyle, Enums.InputTextStyle.Text);\n    static readonly inlineActionProperty = new ActionProperty(Versions.v1_0, \"inlineAction\", [ \"Action.ShowCard\" ]);\n    static readonly regexProperty = new StringProperty(Versions.v1_3, \"regex\", true);\n\n    @property(TextInput.valueProperty)\n    defaultValue?: string;\n\n    @property(TextInput.maxLengthProperty)\n    maxLength?: number;\n\n    @property(TextInput.isMultilineProperty)\n    isMultiline: boolean = false;\n\n    @property(TextInput.placeholderProperty)\n    placeholder?: string;\n\n    @property(TextInput.styleProperty)\n    style: Enums.InputTextStyle = Enums.InputTextStyle.Text;\n\n    @property(TextInput.inlineActionProperty)\n    inlineAction?: Action;\n\n    @property(TextInput.regexProperty)\n    regex?: string;\n\n    //#endregion\n\n    private setupInput(input: HTMLInputElement | HTMLTextAreaElement) {\n        input.style.flex = \"1 1 auto\";\n        input.tabIndex = 0;\n\n        if (this.placeholder) {\n            input.placeholder = this.placeholder;\n            input.setAttribute(\"aria-label\", this.placeholder)\n        }\n\n        if (this.defaultValue) {\n            input.value = this.defaultValue;\n        }\n\n        if (this.maxLength && this.maxLength > 0) {\n            input.maxLength = this.maxLength;\n        }\n\n        input.oninput = () => { this.valueChanged(); }\n        input.onkeypress = (e: KeyboardEvent) => {\n            // Ctrl+Enter pressed\n            if (e.keyCode == 10 && this.inlineAction) {\n                this.inlineAction.execute();\n            }\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let result: HTMLInputElement | HTMLTextAreaElement;\n\n        if (this.isMultiline) {\n            result = document.createElement(\"textarea\");\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\", \"ac-multiline\");\n        }\n        else {\n            result = document.createElement(\"input\");\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\");\n            result.type = Enums.InputTextStyle[this.style].toLowerCase();\n        }\n\n        this.setupInput(result);\n\n        return result;\n    }\n\n    protected overrideInternalRender(): HTMLElement | undefined {\n        let renderedInputControl = super.overrideInternalRender();\n\n        if (this.inlineAction) {\n            let button = document.createElement(\"button\");\n            button.className = this.hostConfig.makeCssClassName(\"ac-inlineActionButton\");\n            button.onclick = (e) => {\n                e.preventDefault();\n                e.cancelBubble = true;\n\n                if (this.inlineAction) {\n                    this.inlineAction.execute();\n                }\n            };\n\n            if (this.inlineAction.iconUrl) {\n                button.classList.add(\"iconOnly\");\n\n                let icon = document.createElement(\"img\");\n                icon.style.height = \"100%\";\n\n                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed\n                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant\n                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button\n                // after the image has loaded and been gicven its final size. The below trick also fixes that.\n                icon.style.display = \"none\";\n                icon.onload = () => {\n                    icon.style.removeProperty(\"display\");\n                };\n                icon.onerror = () => {\n                    button.removeChild(icon);\n                    button.classList.remove(\"iconOnly\");\n                    button.classList.add(\"textOnly\");\n\n                    if (this.inlineAction) {\n                        button.textContent = this.inlineAction.title ? this.inlineAction.title : \"Title\";\n                    }\n                    else {\n                        button.textContent = \"Title\";\n                    }\n                }\n\n                icon.src = this.inlineAction.iconUrl;\n\n                button.appendChild(icon);\n\n                if (this.inlineAction.title) {\n                    button.title = this.inlineAction.title;\n                }\n            }\n            else {\n                button.classList.add(\"textOnly\");\n                button.textContent = this.inlineAction.title ? this.inlineAction.title : \"Title\";\n            }\n\n            button.style.marginLeft = \"8px\";\n\n            this.inputControlContainerElement.appendChild(button);\n        }\n\n        return renderedInputControl;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Text\";\n    }\n\n    getActionById(id: string) {\n        let result = super.getActionById(id);\n\n        if (!result && this.inlineAction) {\n            result = this.inlineAction.getActionById(id);\n        }\n\n        return result;\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return true;\n        }\n\n        if (this.regex) {\n            return new RegExp(this.regex, \"g\").test(this.value);\n        }\n\n        return true;\n    }\n\n    get value(): string | undefined {\n        if (this.renderedInputControlElement) {\n            if (this.isMultiline) {\n                return (<HTMLTextAreaElement>this.renderedInputControlElement).value;\n            }\n            else {\n                return (<HTMLInputElement>this.renderedInputControlElement).value;\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n\nexport class ToggleInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly valueOnProperty = new StringProperty(Versions.v1_0, \"valueOn\", true, undefined, \"true\", (sender: SerializableObject) => { return \"true\"; });\n    static readonly valueOffProperty = new StringProperty(Versions.v1_0, \"valueOff\", true, undefined, \"false\", (sender: SerializableObject) => { return \"false\"; });\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\n\n    @property(ToggleInput.valueProperty)\n    defaultValue?: string;\n\n    @property(ToggleInput.titleProperty)\n    title?: string;\n\n    @property(ToggleInput.valueOnProperty)\n    valueOn: string = \"true\";\n\n    @property(ToggleInput.valueOffProperty)\n    valueOff: string = \"false\";\n\n    @property(ToggleInput.wrapProperty)\n    wrap: boolean = false;\n\n    //#endregion\n\n    private _checkboxInputElement: HTMLInputElement;\n    private _checkboxInputLabelElement: HTMLElement | undefined;\n\n    protected updateInputControlAriaLabelledBy() {\n        if (this._checkboxInputElement) {\n            let joinedLabelIds = this.getAllLabelIds().join(\" \");\n\n            if (this._checkboxInputLabelElement && this._checkboxInputLabelElement.id) {\n                joinedLabelIds += \" \" + this._checkboxInputLabelElement.id;\n            }\n\n            if (joinedLabelIds) {\n                this._checkboxInputElement.setAttribute(\"aria-labelledby\", joinedLabelIds);\n            }\n            else {\n                this._checkboxInputElement.removeAttribute(\"aria-labelledby\");\n            }\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element = document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-toggleInput\");\n        element.style.width = \"100%\";\n        element.style.display = \"flex\";\n        element.style.alignItems = \"center\";\n\n        this._checkboxInputElement = document.createElement(\"input\");\n        this._checkboxInputElement.id = Utils.generateUniqueId();\n        this._checkboxInputElement.type = \"checkbox\";\n        this._checkboxInputElement.style.display = \"inline-block\";\n        this._checkboxInputElement.style.verticalAlign = \"middle\";\n        this._checkboxInputElement.style.margin = \"0\";\n        this._checkboxInputElement.style.flex = \"0 0 auto\";\n\n        if (this.title) {\n            this._checkboxInputElement.setAttribute(\"aria-label\", this.title);\n        }\n\n        if (this.isRequired) {\n            this._checkboxInputElement.setAttribute(\"aria-required\", \"true\");\n        }\n\n        this._checkboxInputElement.tabIndex = 0;\n\n        if (this.defaultValue == this.valueOn) {\n            this._checkboxInputElement.checked = true;\n        }\n\n        this._checkboxInputElement.onchange = () => { this.valueChanged(); }\n\n        Utils.appendChild(element, this._checkboxInputElement);\n\n        if (this.title || this.isDesignMode()) {\n            let label = new TextBlock();\n            label.setParent(this);\n            label.forElementId = this._checkboxInputElement.id;\n            label.hostConfig = this.hostConfig;\n            label.text = !this.title ? this.getJsonTypeName() : this.title;\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\n            label.wrap = this.wrap;\n\n            this._checkboxInputLabelElement = label.render();\n\n            if (this._checkboxInputLabelElement) {\n                this._checkboxInputLabelElement.id = Utils.generateUniqueId();\n                this._checkboxInputLabelElement.style.display = \"inline-block\";\n                this._checkboxInputLabelElement.style.flex = \"1 1 auto\";\n                this._checkboxInputLabelElement.style.marginLeft = \"6px\";\n                this._checkboxInputLabelElement.style.verticalAlign = \"middle\";\n\n                let spacerElement = document.createElement(\"div\");\n                spacerElement.style.width = \"6px\";\n\n                Utils.appendChild(element, spacerElement);\n                Utils.appendChild(element, this._checkboxInputLabelElement);\n            }\n        }\n\n        return element;\n    }\n\n    protected get isNullable(): boolean {\n        return false;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Toggle\";\n    }\n\n    focus() {\n        if (this._checkboxInputElement) {\n            this._checkboxInputElement.focus();\n        }\n    }\n\n    isSet(): boolean {\n        if (this.isRequired) {\n            return this.value === this.valueOn;\n        }\n\n        return this.value ? true : false;\n    }\n\n    get value(): string | undefined {\n        if (this._checkboxInputElement) {\n            return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n\nexport class Choice extends SerializableObject {\n    //#region Schema\n\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n\n    @property(Choice.titleProperty)\n    title?: string;\n\n    @property(Choice.valueProperty)\n    value?: string;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"Choice\";\n    }\n\n    constructor(title?: string, value?: string) {\n        super();\n\n        this.title = title;\n        this.value = value;\n    }\n}\n\nexport class ChoiceSetInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly choicesProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"choices\", Choice);\n    static readonly styleProperty = new ValueSetProperty(\n        Versions.v1_0,\n        \"style\",\n        [\n            { value: \"compact\" },\n            { value: \"expanded\" }\n        ],\n        \"compact\");\n    static readonly isMultiSelectProperty = new BoolProperty(Versions.v1_0, \"isMultiSelect\", false);\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\n\n    @property(ChoiceSetInput.valueProperty)\n    defaultValue?: string;\n\n    @property(ChoiceSetInput.styleProperty)\n    style?: \"compact\" | \"expanded\";\n\n    get isCompact(): boolean {\n        return this.style !== \"expanded\";\n    }\n\n    set isCompact(value: boolean) {\n        this.style = value ? undefined : \"expanded\";\n    }\n\n    @property(ChoiceSetInput.isMultiSelectProperty)\n    isMultiSelect: boolean = false;\n\n    @property(ChoiceSetInput.placeholderProperty)\n    placeholder?: string;\n\n    @property(ChoiceSetInput.wrapProperty)\n    wrap: boolean = false;\n\n    @property(ChoiceSetInput.choicesProperty)\n    choices: Choice[] = [];\n\n    //#endregion\n\n    private static uniqueCategoryCounter = 0;\n\n    private static getUniqueCategoryName(): string {\n        let uniqueCategoryName = \"__ac-category\" + ChoiceSetInput.uniqueCategoryCounter;\n\n        ChoiceSetInput.uniqueCategoryCounter++;\n\n        return uniqueCategoryName;\n    }\n\n    private _uniqueCategoryName: string;\n    private _selectElement: HTMLSelectElement;\n    private _toggleInputs: HTMLInputElement[];\n    private _labels: Array<HTMLElement | undefined>;\n\n    private renderCompoundInput(cssClassName: string, type: \"checkbox\" | \"radio\", defaultValues: string[] | undefined): HTMLElement {\n        let element = document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", cssClassName);\n        element.style.width = \"100%\";\n\n        this._toggleInputs = [];\n        this._labels = [];\n\n        for (let choice of this.choices) {\n            let input = document.createElement(\"input\");\n            input.id = Utils.generateUniqueId();\n            input.type = type;\n            input.style.margin = \"0\";\n            input.style.display = \"inline-block\";\n            input.style.verticalAlign = \"middle\";\n            input.style.flex = \"0 0 auto\";\n            input.name = this.id ? this.id : this._uniqueCategoryName;\n\n            if (this.isRequired) {\n                input.setAttribute(\"aria-required\", \"true\");\n            }\n\n            if (choice.value) {\n                input.value = choice.value;\n            }\n\n            if (choice.title) {\n                input.setAttribute(\"aria-label\", choice.title);\n            }\n\n            if (defaultValues && choice.value) {\n                if (defaultValues.indexOf(choice.value) >= 0) {\n                    input.checked = true;\n                }\n            }\n\n            input.onchange = () => { this.valueChanged(); }\n\n            this._toggleInputs.push(input);\n\n            let compoundInput = document.createElement(\"div\");\n            compoundInput.style.display = \"flex\";\n            compoundInput.style.alignItems = \"center\";\n\n            Utils.appendChild(compoundInput, input);\n\n            let label = new TextBlock();\n            label.setParent(this);\n            label.forElementId = input.id;\n            label.hostConfig = this.hostConfig;\n            label.text = choice.title ? choice.title : \"Choice \" + this._toggleInputs.length;\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\n            label.wrap = this.wrap;\n\n            let labelElement = label.render();\n\n            this._labels.push(labelElement);\n\n            if (labelElement) {\n                labelElement.id = Utils.generateUniqueId();\n                labelElement.style.display = \"inline-block\";\n                labelElement.style.flex = \"1 1 auto\";\n                labelElement.style.marginLeft = \"6px\";\n                labelElement.style.verticalAlign = \"middle\";\n\n                let spacerElement = document.createElement(\"div\");\n                spacerElement.style.width = \"6px\";\n\n                Utils.appendChild(compoundInput, spacerElement);\n                Utils.appendChild(compoundInput, labelElement);\n            }\n\n            Utils.appendChild(element, compoundInput);\n        }\n\n        return element;\n    }\n\n    protected updateInputControlAriaLabelledBy() {\n        if (this.isMultiSelect || this.style === \"expanded\") {\n            let labelIds: string[] = this.getAllLabelIds();\n\n            for (let i = 0; i < this._toggleInputs.length; i++) {\n                let joinedLabelIds = labelIds.join(\" \");\n                let label = this._labels[i];\n\n                if (label && label.id) {\n                    joinedLabelIds += \" \" + label.id;\n                }\n\n                if (joinedLabelIds) {\n                    this._toggleInputs[i].setAttribute(\"aria-labelledby\", joinedLabelIds);\n                }\n                else {\n                    this._toggleInputs[i].removeAttribute(\"aria-labelledby\");\n                }\n            }\n        }\n        else {\n            super.updateInputControlAriaLabelledBy();\n        }\n    }\n\n    // Make sure `aria-current` is applied to the currently-selected item\n    protected internalApplyAriaCurrent(): void {\n        const options = this._selectElement.options;\n\n        if (options) {\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].selected) {\n                    options[i].setAttribute(\"aria-current\", \"true\");\n                }\n                else {\n                    options[i].removeAttribute(\"aria-current\");\n                }\n            }\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();\n\n        if (this.isMultiSelect) {\n            // Render as a list of toggle inputs\n            return this.renderCompoundInput(\n                \"ac-choiceSetInput-multiSelect\",\n                \"checkbox\",\n                this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : undefined);\n        }\n        else {\n            if (this.style === \"expanded\") {\n                // Render as a series of radio buttons\n                return this.renderCompoundInput(\n                    \"ac-choiceSetInput-expanded\",\n                    \"radio\",\n                    this.defaultValue ? [ this.defaultValue ] : undefined);\n            }\n            else {\n                // Render as a combo box\n                this._selectElement = document.createElement(\"select\");\n                this._selectElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-multichoiceInput\", \"ac-choiceSetInput-compact\");\n                this._selectElement.style.width = \"100%\";\n\n                let option = document.createElement(\"option\");\n                option.selected = true;\n                option.disabled = true;\n                option.hidden = true;\n                option.value = \"\";\n\n                if (this.placeholder) {\n                    option.text = this.placeholder;\n                }\n\n                Utils.appendChild(this._selectElement, option);\n\n                for (let choice of this.choices) {\n                    let option = document.createElement(\"option\");\n                    option.value = <string>choice.value;\n                    option.text = <string>choice.title;\n                    option.setAttribute(\"aria-label\", <string>choice.title);\n\n                    if (choice.value == this.defaultValue) {\n                        option.selected = true;\n                    }\n\n                    Utils.appendChild(this._selectElement, option);\n                }\n\n                this._selectElement.onchange = () => {\n                    this.internalApplyAriaCurrent();\n                    this.valueChanged();\n                }\n\n                this.internalApplyAriaCurrent();\n                \n                return this._selectElement;\n            }\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.ChoiceSet\";\n    }\n\n    focus() {\n        if (this.isMultiSelect || this.style === \"expanded\") {\n            if (this._toggleInputs.length > 0) {\n                this._toggleInputs[0].focus();\n            }\n        }\n        else {\n            super.focus();\n        }\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (this.choices.length == 0) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.CollectionCantBeEmpty,\n                Strings.errors.choiceSetMustHaveAtLeastOneChoice());\n        }\n\n        for (let choice of this.choices) {\n            if (!choice.title || !choice.value) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.PropertyCantBeNull,\n                    Strings.errors.choiceSetChoicesMustHaveTitleAndValue());\n            }\n        }\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    get value(): string | undefined {\n        if (!this.isMultiSelect) {\n            if (this.isCompact) {\n                if (this._selectElement) {\n                    return this._selectElement.selectedIndex > 0 ? this._selectElement.value : undefined;\n                }\n\n                return undefined;\n            }\n            else {\n                if (!this._toggleInputs || this._toggleInputs.length == 0) {\n                    return undefined;\n                }\n\n                for (let toggleInput of this._toggleInputs) {\n                    if (toggleInput.checked) {\n                        return toggleInput.value;\n                    }\n                }\n\n                return undefined;\n            }\n        }\n        else {\n            if (!this._toggleInputs || this._toggleInputs.length == 0) {\n                return undefined;\n            }\n\n            let result: string = \"\";\n\n            for (let toggleInput of this._toggleInputs) {\n                if (toggleInput.checked) {\n                    if (result != \"\") {\n                        result += this.hostConfig.choiceSetInputValueSeparator;\n                    }\n\n                    result += toggleInput.value;\n                }\n            }\n\n            return result ? result : undefined;\n        }\n    }\n}\n\nexport class NumberInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new NumProperty(Versions.v1_0, \"value\");\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly minProperty = new NumProperty(Versions.v1_0, \"min\");\n    static readonly maxProperty = new NumProperty(Versions.v1_0, \"max\");\n\n    @property(NumberInput.valueProperty)\n    defaultValue?: number;\n\n    @property(NumberInput.minProperty)\n    min?: number;\n\n    @property(NumberInput.maxProperty)\n    max?: number;\n\n    @property(NumberInput.placeholderProperty)\n    placeholder?: string;\n\n    //#endregion\n\n    private _numberInputElement: HTMLInputElement;\n\n    protected internalRender(): HTMLElement | undefined {\n        this._numberInputElement = document.createElement(\"input\");\n        this._numberInputElement.setAttribute(\"type\", \"number\");\n\n        if (this.min) {\n            this._numberInputElement.setAttribute(\"min\", this.min.toString());\n        }\n\n        if (this.max) {\n            this._numberInputElement.setAttribute(\"max\", this.max.toString());\n        }\n\n        this._numberInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-numberInput\");\n        this._numberInputElement.style.width = \"100%\";\n        this._numberInputElement.tabIndex = 0;\n\n        if (this.defaultValue !== undefined) {\n            this._numberInputElement.valueAsNumber = this.defaultValue;\n        }\n\n        if (this.placeholder) {\n            this._numberInputElement.placeholder = this.placeholder;\n            this._numberInputElement.setAttribute(\"aria-label\", this.placeholder);\n        }\n\n        this._numberInputElement.oninput = () => { this.valueChanged(); }\n\n        return this._numberInputElement;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Number\";\n    }\n\n    isSet(): boolean {\n        return this.value !== undefined && !isNaN(this.value);\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return !this.isRequired;\n        }\n\n        let result = true;\n\n        if (this.min !== undefined) {\n            result = result && (this.value >= this.min);\n        }\n\n        if (this.max !== undefined) {\n            result = result && (this.value <= this.max);\n        }\n\n        return result;\n    }\n\n    get value(): number | undefined {\n        return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;\n    }\n}\n\nexport class DateInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly minProperty = new StringProperty(Versions.v1_0, \"min\");\n    static readonly maxProperty = new StringProperty(Versions.v1_0, \"max\");\n\n    @property(DateInput.valueProperty)\n    defaultValue?: string;\n\n    @property(DateInput.minProperty)\n    min?: string;\n\n    @property(DateInput.maxProperty)\n    max?: string;\n\n    @property(DateInput.placeholderProperty)\n    placeholder?: string;\n\n    //#endregion\n\n    private _dateInputElement: HTMLInputElement;\n\n    protected internalRender(): HTMLElement | undefined {\n        this._dateInputElement = document.createElement(\"input\");\n        this._dateInputElement.setAttribute(\"type\", \"date\");\n\n        if (this.min) {\n            this._dateInputElement.setAttribute(\"min\", this.min);\n        }\n\n        if (this.max) {\n            this._dateInputElement.setAttribute(\"max\", this.max);\n        }\n\n        if (this.placeholder) {\n            this._dateInputElement.placeholder = this.placeholder;\n            this._dateInputElement.setAttribute(\"aria-label\", this.placeholder);\n        }\n\n        this._dateInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-dateInput\");\n        this._dateInputElement.style.width = \"100%\";\n\n        this._dateInputElement.oninput = () => { this.valueChanged(); }\n\n        if (this.defaultValue) {\n            this._dateInputElement.value = this.defaultValue;\n        }\n\n        return this._dateInputElement;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Date\";\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return !this.isRequired;\n        }\n\n        let valueAsDate = new Date(this.value);\n\n        let result = true;\n\n        if (this.min) {\n            let minDate = new Date(this.min);\n\n            result = result && (valueAsDate >= minDate);\n        }\n\n        if (this.max) {\n            let maxDate = new Date(this.max);\n\n            result = result && (valueAsDate <= maxDate);\n        }\n\n        return result;\n    }\n\n    get value(): string | undefined {\n        return this._dateInputElement ? this._dateInputElement.value : undefined;\n    }\n}\n\nexport class TimeProperty extends CustomProperty<string | undefined> {\n    constructor(readonly targetVersion: Version, readonly name: string) {\n        super(\n            targetVersion,\n            name,\n            (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n                let value = source[property.name];\n\n                if (typeof value === \"string\" && value && /^[0-9]{2}:[0-9]{2}$/.test(value)) {\n                    return value;\n                }\n\n                return undefined;\n            },\n            (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) => {\n                context.serializeValue(target, property.name, value);\n            });\n    }\n}\n\nexport class TimeInput extends Input {\n    private static convertTimeStringToDate(timeString: string): Date {\n        return new Date(\"1973-09-04T\" + timeString + \":00Z\");\n    }\n\n    //#region Schema\n\n    static readonly valueProperty = new TimeProperty(Versions.v1_0, \"value\");\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly minProperty = new TimeProperty(Versions.v1_0, \"min\");\n    static readonly maxProperty = new TimeProperty(Versions.v1_0, \"max\");\n\n    @property(TimeInput.valueProperty)\n    defaultValue?: string;\n\n    @property(TimeInput.minProperty)\n    min?: string;\n\n    @property(TimeInput.maxProperty)\n    max?: string;\n\n    @property(TimeInput.placeholderProperty)\n    placeholder?: string;\n\n    //#endregion\n\n    private _timeInputElement: HTMLInputElement;\n\n    protected internalRender(): HTMLElement | undefined {\n        this._timeInputElement = document.createElement(\"input\");\n        this._timeInputElement.setAttribute(\"type\", \"time\");\n        this._timeInputElement.setAttribute(\"min\", <string>this.min);\n        this._timeInputElement.setAttribute(\"max\", <string>this.max);\n        this._timeInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-timeInput\");\n        this._timeInputElement.style.width = \"100%\";\n        this._timeInputElement.oninput = () => { this.valueChanged(); }\n\n        if (this.placeholder) {\n            this._timeInputElement.placeholder = this.placeholder;\n            this._timeInputElement.setAttribute(\"aria-label\", this.placeholder);\n        }\n\n        if (this.defaultValue) {\n            this._timeInputElement.value = this.defaultValue;\n        }\n\n        return this._timeInputElement;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Time\";\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return !this.isRequired;\n        }\n\n        let valueAsDate = TimeInput.convertTimeStringToDate(this.value);\n\n        let result = true;\n\n        if (this.min) {\n            let minDate = TimeInput.convertTimeStringToDate(this.min);\n\n            result = result && (valueAsDate >= minDate);\n        }\n\n        if (this.max) {\n            let maxDate = TimeInput.convertTimeStringToDate(this.max);\n\n            result = result && (valueAsDate <= maxDate);\n        }\n\n        return result;\n    }\n\n    get value(): string | undefined {\n        return this._timeInputElement ? this._timeInputElement.value : undefined;\n    }\n}\n\nconst enum ActionButtonState {\n    Normal,\n    Expanded,\n    Subdued\n}\n\nclass ActionButton {\n    private _parentContainerStyle: string;\n    private _state: ActionButtonState = ActionButtonState.Normal;\n\n    private updateCssStyle() {\n        if (this.action.parent && this.action.renderedElement) {\n            let hostConfig = this.action.parent.hostConfig;\n\n            this.action.renderedElement.className = hostConfig.makeCssClassName(\"ac-pushButton\");\n\n            if (this._parentContainerStyle) {\n                this.action.renderedElement.classList.add(\"style-\" + this._parentContainerStyle);\n            }\n\n            this.action.updateActionButtonCssStyle(this.action.renderedElement, this._state);\n\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"expanded\"));\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"subdued\"));\n\n            switch (this._state) {\n                case ActionButtonState.Expanded:\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"expanded\"));\n                    break;\n                case ActionButtonState.Subdued:\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"subdued\"));\n                    break;\n            }\n\n            if (this.action.style) {\n                if (this.action.style === Enums.ActionStyle.Positive) {\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"primary\", \"style-positive\"));\n                }\n                else {\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"style-\" + this.action.style.toLowerCase()));\n                }\n            }\n        }\n    }\n\n    readonly action: Action;\n\n    constructor(action: Action, parentContainerStyle: string) {\n        this.action = action;\n        this._parentContainerStyle = parentContainerStyle;\n    }\n\n    onClick?: (actionButton: ActionButton) => void;\n\n    render() {\n        this.action.render();\n\n        if (this.action.renderedElement) {\n            this.action.renderedElement.onclick = (e) => {\n                e.preventDefault();\n                e.cancelBubble = true;\n\n                this.click();\n            };\n\n            this.updateCssStyle();\n        }\n    }\n\n    click() {\n        if (this.onClick !== undefined) {\n            this.onClick(this);\n        }\n    }\n\n    get state(): ActionButtonState {\n        return this._state;\n    }\n\n    set state(value: ActionButtonState) {\n        this._state = value;\n\n        this.updateCssStyle();\n    }\n}\n\nexport type ActionType = { new(): Action };\n\nexport abstract class Action extends CardObject {\n    //#region Schema\n\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly iconUrlProperty = new StringProperty(Versions.v1_1, \"iconUrl\");\n    static readonly styleProperty = new ValueSetProperty(\n        Versions.v1_2,\n        \"style\",\n        [\n            { value: Enums.ActionStyle.Default },\n            { value: Enums.ActionStyle.Positive },\n            { value: Enums.ActionStyle.Destructive }\n        ],\n        Enums.ActionStyle.Default);\n    // TODO: Revise this when finalizing input validation\n    static readonly ignoreInputValidationProperty = new BoolProperty(Versions.v1_3, \"ignoreInputValidation\", false);\n\n    @property(Action.titleProperty)\n    title?: string;\n\n    @property(Action.iconUrlProperty)\n    iconUrl?: string;\n\n    @property(Action.styleProperty)\n    style: string = Enums.ActionStyle.Default;\n\n    //#endregion\n\n    private _actionCollection?: ActionCollection; // hold the reference to its action collection\n\n    protected addCssClasses(element: HTMLElement) {\n        // Do nothing in base implementation\n    }\n\n    protected internalGetReferencedInputs(): Dictionary<Input> {\n        return {};\n    }\n\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\n        // Do nothing in base implementation\n    }\n\n    protected internalValidateInputs(referencedInputs: Dictionary<Input> | undefined): Input[] {\n        let result: Input[] = [];\n\n        if (!this.ignoreInputValidation && referencedInputs) {\n            for (let key of Object.keys(referencedInputs)) {\n                let input = referencedInputs[key];\n\n                if (!input.validateValue()) {\n                    result.push(input);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return context.actionRegistry.findByName(this.getJsonTypeName()) !== undefined;\n    }\n\n    onExecute: (sender: Action) => void;\n\n    getHref(): string | undefined {\n        return \"\";\n    }\n\n    getAriaRole(): string {\n        return \"button\";\n    }\n\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\n        // Do nothing in base implementation\n    }\n\n    parse(source: any, context?: SerializationContext) {\n        return super.parse(source, context ? context : new SerializationContext());\n    }\n\n    toJSON(context?: SerializationContext): PropertyBag | undefined {\n        return super.toJSON(context ? context : new SerializationContext());\n    }\n\n    render(baseCssClass: string = \"ac-pushButton\") {\n        // Cache hostConfig for perf\n        let hostConfig = this.hostConfig;\n\n        let buttonElement = document.createElement(\"button\");\n\n        this.addCssClasses(buttonElement);\n\n        if (this.title) {\n            buttonElement.setAttribute(\"aria-label\", this.title);\n        }\n\n        buttonElement.type = \"button\";\n        buttonElement.style.display = \"flex\";\n        buttonElement.style.alignItems = \"center\";\n        buttonElement.style.justifyContent = \"center\";\n\n        buttonElement.setAttribute(\"role\", this.getAriaRole());\n\n        let titleElement = document.createElement(\"div\");\n        titleElement.style.overflow = \"hidden\";\n        titleElement.style.textOverflow = \"ellipsis\";\n\n        if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {\n            titleElement.style.whiteSpace = \"nowrap\";\n        }\n\n        if (this.title) {\n            titleElement.innerText = this.title;\n        }\n\n        if (!this.iconUrl) {\n            buttonElement.classList.add(\"noIcon\");\n\n            buttonElement.appendChild(titleElement);\n        }\n        else {\n            let iconElement = document.createElement(\"img\");\n            iconElement.src = this.iconUrl;\n            iconElement.style.width = hostConfig.actions.iconSize + \"px\";\n            iconElement.style.height = hostConfig.actions.iconSize + \"px\";\n            iconElement.style.flex = \"0 0 auto\";\n\n            if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {\n                buttonElement.classList.add(\"iconAbove\");\n                buttonElement.style.flexDirection = \"column\";\n\n                if (this.title) {\n                    iconElement.style.marginBottom = \"6px\";\n                }\n            }\n            else {\n                buttonElement.classList.add(\"iconLeft\");\n\n                iconElement.style.maxHeight = \"100%\";\n\n                if (this.title) {\n                    iconElement.style.marginRight = \"6px\";\n                }\n            }\n\n            buttonElement.appendChild(iconElement);\n            buttonElement.appendChild(titleElement);\n        }\n\n        this._renderedElement = buttonElement;\n    }\n\n    execute() {\n        if (this.onExecute) {\n            this.onExecute(this);\n        }\n\n        raiseExecuteActionEvent(this);\n    }\n\n    prepareForExecution(): boolean {\n        let referencedInputs = this.getReferencedInputs();\n        let invalidInputs = this.internalValidateInputs(referencedInputs);\n\n        if (invalidInputs.length > 0) {\n            invalidInputs[0].focus();\n\n            return false;\n        }\n\n        this.internalPrepareForExecution(referencedInputs);\n\n        return true;\n    };\n\n    remove(): boolean {\n        if (this._actionCollection) {\n            return this._actionCollection.removeAction(this);\n        }\n\n        return false;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return this.iconUrl ? [{ url: this.iconUrl, mimeType: \"image\" }] : [];\n    }\n\n    getActionById(id: string): Action | undefined {\n        return this.id === id ? this : undefined;\n    }\n\n    getReferencedInputs(): Dictionary<Input> | undefined {\n        return this.internalGetReferencedInputs();\n    }\n\n    /**\n     * Validates the inputs associated with this action.\n     * \n     * @returns A list of inputs that failed validation, or an empty array if no input failed validation.\n     */\n    validateInputs(): Input[] {\n        return this.internalValidateInputs(this.getReferencedInputs());\n    }\n\n    get isPrimary(): boolean {\n        return this.style == Enums.ActionStyle.Positive;\n    }\n\n    set isPrimary(value: boolean) {\n        if (value) {\n            this.style = Enums.ActionStyle.Positive;\n        }\n        else {\n            if (this.style == Enums.ActionStyle.Positive) {\n                this.style = Enums.ActionStyle.Default;\n            }\n        }\n    }\n\n    get ignoreInputValidation(): boolean {\n        return true;\n    }\n\n    get hostConfig(): HostConfig {\n        return this.parent ? this.parent.hostConfig : defaultHostConfig;\n    }\n\n    get parent(): CardElement | undefined {\n        return <CardElement>this._parent;\n    }\n}\n\nexport class SubmitAction extends Action {\n    //#region Schema\n\n    static readonly dataProperty = new PropertyDefinition(Versions.v1_0, \"data\");\n\n    @property(SubmitAction.dataProperty)\n    private _originalData?: PropertyBag;\n\n    @property(Action.ignoreInputValidationProperty)\n    private _ignoreInputValidation: boolean = false;\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.Submit\" = \"Action.Submit\";\n\n    private _isPrepared: boolean = false;\n    private _processedData?: PropertyBag;\n\n    protected internalGetReferencedInputs(): Dictionary<Input> {\n        let result: Dictionary<Input> = {};\n        let current: CardElement | undefined = this.parent;\n        let inputs: Input[] = [];\n\n        while (current) {\n            inputs = inputs.concat(current.getAllInputs(false));\n\n            current = current.parent;\n        }\n\n        for (let input of inputs) {\n            if (input.id) {\n                result[input.id] = input;\n            }\n        }\n\n        return result;\n    }\n\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\n        if (this._originalData) {\n            this._processedData = JSON.parse(JSON.stringify(this._originalData));\n        }\n        else {\n            this._processedData = {};\n        }\n\n        if (this._processedData && inputs) {\n            for (let key of Object.keys(inputs)) {\n                let input = inputs[key];\n\n                if (input.id) {\n                    this._processedData[input.id] = input.value;\n                }\n            }\n        }\n\n        this._isPrepared = true;\n    }\n\n    getJsonTypeName(): string {\n        return SubmitAction.JsonTypeName;\n    }\n\n    get ignoreInputValidation(): boolean {\n        return this._ignoreInputValidation;\n    }\n\n    set ignoreInputValidation(value: boolean) {\n        this._ignoreInputValidation = value;\n    }\n\n    get data(): object | undefined {\n        return this._isPrepared ? this._processedData : this._originalData;\n    }\n\n    set data(value: object | undefined) {\n        this._originalData = value;\n        this._isPrepared = false;\n    }\n}\n\nexport class OpenUrlAction extends Action {\n    //#region Schema\n\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\n\n    @property(OpenUrlAction.urlProperty)\n    url?: string;\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.OpenUrl\" = \"Action.OpenUrl\";\n\n    getJsonTypeName(): string {\n        return OpenUrlAction.JsonTypeName;\n    }\n\n    getAriaRole() : string {\n        return \"link\";\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.url) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"url\"));\n        }\n    }\n\n    getHref(): string | undefined {\n        return this.url;\n    }\n}\n\nexport class ToggleVisibilityAction extends Action {\n    //#region Schema\n\n    static readonly targetElementsProperty = new CustomProperty<PropertyBag>(\n        Versions.v1_2,\n        \"targetElements\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let result: PropertyBag = {}\n\n            if (Array.isArray(source[property.name])) {\n                for (let item of source[property.name]) {\n                    if (typeof item === \"string\") {\n                        result[item] = undefined;\n                    }\n                    else if (typeof item === \"object\") {\n                        let elementId = item[\"elementId\"];\n\n                        if (typeof elementId === \"string\") {\n                            result[elementId] = Utils.parseBool(item[\"isVisible\"]);\n                        }\n                    }\n                }\n            }\n\n            return result;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: PropertyBag, context: BaseSerializationContext) => {\n            let targetElements: any[] = [];\n\n            for (let id of Object.keys(value)) {\n                if (typeof value[id] === \"boolean\") {\n                    targetElements.push(\n                        {\n                            elementId: id,\n                            isVisible: value[id]\n                        }\n                    );\n                }\n                else {\n                    targetElements.push(id);\n                }\n            }\n\n            context.serializeArray(target, property.name, targetElements);\n        },\n        {},\n        (sender: SerializableObject) => { return {}; });\n\n    @property(ToggleVisibilityAction.targetElementsProperty)\n    targetElements: { [key: string]: any } = {};\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.ToggleVisibility\" = \"Action.ToggleVisibility\";\n\n    getJsonTypeName(): string {\n        return ToggleVisibilityAction.JsonTypeName;\n    }\n\n    execute() {\n        if (this.parent) {\n            for (let elementId of Object.keys(this.targetElements)) {\n                let targetElement = this.parent.getRootElement().getElementById(elementId);\n\n                if (targetElement) {\n                    if (typeof this.targetElements[elementId] === \"boolean\") {\n                        targetElement.isVisible = this.targetElements[elementId];\n                    }\n                    else {\n                        targetElement.isVisible = !targetElement.isVisible;\n                    }\n                }\n            }\n        }\n    }\n\n    addTargetElement(elementId: string, isVisible: boolean | undefined = undefined) {\n        this.targetElements[elementId] = isVisible;\n    }\n\n    removeTargetElement(elementId: string) {\n        delete this.targetElements[elementId];\n    }\n}\n\nclass StringWithSubstitutionProperty extends PropertyDefinition  {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): StringWithSubstitutions {\n        let result = new StringWithSubstitutions();\n        result.set(Utils.parseString(source[this.name]));\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: StringWithSubstitutions, context: BaseSerializationContext): void {\n        context.serializeValue(target, this.name, value.getOriginal());\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string) {\n        super(targetVersion, name, undefined, () => { return new StringWithSubstitutions(); });\n    }\n}\n\nexport class HttpHeader extends SerializableObject {\n    //#region Schema\n\n    static readonly nameProperty = new StringProperty(Versions.v1_0, \"name\");\n    static readonly valueProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"value\");\n\n    protected getSchemaKey(): string {\n        return \"HttpHeader\";\n    }\n\n    @property(HttpHeader.nameProperty)\n    name: string;\n\n    @property(HttpHeader.valueProperty)\n    private _value: StringWithSubstitutions;\n\n    //#endregion\n\n    constructor(name: string = \"\", value: string = \"\") {\n        super();\n\n        this.name = name;\n        this.value = value;\n    }\n\n    getReferencedInputs(inputs: Input[], referencedInputs: Dictionary<Input>) {\n        this._value.getReferencedInputs(inputs, referencedInputs);\n    }\n\n    prepareForExecution(inputs: Dictionary<Input>) {\n        this._value.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\n    }\n\n    get value(): string | undefined {\n        return this._value.get();\n    }\n\n    set value(newValue: string | undefined) {\n        this._value.set(newValue);\n    }\n}\n\nexport class HttpAction extends Action {\n    //#region Schema\n\n    static readonly urlProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"url\");\n    static readonly bodyProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"body\");\n    static readonly methodProperty = new StringProperty(Versions.v1_0, \"method\");\n    static readonly headersProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"headers\", HttpHeader);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.add(Action.ignoreInputValidationProperty);\n    }\n\n    @property(HttpAction.urlProperty)\n    private _url: StringWithSubstitutions;\n\n    @property(HttpAction.bodyProperty)\n    private _body: StringWithSubstitutions;\n\n    @property(HttpAction.methodProperty)\n    method?: string;\n\n    @property(HttpAction.headersProperty)\n    headers: HttpHeader[];\n\n    @property(Action.ignoreInputValidationProperty)\n    private _ignoreInputValidation: boolean = false;\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.Http\" = \"Action.Http\";\n\n    protected internalGetReferencedInputs(): Dictionary<Input> {\n        let allInputs = this.parent ? this.parent.getRootElement().getAllInputs() : [];\n        let result: Dictionary<Input> = {};\n\n        this._url.getReferencedInputs(allInputs, result);\n\n        for (let header of this.headers) {\n            header.getReferencedInputs(allInputs, result);\n        }\n\n        this._body.getReferencedInputs(allInputs, result);\n\n        return result;\n    }\n\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\n        if (inputs) {\n            this._url.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\n\n            let contentType = ContentTypes.applicationJson;\n\n            for (let header of this.headers) {\n                header.prepareForExecution(inputs);\n\n                if (header.name && header.name.toLowerCase() == \"content-type\") {\n                    contentType = <string>header.value;\n                }\n            }\n\n            this._body.substituteInputValues(inputs, contentType);\n        }\n    };\n\n    getJsonTypeName(): string {\n        return HttpAction.JsonTypeName;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.url) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"url\"));\n        }\n\n        if (this.headers.length > 0) {\n            for (let header of this.headers) {\n                if (!header.name) {\n                    context.addFailure(\n                        this,\n                        Enums.ValidationEvent.PropertyCantBeNull,\n                        Strings.errors.actionHttpHeadersMustHaveNameAndValue());\n                }\n            }\n        }\n    }\n\n    get ignoreInputValidation(): boolean {\n        return this._ignoreInputValidation;\n    }\n\n    set ignoreInputValidation(value: boolean) {\n        this._ignoreInputValidation = value;\n    }\n\n    get url(): string | undefined {\n        return this._url.get();\n    }\n\n    set url(value: string | undefined) {\n        this._url.set(value);\n    }\n\n    get body(): string | undefined {\n        return this._body.get();\n    }\n\n    set body(value: string | undefined) {\n        this._body.set(value);\n    }\n}\n\nexport class ShowCardAction extends Action {\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.ShowCard\" = \"Action.ShowCard\";\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        let jsonCard = source[\"card\"];\n\n        if (jsonCard) {\n            this.card.parse(jsonCard, context);\n        }\n        else {\n            context.logParseEvent(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.showCardMustHaveCard());\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        if (this.card) {\n            context.serializeValue(target, \"card\", this.card.toJSON(context));\n        }\n    }\n\n    protected addCssClasses(element: HTMLElement) {\n        super.addCssClasses(element);\n\n        if (this.parent) {\n            element.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\n        }\n    }\n\n    readonly card: AdaptiveCard = new InlineAdaptiveCard();\n\n    getJsonTypeName(): string {\n        return ShowCardAction.JsonTypeName;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        this.card.internalValidateProperties(context);\n    }\n\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\n        super.updateActionButtonCssStyle(actionButtonElement);\n\n        if (this.parent) {\n            actionButtonElement.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\n            actionButtonElement.setAttribute(\"aria-expanded\", (buttonState === ActionButtonState.Expanded).toString());\n        }\n    }\n\n    setParent(value: CardElement) {\n        super.setParent(value);\n\n        this.card.setParent(value);\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return this.card.getAllInputs(processActions);\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return super.getResourceInformation().concat(this.card.getResourceInformation());\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result = super.getActionById(id);\n\n        if (!result) {\n            result = this.card.getActionById(id);\n        }\n\n        return result;\n    }\n}\n\nclass ActionCollection {\n    private _owner: CardElement;\n    private _actionCardContainer: HTMLDivElement;\n    private _expandedAction?: ShowCardAction;\n    private _renderedActionCount: number = 0;\n    private _actionCard?: HTMLElement;\n\n    private isActionAllowed(action: Action): boolean {\n        let forbiddenTypes = this._owner.getForbiddenActionTypes();\n\n        if (forbiddenTypes) {\n            for (let forbiddenType of forbiddenTypes) {\n                if (action.constructor === forbiddenType) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private refreshContainer() {\n        this._actionCardContainer.innerHTML = \"\";\n\n        if (!this._actionCard) {\n            this._actionCardContainer.style.marginTop = \"0px\";\n\n            return;\n        }\n\n        this._actionCardContainer.style.marginTop = this._renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + \"px\" : \"0px\";\n\n        let padding = this._owner.getEffectivePadding();\n\n        this._owner.getImmediateSurroundingPadding(padding);\n\n        let physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n        if (this._actionCard) {\n            this._actionCard.style.paddingLeft = physicalPadding.left + \"px\";\n            this._actionCard.style.paddingRight = physicalPadding.right + \"px\";\n\n            this._actionCard.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\n            this._actionCard.style.marginRight = \"-\" + physicalPadding.right + \"px\";\n\n            if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {\n                this._actionCard.style.paddingBottom = physicalPadding.bottom + \"px\";\n                this._actionCard.style.marginBottom = \"-\" + physicalPadding.bottom + \"px\";\n            }\n\n            Utils.appendChild(this._actionCardContainer, this._actionCard);\n        }\n    }\n\n    private layoutChanged() {\n        this._owner.getRootElement().updateLayout();\n    }\n\n    private hideActionCard() {\n        let previouslyExpandedAction = this._expandedAction;\n\n        this._expandedAction = undefined;\n        this._actionCard = undefined;\n\n        this.refreshContainer();\n\n        if (previouslyExpandedAction) {\n            this.layoutChanged();\n\n            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);\n        }\n    }\n\n    private showActionCard(action: ShowCardAction, suppressStyle: boolean = false, raiseEvent: boolean = true) {\n        (<InlineAdaptiveCard>action.card).suppressStyle = suppressStyle;\n\n        // Always re-render a ShowCard action in design mode; reuse already rendered ShowCard (if available) otherwise\n        let renderedCard = action.card.renderedElement && !this._owner.isDesignMode() ? action.card.renderedElement : action.card.render();\n\n        this._actionCard = renderedCard;\n        this._expandedAction = action;\n\n        this.refreshContainer();\n\n        if (raiseEvent) {\n            this.layoutChanged();\n\n            raiseInlineCardExpandedEvent(action, true);\n        }\n    }\n\n    private collapseExpandedAction() {\n        for (let button of this.buttons) {\n            button.state = ActionButtonState.Normal;\n        }\n\n        this.hideActionCard();\n    }\n\n    private expandShowCardAction(action: ShowCardAction, raiseEvent: boolean) {\n        for (let button of this.buttons) {\n            if (button.action !== action) {\n                button.state = ActionButtonState.Subdued;\n            }\n            else {\n                button.state = ActionButtonState.Expanded;\n            }\n        }\n\n        this.showActionCard(\n            action,\n            !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()),\n            raiseEvent);\n    }\n\n    private actionClicked(actionButton: ActionButton) {\n        if (!(actionButton.action instanceof ShowCardAction)) {\n            for (let button of this.buttons) {\n                button.state = ActionButtonState.Normal;\n            }\n\n            this.hideActionCard();\n\n            actionButton.action.execute();\n        }\n        else {\n            if (this._owner.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {\n                actionButton.action.execute();\n            }\n            else if (actionButton.action === this._expandedAction) {\n                this.collapseExpandedAction();\n            }\n            else {\n                this.expandShowCardAction(actionButton.action, true);\n            }\n        }\n    }\n\n    private getParentContainer(): Container | undefined {\n        if (this._owner instanceof Container) {\n            return this._owner;\n        }\n        else {\n            return this._owner.getParentContainer();\n        }\n    }\n\n    private findActionButton(action: Action): ActionButton | undefined {\n        for (let actionButton of this.buttons) {\n            if (actionButton.action == action) {\n                return actionButton;\n            }\n        }\n\n        return undefined;\n    }\n\n    items: Action[] = [];\n    buttons: ActionButton[] = [];\n\n    constructor(owner: CardElement) {\n        this._owner = owner;\n    }\n\n    parse(source: any, context: SerializationContext) {\n        this.clear();\n\n        if (Array.isArray(source)) {\n            for (let jsonAction of source) {\n                let action = context.parseAction(\n                    this._owner,\n                    jsonAction,\n                    [],\n                    !this._owner.isDesignMode());\n\n                if (action) {\n                    this.addAction(action);\n                }\n            }\n        }\n    }\n\n    toJSON(target: PropertyBag, propertyName: string, context: SerializationContext): any {\n        context.serializeArray(target, propertyName, this.items);\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = undefined;\n\n        for (let item of this.items) {\n            result = item.getActionById(id);\n\n            if (result) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    validateProperties(context: ValidationResults) {\n        if (this._owner.hostConfig.actions.maxActions && this.items.length > this._owner.hostConfig.actions.maxActions) {\n            context.addFailure(\n                this._owner,\n                Enums.ValidationEvent.TooManyActions,\n                Strings.errors.tooManyActions(this._owner.hostConfig.actions.maxActions));\n        }\n\n        if (this.items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {\n            context.addFailure(\n                this._owner,\n                Enums.ValidationEvent.InteractivityNotAllowed,\n                Strings.errors.interactivityNotAllowed());\n        }\n\n        for (let item of this.items) {\n            if (!this.isActionAllowed(item)) {\n                context.addFailure(\n                    this._owner,\n                    Enums.ValidationEvent.ActionTypeNotAllowed,\n                    Strings.errors.actionTypeNotAllowed(item.getJsonTypeName()));\n            }\n\n            item.internalValidateProperties(context);\n        }\n    }\n\n    render(orientation: Enums.Orientation, isDesignMode: boolean): HTMLElement | undefined {\n        // Cache hostConfig for better perf\n        let hostConfig = this._owner.hostConfig;\n\n        if (!hostConfig.supportsInteractivity) {\n            return undefined;\n        }\n\n        let element = document.createElement(\"div\");\n        let maxActions = hostConfig.actions.maxActions ? Math.min(hostConfig.actions.maxActions, this.items.length) : this.items.length;\n\n        this._actionCardContainer = document.createElement(\"div\");\n        this._renderedActionCount = 0;\n\n        if (hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this.items[0] instanceof ShowCardAction && this.isActionAllowed(this.items[0])) {\n            this.showActionCard(<ShowCardAction>this.items[0], true);\n            this._renderedActionCount = 1;\n        }\n        else {\n            let buttonStrip = document.createElement(\"div\");\n            buttonStrip.className = hostConfig.makeCssClassName(\"ac-actionSet\");\n            buttonStrip.style.display = \"flex\";\n            buttonStrip.setAttribute(\"role\", \"group\");\n\n            if (orientation == Enums.Orientation.Horizontal) {\n                buttonStrip.style.flexDirection = \"row\";\n\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\n                    switch (this._owner.horizontalAlignment) {\n                        case Enums.HorizontalAlignment.Center:\n                            buttonStrip.style.justifyContent = \"center\";\n                            break;\n                        case Enums.HorizontalAlignment.Right:\n                            buttonStrip.style.justifyContent = \"flex-end\";\n                            break;\n                        default:\n                            buttonStrip.style.justifyContent = \"flex-start\";\n                            break;\n                    }\n                }\n                else {\n                    switch (hostConfig.actions.actionAlignment) {\n                        case Enums.ActionAlignment.Center:\n                            buttonStrip.style.justifyContent = \"center\";\n                            break;\n                        case Enums.ActionAlignment.Right:\n                            buttonStrip.style.justifyContent = \"flex-end\";\n                            break;\n                        default:\n                            buttonStrip.style.justifyContent = \"flex-start\";\n                            break;\n                    }\n                }\n            }\n            else {\n                buttonStrip.style.flexDirection = \"column\";\n\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\n                    switch (this._owner.horizontalAlignment) {\n                        case Enums.HorizontalAlignment.Center:\n                            buttonStrip.style.alignItems = \"center\";\n                            break;\n                        case Enums.HorizontalAlignment.Right:\n                            buttonStrip.style.alignItems = \"flex-end\";\n                            break;\n                        default:\n                            buttonStrip.style.alignItems = \"flex-start\";\n                            break;\n                    }\n                }\n                else {\n                    switch (hostConfig.actions.actionAlignment) {\n                        case Enums.ActionAlignment.Center:\n                            buttonStrip.style.alignItems = \"center\";\n                            break;\n                        case Enums.ActionAlignment.Right:\n                            buttonStrip.style.alignItems = \"flex-end\";\n                            break;\n                        case Enums.ActionAlignment.Stretch:\n                            buttonStrip.style.alignItems = \"stretch\";\n                            break;\n                        default:\n                            buttonStrip.style.alignItems = \"flex-start\";\n                            break;\n                    }\n                }\n            }\n\n            let parentContainer = this.getParentContainer();\n\n            if (parentContainer) {\n                let parentContainerStyle = parentContainer.getEffectiveStyle();\n\n                const allowedActions = this.items.filter(this.isActionAllowed.bind(this));\n\n                for (let i = 0; i < allowedActions.length; i++) {\n                    let actionButton = this.findActionButton(allowedActions[i]);\n\n                    if (!actionButton) {\n                        actionButton = new ActionButton(allowedActions[i], parentContainerStyle);\n                        actionButton.onClick = (ab) => { this.actionClicked(ab); };\n\n                        this.buttons.push(actionButton);\n                    }\n\n                    actionButton.render();\n\n                    if (actionButton.action.renderedElement) {\n                        actionButton.action.renderedElement.setAttribute(\"aria-posinset\", (i + 1).toString());\n                        actionButton.action.renderedElement.setAttribute(\"aria-setsize\", allowedActions.length.toString());\n                        actionButton.action.renderedElement.setAttribute(\"role\", \"listitem\");\n\n                        if (hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal && hostConfig.actions.actionAlignment == Enums.ActionAlignment.Stretch) {\n                            actionButton.action.renderedElement.style.flex = \"0 1 100%\";\n                        }\n                        else {\n                            actionButton.action.renderedElement.style.flex = \"0 1 auto\";\n                        }\n\n                        buttonStrip.appendChild(actionButton.action.renderedElement);\n\n                        this._renderedActionCount++;\n\n                        if (this._renderedActionCount >= hostConfig.actions.maxActions || i == this.items.length - 1) {\n                            break;\n                        }\n                        else if (hostConfig.actions.buttonSpacing > 0) {\n                            let spacer = document.createElement(\"div\");\n\n                            if (orientation === Enums.Orientation.Horizontal) {\n                                spacer.style.flex = \"0 0 auto\";\n                                spacer.style.width = hostConfig.actions.buttonSpacing + \"px\";\n                            }\n                            else {\n                                spacer.style.height = hostConfig.actions.buttonSpacing + \"px\";\n                            }\n\n                            Utils.appendChild(buttonStrip, spacer);\n                        }\n                    }\n                }\n            }\n\n            let buttonStripContainer = document.createElement(\"div\");\n            buttonStripContainer.style.overflow = \"hidden\";\n            buttonStripContainer.appendChild(buttonStrip);\n\n            Utils.appendChild(element, buttonStripContainer);\n        }\n\n        Utils.appendChild(element, this._actionCardContainer);\n\n        for (let button of this.buttons) {\n            if (button.state == ActionButtonState.Expanded) {\n                this.expandShowCardAction(<ShowCardAction>button.action, false);\n\n                break;\n            }\n        }\n\n        return this._renderedActionCount > 0 ? element : undefined;\n    }\n\n    addAction(action: Action) {\n        if (!action) {\n            throw new Error(\"The action parameter cannot be null.\");\n        }\n\n        if ((!action.parent || action.parent === this._owner) && this.items.indexOf(action) < 0) {\n            this.items.push(action);\n\n            if (!action.parent) {\n                action.setParent(this._owner);\n            }\n\n            action[\"_actionCollection\"] = this;\n        }\n        else {\n            throw new Error(Strings.errors.actionAlreadyParented());\n        }\n    }\n\n    removeAction(action: Action): boolean {\n        if (this.expandedAction && this._expandedAction == action) {\n            this.collapseExpandedAction();\n        }\n\n        let actionIndex = this.items.indexOf(action);\n\n        if (actionIndex >= 0) {\n            this.items.splice(actionIndex, 1);\n\n            action.setParent(undefined);\n\n            action[\"_actionCollection\"] = undefined;\n\n            for (let i = 0; i < this.buttons.length; i++) {\n                if (this.buttons[i].action == action) {\n                    this.buttons.splice(i, 1);\n\n                    break;\n                }\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this.items = [];\n        this.buttons = [];\n\n        this._expandedAction = undefined;\n        this._renderedActionCount = 0;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        let result: Input[] = [];\n\n        if (processActions) {\n            for (let action of this.items) {\n                result = result.concat(action.getAllInputs());\n            }\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result: IResourceInformation[] = [];\n\n        for (let action of this.items) {\n            result = result.concat(action.getResourceInformation());\n        }\n\n        return result;\n    }\n\n    get renderedActionCount(): number {\n        return this._renderedActionCount;\n    }\n\n    get expandedAction(): ShowCardAction | undefined {\n        return this._expandedAction;\n    }\n}\n\nexport class ActionSet extends CardElement {\n    //#region Schema\n\n    static readonly orientationProperty = new EnumProperty(Versions.v1_1, \"orientation\", Enums.Orientation);\n\n    @property(ActionSet.orientationProperty)\n    orientation?: Enums.Orientation;\n\n    //#endregion\n\n    private _actionCollection: ActionCollection;\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._actionCollection.parse(source[\"actions\"], context);\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        this._actionCollection.toJSON(target, \"actions\", context);\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        return this._actionCollection.render(this.orientation !== undefined ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());\n    }\n\n    constructor() {\n        super();\n\n        this._actionCollection = new ActionCollection(this);\n    }\n\n    isBleedingAtBottom(): boolean {\n        if (this._actionCollection.renderedActionCount == 0) {\n            return super.isBleedingAtBottom();\n        }\n        else {\n            if (this._actionCollection.items.length == 1) {\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\n            }\n            else {\n                return this._actionCollection.expandedAction !== undefined;\n            }\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"ActionSet\";\n    }\n\n    getActionCount(): number {\n        return this._actionCollection.items.length;\n    }\n\n    getActionAt(index: number): Action | undefined {\n        if (index >= 0 && index < this.getActionCount()) {\n            return this._actionCollection.items[index];\n        }\n        else {\n            return super.getActionAt(index);\n        }\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        this._actionCollection.validateProperties(context);\n    }\n\n    addAction(action: Action) {\n        this._actionCollection.addAction(action);\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return processActions ? this._actionCollection.getAllInputs() : [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return this._actionCollection.getResourceInformation();\n    }\n\n    get isInteractive(): boolean {\n        return true;\n    }\n}\n\nexport abstract class StylableCardElementContainer extends CardElementContainer {\n    //#region Schema\n\n    static readonly styleProperty = new ValueSetProperty(\n        Versions.v1_0,\n        \"style\",\n        [\n            { value: Enums.ContainerStyle.Default },\n            { value: Enums.ContainerStyle.Emphasis },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Accent },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Good },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Attention },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Warning }\n        ]);\n    static readonly bleedProperty = new BoolProperty(Versions.v1_2, \"bleed\", false);\n    static readonly minHeightProperty = new PixelSizeProperty(Versions.v1_2, \"minHeight\");\n\n    @property(StylableCardElementContainer.styleProperty)\n    get style(): string | undefined {\n        if (this.allowCustomStyle) {\n            let style = this.getValue(StylableCardElementContainer.styleProperty);\n\n            if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\n                return style;\n            }\n        }\n\n        return undefined;\n    }\n\n    set style(value: string | undefined) {\n        this.setValue(StylableCardElementContainer.styleProperty, value);\n    }\n\n    @property(StylableCardElementContainer.bleedProperty)\n    private _bleed: boolean = false;\n\n    @property(StylableCardElementContainer.minHeightProperty)\n    minPixelHeight?: number;\n\n    //#endregion\n\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\n        super.adjustRenderedElementSize(renderedElement);\n\n        if (this.minPixelHeight) {\n            renderedElement.style.minHeight = this.minPixelHeight + \"px\";\n        }\n    }\n\n    protected applyBackground() {\n        if (this.renderedElement) {\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\n\n            if (styleDefinition.backgroundColor) {\n                this.renderedElement.style.backgroundColor = <string>Utils.stringToCssColor(styleDefinition.backgroundColor);\n            }\n        }\n    }\n\n    protected applyPadding() {\n        super.applyPadding();\n\n        if (!this.renderedElement) {\n            return;\n        }\n\n        let physicalPadding = new SpacingDefinition();\n\n        if (this.getEffectivePadding()) {\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\n        }\n\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\n\n        if (this.isBleeding()) {\n            // Bleed into the first parent that does have padding\n            let padding = new PaddingDefinition();\n\n            this.getImmediateSurroundingPadding(padding);\n\n            let surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n            this.renderedElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\n            this.renderedElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\n\n            if (!this.isDesignMode()) {\n                this.renderedElement.style.marginTop = \"-\" + surroundingPadding.top + \"px\";\n                this.renderedElement.style.marginBottom = \"-\" + surroundingPadding.bottom + \"px\";\n            }\n\n            if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {\n                this.separatorElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\n                this.separatorElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\n            }\n        }\n        else {\n            this.renderedElement.style.marginRight = \"0\";\n            this.renderedElement.style.marginLeft = \"0\";\n            this.renderedElement.style.marginTop = \"0\";\n            this.renderedElement.style.marginBottom = \"0\";\n\n            if (this.separatorElement) {\n                this.separatorElement.style.marginRight = \"0\";\n                this.separatorElement.style.marginLeft = \"0\";\n            }\n        }\n    }\n\n    protected getHasBackground(): boolean {\n        let currentElement: CardElement | undefined = this.parent;\n\n        while (currentElement) {\n            let currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;\n\n            if (currentElement instanceof StylableCardElementContainer) {\n                if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {\n                    return true;\n                }\n            }\n\n            currentElement = currentElement.parent;\n        }\n\n        return false;\n    }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return this.getHasBackground() ?\n            new PaddingDefinition(\n                Enums.Spacing.Padding,\n                Enums.Spacing.Padding,\n                Enums.Spacing.Padding,\n                Enums.Spacing.Padding) : super.getDefaultPadding();\n    }\n\n    protected getHasExpandedAction(): boolean {\n        return false;\n    }\n\n    protected getBleed(): boolean {\n        return this._bleed;\n    }\n\n    protected setBleed(value: boolean) {\n        this._bleed = value;\n    }\n\n    protected get renderedActionCount(): number {\n        return 0;\n    }\n\n    protected get hasExplicitStyle(): boolean {\n        return this.getValue(StylableCardElementContainer.styleProperty) !== undefined;\n    }\n\n    protected get allowCustomStyle(): boolean {\n        return true;\n    }\n\n    isBleeding(): boolean {\n\t\treturn (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        let explicitStyle = this.getValue(StylableCardElementContainer.styleProperty);\n\n        if (explicitStyle !== undefined) {\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(explicitStyle);\n\n            if (!styleDefinition) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(explicitStyle, \"style\"));\n            }\n        }\n    }\n\n    render(): HTMLElement | undefined {\n        let renderedElement = super.render();\n\n        if (renderedElement && this.getHasBackground()) {\n            this.applyBackground();\n        }\n\n        return renderedElement;\n    }\n\n    getEffectiveStyle(): string {\n        let effectiveStyle = this.style;\n\n        return effectiveStyle ? effectiveStyle : super.getEffectiveStyle();\n    }\n}\n\nexport class BackgroundImage extends SerializableObject {\n    //#region Schema\n\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\n    static readonly fillModeProperty = new EnumProperty(Versions.v1_2, \"fillMode\", Enums.FillMode, Enums.FillMode.Cover);\n    static readonly horizontalAlignmentProperty = new EnumProperty(Versions.v1_2, \"horizontalAlignment\", Enums.HorizontalAlignment, Enums.HorizontalAlignment.Left);\n    static readonly verticalAlignmentProperty = new EnumProperty(Versions.v1_2, \"verticalAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\n\n    @property(BackgroundImage.urlProperty)\n    url?: string;\n\n    @property(BackgroundImage.fillModeProperty)\n    fillMode: Enums.FillMode;\n\n    @property(BackgroundImage.horizontalAlignmentProperty)\n    horizontalAlignment: Enums.HorizontalAlignment;\n\n    @property(BackgroundImage.verticalAlignmentProperty)\n    verticalAlignment: Enums.VerticalAlignment;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"BackgroundImage\";\n    }\n\n    protected internalParse(source: any, context: BaseSerializationContext) {\n        if (typeof source === \"string\") {\n            this.resetDefaultValues();\n            this.url = source;\n        }\n        else {\n            return super.internalParse(source, context);\n        }\n    }\n\n    apply(element: CardElement) {\n        if (this.url && element.renderedElement) {\n            element.renderedElement.style.backgroundImage = \"url('\" + element.preProcessPropertyValue(BackgroundImage.urlProperty, this.url) + \"')\";\n\n            switch (this.fillMode) {\n                case Enums.FillMode.Repeat:\n                    element.renderedElement.style.backgroundRepeat = \"repeat\";\n                    break;\n                case Enums.FillMode.RepeatHorizontally:\n                    element.renderedElement.style.backgroundRepeat = \"repeat-x\";\n                    break;\n                case Enums.FillMode.RepeatVertically:\n                    element.renderedElement.style.backgroundRepeat = \"repeat-y\";\n                    break;\n                case Enums.FillMode.Cover:\n                default:\n                    element.renderedElement.style.backgroundRepeat = \"no-repeat\";\n                    element.renderedElement.style.backgroundSize = \"cover\";\n                    break;\n            }\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.renderedElement.style.backgroundPositionX = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.renderedElement.style.backgroundPositionX = \"right\";\n                    break;\n            }\n\n            switch (this.verticalAlignment) {\n                case Enums.VerticalAlignment.Center:\n                    element.renderedElement.style.backgroundPositionY = \"center\";\n                    break;\n                case Enums.VerticalAlignment.Bottom:\n                    element.renderedElement.style.backgroundPositionY = \"bottom\";\n                    break;\n            }\n        }\n    }\n\n    isValid(): boolean {\n        return this.url ? true : false;\n    }\n}\n\nexport class Container extends StylableCardElementContainer {\n    //#region Schema\n\n    static readonly backgroundImageProperty = new SerializableObjectProperty(\n        Versions.v1_0,\n        \"backgroundImage\",\n        BackgroundImage);\n    static readonly verticalContentAlignmentProperty = new EnumProperty(Versions.v1_1, \"verticalContentAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\n    static readonly rtlProperty = new BoolProperty(Versions.v1_0, \"rtl\");\n\n    @property(Container.backgroundImageProperty)\n    get backgroundImage(): BackgroundImage {\n        return this.getValue(Container.backgroundImageProperty);\n    }\n\n    @property(Container.verticalContentAlignmentProperty)\n    verticalContentAlignment: Enums.VerticalAlignment = Enums.VerticalAlignment.Top;\n\n    @property(Container.rtlProperty)\n    rtl?: boolean;\n\n    //#endregion\n\n    private _items: CardElement[] = [];\n    private _renderedItems: CardElement[] = [];\n\n    private insertItemAt(\n        item: CardElement,\n        index: number,\n        forceInsert: boolean) {\n        if (!item.parent || forceInsert) {\n            if (item.isStandalone) {\n                if (index < 0 || index >= this._items.length) {\n                    this._items.push(item);\n                }\n                else {\n                    this._items.splice(index, 0, item);\n                }\n\n                item.setParent(this);\n            }\n            else {\n                throw new Error(Strings.errors.elementTypeNotStandalone(item.getJsonTypeName()));\n            }\n        }\n        else {\n            throw new Error(Strings.errors.elementAlreadyParented());\n        }\n    }\n\n    protected supportsExcplitiHeight(): boolean {\n        return true;\n    }\n\n    protected getItemsCollectionPropertyName(): string {\n        return \"items\";\n    }\n\n    protected applyBackground() {\n        if (this.backgroundImage.isValid() && this.renderedElement) {\n            this.backgroundImage.apply(this);\n        }\n\n        super.applyBackground();\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._renderedItems = [];\n\n        // Cache hostConfig to avoid walking the parent hierarchy several times\n        let hostConfig = this.hostConfig;\n\n        let element = document.createElement(\"div\");\n\n        if (this.rtl !== undefined && this.rtl) {\n            element.dir = \"rtl\";\n        }\n\n        element.classList.add(hostConfig.makeCssClassName(\"ac-container\"));\n        element.style.display = \"flex\";\n        element.style.flexDirection = \"column\";\n\n        if (GlobalSettings.useAdvancedCardBottomTruncation) {\n            // Forces the container to be at least as tall as its content.\n            //\n            // Fixes a quirk in Chrome where, for nested flex elements, the\n            // inner element's height would never exceed the outer element's\n            // height. This caused overflow truncation to break -- containers\n            // would always be measured as not overflowing, since their heights\n            // were constrained by their parents as opposed to truly reflecting\n            // the height of their content.\n            //\n            // See the \"Browser Rendering Notes\" section of this answer:\n            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size\n            element.style.minHeight = '-webkit-min-content';\n        }\n\n        switch (this.verticalContentAlignment) {\n            case Enums.VerticalAlignment.Center:\n                element.style.justifyContent = \"center\";\n                break;\n            case Enums.VerticalAlignment.Bottom:\n                element.style.justifyContent = \"flex-end\";\n                break;\n            default:\n                element.style.justifyContent = \"flex-start\";\n                break;\n        }\n\n        if (this._items.length > 0) {\n            for (let item of this._items) {\n                let renderedItem = this.isElementAllowed(item) ? item.render() : undefined;\n\n                if (renderedItem) {\n                    if (this._renderedItems.length > 0 && item.separatorElement) {\n                        item.separatorElement.style.flex = \"0 0 auto\";\n\n                        Utils.appendChild(element, item.separatorElement);\n                    }\n\n                    Utils.appendChild(element, renderedItem);\n\n                    this._renderedItems.push(item);\n                }\n            }\n        }\n        else {\n            if (this.isDesignMode()) {\n                let placeholderElement = this.createPlaceholderElement();\n                placeholderElement.style.width = \"100%\";\n                placeholderElement.style.height = \"100%\";\n\n                element.appendChild(placeholderElement);\n            }\n        }\n\n        return element;\n    }\n\n    protected truncateOverflow(maxHeight: number): boolean {\n        if (this.renderedElement) {\n            // Add 1 to account for rounding differences between browsers\n            let boundary = this.renderedElement.offsetTop + maxHeight + 1;\n\n            let handleElement = (cardElement: CardElement) => {\n                let elt = cardElement.renderedElement;\n\n                if (elt) {\n                    switch (Utils.getFitStatus(elt, boundary)) {\n                        case Enums.ContainerFitStatus.FullyInContainer:\n                            let sizeChanged = cardElement['resetOverflow']();\n                            // If the element's size changed after resetting content,\n                            // we have to check if it still fits fully in the card\n                            if (sizeChanged) {\n                                handleElement(cardElement);\n                            }\n                            break;\n                        case Enums.ContainerFitStatus.Overflowing:\n                            let maxHeight = boundary - elt.offsetTop;\n                            cardElement['handleOverflow'](maxHeight);\n                            break;\n                        case Enums.ContainerFitStatus.FullyOutOfContainer:\n                            cardElement['handleOverflow'](0);\n                            break;\n                    }\n                }\n            };\n\n            for (let item of this._items) {\n                handleElement(item);\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    protected undoOverflowTruncation() {\n        for (let item of this._items) {\n            item['resetOverflow']();\n        }\n    }\n\n    protected getHasBackground(): boolean {\n        return this.backgroundImage.isValid() || super.getHasBackground();\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this.clear();\n        this.setShouldFallback(false);\n\n        let jsonItems = source[this.getItemsCollectionPropertyName()];\n\n        if (Array.isArray(jsonItems)) {\n            for (let item of jsonItems) {\n                let element = context.parseElement(this, item, !this.isDesignMode());\n\n                if (element) {\n                    this.insertItemAt(element, -1, true);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        context.serializeArray(target, this.getItemsCollectionPropertyName(), this._items);\n    }\n\n    protected get isSelectable(): boolean {\n        return true;\n    }\n\n    getItemCount(): number {\n        return this._items.length;\n    }\n\n    getItemAt(index: number): CardElement {\n        return this._items[index];\n    }\n\n    getFirstVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\n            for (let item of this._renderedItems) {\n                if (item.isVisible) {\n                    return item;\n                }\n            };\n        }\n\n        return undefined;\n    }\n\n    getLastVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\n            for (let i = this._renderedItems.length - 1; i >= 0; i--) {\n                if (this._renderedItems[i].isVisible) {\n                    return this._renderedItems[i];\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    getJsonTypeName(): string {\n        return \"Container\";\n    }\n\n    isFirstElement(element: CardElement): boolean {\n        let designMode = this.isDesignMode();\n\n        for (let item of this._items) {\n            if (item.isVisible || designMode) {\n                return item == element;\n            }\n        }\n\n        return false;\n    }\n\n    isLastElement(element: CardElement): boolean {\n        let designMode = this.isDesignMode();\n\n        for (let i = this._items.length - 1; i >= 0; i--) {\n            if (this._items[i].isVisible || designMode) {\n                return this._items[i] == element;\n            }\n        }\n\n        return false;\n    }\n\n    isRtl(): boolean {\n        if (this.rtl !== undefined) {\n            return this.rtl;\n        }\n        else {\n            let parentContainer = this.getParentContainer();\n\n            return parentContainer ? parentContainer.isRtl() : false;\n        }\n    }\n\n    isBleedingAtTop(): boolean {\n        let firstRenderedItem = this.getFirstVisibleRenderedItem();\n\n        return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);\n    }\n\n    isBleedingAtBottom(): boolean {\n        let lastRenderedItem = this.getLastVisibleRenderedItem();\n\n        return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return this._items.indexOf(cardElement);\n    }\n\n    addItem(item: CardElement) {\n        this.insertItemAt(item, -1, false);\n    }\n\n    insertItemBefore(item: CardElement, insertBefore: CardElement) {\n        this.insertItemAt(item, this._items.indexOf(insertBefore), false);\n    }\n\n    insertItemAfter(item: CardElement, insertAfter: CardElement) {\n        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);\n    }\n\n    removeItem(item: CardElement): boolean {\n        let itemIndex = this._items.indexOf(item);\n\n        if (itemIndex >= 0) {\n            this._items.splice(itemIndex, 1);\n\n            item.setParent(undefined);\n\n            this.updateLayout();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this._items = [];\n        this._renderedItems = [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result = super.getResourceInformation();\n\n        if (this.backgroundImage.isValid()) {\n            result.push(\n                {\n                    url: <string>this.backgroundImage.url,\n                    mimeType: \"image\"\n                }\n            );\n        }\n\n        return result;\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = super.getActionById(id);\n\n        if (!result) {\n            if (this.selectAction) {\n                result = this.selectAction.getActionById(id);\n            }\n\n            if (!result) {\n                for (let item of this._items) {\n                    result = item.getActionById(id);\n\n                    if (result) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    get padding(): PaddingDefinition | undefined {\n        return this.getPadding();\n    }\n\n    set padding(value: PaddingDefinition | undefined) {\n        this.setPadding(value);\n    }\n\n    get selectAction(): Action | undefined {\n        return this._selectAction;\n    }\n\n    set selectAction(value: Action | undefined) {\n        this._selectAction = value;\n    }\n\n    get bleed(): boolean {\n        return this.getBleed();\n    }\n\n    set bleed(value: boolean) {\n        this.setBleed(value);\n    }\n}\n\nexport type ColumnWidth = SizeAndUnit | \"auto\" | \"stretch\";\n\nexport class Column extends Container {\n    //#region Schema\n\n    static readonly widthProperty = new CustomProperty<ColumnWidth>(\n        Versions.v1_0,\n        \"width\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let result: ColumnWidth = property.defaultValue;\n            let value = source[property.name];\n            let invalidWidth = false;\n\n            if (typeof value === \"number\" && !isNaN(value)) {\n                result = new SizeAndUnit(value, Enums.SizeUnit.Weight);\n            }\n            else if (value === \"auto\" || value === \"stretch\") {\n                result = value;\n            }\n            else if (typeof value === \"string\") {\n                try {\n                    result = SizeAndUnit.parse(value);\n\n                    if (result.unit === Enums.SizeUnit.Pixel && property.targetVersion.compareTo(context.targetVersion) > 0) {\n                        invalidWidth = true;\n                    }\n                }\n                catch (e) {\n                    invalidWidth = true;\n                }\n            }\n            else {\n                invalidWidth = true;\n            }\n\n            if (invalidWidth) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidColumnWidth(value));\n\n                result = \"auto\";\n            }\n\n            return result;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: ColumnWidth, context: BaseSerializationContext) => {\n            if (value instanceof SizeAndUnit) {\n                if (value.unit === Enums.SizeUnit.Pixel) {\n                    context.serializeValue(target, \"width\", value.physicalSize + \"px\");\n                }\n                else {\n                    context.serializeNumber(target, \"width\", value.physicalSize);\n                }\n            }\n            else {\n                context.serializeValue(target, \"width\", value);\n            }\n        },\n        \"stretch\");\n\n    @property(Column.widthProperty)\n    width: ColumnWidth = \"stretch\";\n\n    //#endregion\n\n    private _computedWeight: number = 0;\n\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\n        const minDesignTimeColumnHeight = 20;\n\n        if (this.isDesignMode()) {\n            renderedElement.style.minWidth = \"20px\";\n            renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + \"px\";\n        }\n        else {\n            renderedElement.style.minWidth = \"0\";\n\n            if (this.minPixelHeight) {\n                renderedElement.style.minHeight = this.minPixelHeight + \"px\";\n            }\n        }\n\n        if (this.width === \"auto\") {\n            renderedElement.style.flex = \"0 1 auto\";\n        }\n        else if (this.width === \"stretch\") {\n            renderedElement.style.flex = \"1 1 50px\";\n        }\n        else if (this.width instanceof SizeAndUnit) {\n            if (this.width.unit == Enums.SizeUnit.Pixel) {\n                renderedElement.style.flex = \"0 0 auto\";\n                renderedElement.style.width = this.width.physicalSize + \"px\";\n            }\n            else {\n                renderedElement.style.flex = \"1 1 \" + (this._computedWeight > 0 ? this._computedWeight : this.width.physicalSize) + \"%\";\n            }\n        }\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return true;\n    }\n\n    protected get separatorOrientation(): Enums.Orientation {\n        return Enums.Orientation.Vertical;\n    }\n\n    constructor(width: ColumnWidth = \"stretch\") {\n        super();\n\n        this.width = width;\n    }\n\n    getJsonTypeName(): string {\n        return \"Column\";\n    }\n\n    get hasVisibleSeparator(): boolean {\n        if (this.parent && this.parent instanceof ColumnSet) {\n            return this.separatorElement !== undefined && !this.parent.isLeftMostElement(this);\n        }\n        else {\n            return false;\n        }\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n}\n\nexport class ColumnSet extends StylableCardElementContainer {\n    private _columns: Column[] = [];\n    private _renderedColumns: Column[];\n\n    private createColumnInstance(source: any, context: SerializationContext): Column | undefined {\n        return context.parseCardObject<Column>(\n            this,\n            source,\n            [], // Forbidden types not supported for elements for now\n            !this.isDesignMode(),\n            (typeName: string) => {\n                return !typeName || typeName === \"Column\" ? new Column() : undefined;\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                context.logParseEvent(\n                    undefined,\n                    Enums.ValidationEvent.ElementTypeNotAllowed,\n                    Strings.errors.elementTypeNotAllowed(typeName));\n            });\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._renderedColumns = [];\n\n        if (this._columns.length > 0) {\n            // Cache hostConfig to avoid walking the parent hierarchy several times\n            let hostConfig = this.hostConfig;\n\n            let element = document.createElement(\"div\");\n            element.className = hostConfig.makeCssClassName(\"ac-columnSet\");\n            element.style.display = \"flex\";\n\n            if (GlobalSettings.useAdvancedCardBottomTruncation) {\n                // See comment in Container.internalRender()\n                element.style.minHeight = '-webkit-min-content';\n            }\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.style.justifyContent = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.style.justifyContent = \"flex-end\";\n                    break;\n                default:\n                    element.style.justifyContent = \"flex-start\";\n                    break;\n            }\n\n            let totalWeight: number = 0;\n\n            for (let column of this._columns) {\n                if (column.width instanceof SizeAndUnit && (column.width.unit == Enums.SizeUnit.Weight)) {\n                    totalWeight += column.width.physicalSize;\n                }\n            }\n\n            for (let column of this._columns) {\n                if (column.width instanceof SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {\n                    let computedWeight = 100 / totalWeight * column.width.physicalSize;\n\n                    // Best way to emulate \"internal\" access I know of\n                    column[\"_computedWeight\"] = computedWeight;\n                }\n\n                let renderedColumn = column.render();\n\n                if (renderedColumn) {\n                    if (this._renderedColumns.length > 0 && column.separatorElement) {\n                        column.separatorElement.style.flex = \"0 0 auto\";\n\n                        Utils.appendChild(element, column.separatorElement);\n                    }\n\n                    Utils.appendChild(element, renderedColumn);\n\n                    this._renderedColumns.push(column);\n                }\n            }\n\n            return this._renderedColumns.length > 0 ? element : undefined;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    protected truncateOverflow(maxHeight: number): boolean {\n        for (let column of this._columns) {\n            column['handleOverflow'](maxHeight);\n        }\n\n        return true;\n    }\n\n    protected undoOverflowTruncation() {\n        for (let column of this._columns) {\n            column['resetOverflow']();\n        }\n    }\n\n    protected get isSelectable(): boolean {\n        return true;\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._columns = [];\n        this._renderedColumns = [];\n\n        let jsonColumns = source[\"columns\"];\n\n        if (Array.isArray(jsonColumns)) {\n            for (let item of jsonColumns) {\n                let column = this.createColumnInstance(item, context);\n\n                if (column) {\n                    this._columns.push(column);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        context.serializeArray(target, \"columns\", this._columns);\n    }\n\n    isFirstElement(element: CardElement): boolean {\n        for (let column of this._columns) {\n            if (column.isVisible) {\n                return column == element;\n            }\n        }\n\n        return false;\n    }\n\n    isBleedingAtTop(): boolean {\n        if (this.isBleeding()) {\n            return true;\n        }\n\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\n            for (let column of this._columns) {\n                if (column.isBleedingAtTop()) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    isBleedingAtBottom(): boolean {\n        if (this.isBleeding()) {\n            return true;\n        }\n\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\n            for (let column of this._columns) {\n                if (column.isBleedingAtBottom()) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getItemCount(): number {\n        return this._columns.length;\n    }\n\n    getFirstVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\n            return this._renderedColumns[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    getLastVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\n            return this._renderedColumns[this._renderedColumns.length - 1];\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    getColumnAt(index: number): Column {\n        return this._columns[index];\n    }\n\n    getItemAt(index: number): CardElement {\n        return this.getColumnAt(index);\n    }\n\n    getJsonTypeName(): string {\n        return \"ColumnSet\";\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        let weightedColumns: number = 0;\n        let stretchedColumns: number = 0;\n\n        for (let column of this._columns) {\n            if (typeof column.width === \"number\") {\n                weightedColumns++;\n            }\n            else if (column.width === \"stretch\") {\n                stretchedColumns++;\n            }\n        }\n\n        if (weightedColumns > 0 && stretchedColumns > 0) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.Hint,\n                Strings.hints.dontUseWeightedAndStrecthedColumnsInSameSet());\n        }\n    }\n\n    addColumn(column: Column) {\n        if (!column.parent) {\n            this._columns.push(column);\n\n            column.setParent(this);\n        }\n        else {\n            throw new Error(Strings.errors.columnAlreadyBelongsToAnotherSet());\n        }\n    }\n\n    removeItem(item: CardElement): boolean {\n        if (item instanceof Column) {\n            let itemIndex = this._columns.indexOf(item);\n\n            if (itemIndex >= 0) {\n                this._columns.splice(itemIndex, 1);\n\n                item.setParent(undefined);\n\n                this.updateLayout();\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;\n    }\n\n    isLeftMostElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) == 0;\n    }\n\n    isRightMostElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) == this._columns.length - 1;\n    }\n\n    isTopElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) >= 0;\n    }\n\n    isBottomElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) >= 0;\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = undefined;\n\n        for (let column of this._columns) {\n            result = column.getActionById(id);\n\n            if (result) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    get bleed(): boolean {\n        return this.getBleed();\n    }\n\n    set bleed(value: boolean) {\n        this.setBleed(value);\n    }\n\n    get padding(): PaddingDefinition | undefined {\n        return this.getPadding();\n    }\n\n    set padding(value: PaddingDefinition | undefined) {\n        this.setPadding(value);\n    }\n\n    get selectAction(): Action | undefined {\n        return this._selectAction;\n    }\n\n    set selectAction(value: Action | undefined) {\n        this._selectAction = value;\n    }\n}\n\nfunction raiseImageLoadedEvent(image: Image) {\n    let card = image.getRootElement() as AdaptiveCard;\n    let onImageLoadedHandler = (card && card.onImageLoaded) ? card.onImageLoaded : AdaptiveCard.onImageLoaded;\n\n    if (onImageLoadedHandler) {\n        onImageLoadedHandler(image);\n    }\n}\n\nfunction raiseAnchorClickedEvent(element: CardElement, anchor: HTMLAnchorElement): boolean {\n    let card = element.getRootElement() as AdaptiveCard;\n    let onAnchorClickedHandler = (card && card.onAnchorClicked) ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;\n\n    return onAnchorClickedHandler !== undefined ? onAnchorClickedHandler(element, anchor) : false;\n}\n\nfunction raiseExecuteActionEvent(action: Action) {\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\n    let onExecuteActionHandler = (card && card.onExecuteAction) ? card.onExecuteAction : AdaptiveCard.onExecuteAction;\n\n    if (action.prepareForExecution() && onExecuteActionHandler) {\n        onExecuteActionHandler(action);\n    }\n}\n\nfunction raiseInlineCardExpandedEvent(action: ShowCardAction, isExpanded: boolean) {\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\n    let onInlineCardExpandedHandler = (card && card.onInlineCardExpanded) ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;\n\n    if (onInlineCardExpandedHandler) {\n        onInlineCardExpandedHandler(action, isExpanded);\n    }\n}\n\nfunction raiseInputValueChangedEvent(input: Input) {\n    let card = input.getRootElement() as AdaptiveCard;\n    let onInputValueChangedHandler = (card && card.onInputValueChanged) ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;\n\n    if (onInputValueChangedHandler) {\n        onInputValueChangedHandler(input);\n    }\n}\n\nfunction raiseElementVisibilityChangedEvent(element: CardElement, shouldUpdateLayout: boolean = true) {\n    let rootElement = element.getRootElement();\n\n    if (shouldUpdateLayout) {\n        rootElement.updateLayout();\n    }\n\n    let card = rootElement as AdaptiveCard;\n    let onElementVisibilityChangedHandler = (card && card.onElementVisibilityChanged) ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;\n\n    if (onElementVisibilityChangedHandler !== undefined) {\n        onElementVisibilityChangedHandler(element);\n    }\n}\n\nexport abstract class ContainerWithActions extends Container {\n    private _actionCollection: ActionCollection;\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._actionCollection.parse(source[\"actions\"], context);\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        this._actionCollection.toJSON(target, \"actions\", context);\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element = super.internalRender();\n\n        if (element) {\n            let renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);\n\n            if (renderedActions) {\n                Utils.appendChild(\n                    element,\n                    Utils.renderSeparation(\n                        this.hostConfig,\n                        {\n                            spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing)\n                        },\n                        Enums.Orientation.Horizontal));\n                Utils.appendChild(element, renderedActions);\n            }\n\n            if (this.renderIfEmpty) {\n                return element;\n            }\n            else {\n                return element.children.length > 0 ? element : undefined;\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    protected getHasExpandedAction(): boolean {\n        if (this.renderedActionCount == 0) {\n            return false;\n        }\n        else if (this.renderedActionCount == 1) {\n            return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\n        }\n        else {\n            return this._actionCollection.expandedAction !== undefined;\n        }\n    }\n\n    protected get renderedActionCount(): number {\n        return this._actionCollection.renderedActionCount;\n    }\n\n    protected get renderIfEmpty(): boolean {\n        return false;\n    }\n\n    constructor() {\n        super();\n\n        this._actionCollection = new ActionCollection(this);\n    }\n\n    getActionCount(): number {\n        return this._actionCollection.items.length;\n    }\n\n    getActionAt(index: number): Action | undefined {\n        if (index >= 0 && index < this.getActionCount()) {\n            return this._actionCollection.items[index];\n        }\n        else {\n            return super.getActionAt(index);\n        }\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = this._actionCollection.getActionById(id);\n\n        return result ? result : super.getActionById(id);\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (this._actionCollection) {\n            this._actionCollection.validateProperties(context);\n        }\n    }\n\n    isLastElement(element: CardElement): boolean {\n        return super.isLastElement(element) && this._actionCollection.items.length == 0;\n    }\n\n    addAction(action: Action) {\n        this._actionCollection.addAction(action);\n    }\n\n    clear() {\n        super.clear();\n\n        this._actionCollection.clear();\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        let result = super.getAllInputs(processActions);\n\n        if (processActions) {\n            result = result.concat(this._actionCollection.getAllInputs(processActions));\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return super.getResourceInformation().concat(this._actionCollection.getResourceInformation());\n    }\n\n    isBleedingAtBottom(): boolean {\n        if (this._actionCollection.renderedActionCount == 0) {\n            return super.isBleedingAtBottom();\n        }\n        else {\n            if (this._actionCollection.items.length == 1) {\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\n            }\n            else {\n                return this._actionCollection.expandedAction !== undefined;\n            }\n        }\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n}\n\nexport interface IMarkdownProcessingResult {\n    didProcess: boolean;\n    outputHtml?: any;\n}\n\n// @dynamic\nexport class AdaptiveCard extends ContainerWithActions {\n    static readonly schemaUrl = \"http://adaptivecards.io/schemas/adaptive-card.json\";\n\n    //#region Schema\n\n    protected static readonly $schemaProperty = new CustomProperty<string>(\n        Versions.v1_0,\n        \"$schema\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            return AdaptiveCard.schemaUrl;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\n            context.serializeValue(target, property.name, AdaptiveCard.schemaUrl);\n        });\n\n    static readonly versionProperty = new CustomProperty<Version | undefined>(\n        Versions.v1_0,\n        \"version\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let version = Version.parse(source[property.name], context);\n\n            if (version === undefined) {\n                version = Versions.latest;\n\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidCardVersion(version.toString()));\n            }\n\n            return version;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\n            if (value !== undefined) {\n                context.serializeValue(target, property.name, value.toString());\n            }\n        },\n        Versions.v1_0);\n    static readonly fallbackTextProperty = new StringProperty(Versions.v1_0, \"fallbackText\");\n    static readonly speakProperty = new StringProperty(Versions.v1_0, \"speak\");\n\n    @property(AdaptiveCard.versionProperty)\n    version: Version;\n\n    @property(AdaptiveCard.fallbackTextProperty)\n    fallbackText?: string;\n\n    @property(AdaptiveCard.speakProperty)\n    speak?: string;\n\n    //#endregion\n\n    static onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement) => boolean;\n    static onExecuteAction?: (action: Action) => void;\n    static onElementVisibilityChanged?: (element: CardElement) => void;\n    static onImageLoaded?: (image: Image) => void;\n    static onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\n    static onInputValueChanged?: (input: Input) => void;\n    static onProcessMarkdown?: (text: string, result: IMarkdownProcessingResult) => void;\n\n    static get processMarkdown(): (text: string) => string {\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\n    }\n\n    static set processMarkdown(value: (text: string) => string) {\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\n    }\n\n    static applyMarkdown(text: string): IMarkdownProcessingResult {\n        let result: IMarkdownProcessingResult = {\n            didProcess: false\n        };\n\n        if (AdaptiveCard.onProcessMarkdown) {\n            AdaptiveCard.onProcessMarkdown(text, result);\n        }\n        else if ((<any>window).markdownit) {\n            // Check for markdownit\n            let markdownIt: any = (<any>window).markdownit;\n            result.outputHtml = markdownIt().render(text);\n            result.didProcess = true;\n        }\n        else {\n            console.warn(Strings.errors.markdownProcessingNotEnabled)\n        }\n\n        return result;\n    }\n\n    private _fallbackCard?: AdaptiveCard;\n\n    private isVersionSupported(): boolean {\n        if (this.bypassVersionCheck) {\n            return true;\n        }\n        else {\n            let unsupportedVersion: boolean =\n                !this.version ||\n                !this.version.isValid ||\n                (this.maxVersion.major < this.version.major) ||\n                (this.maxVersion.major == this.version.major && this.maxVersion.minor < this.version.minor);\n\n            return !unsupportedVersion;\n        }\n    }\n\n    protected getItemsCollectionPropertyName(): string {\n        return \"body\";\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        this._fallbackCard = undefined;\n\n        let fallbackElement = context.parseElement(undefined, source[\"fallback\"], !this.isDesignMode());\n\n        if (fallbackElement) {\n            this._fallbackCard = new AdaptiveCard();\n            this._fallbackCard.addItem(fallbackElement);\n        }\n\n        super.internalParse(source, context);\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        this.setValue(AdaptiveCard.versionProperty, context.targetVersion);\n\n        super.internalToJSON(target, context);\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let renderedElement = super.internalRender();\n\n        if (GlobalSettings.useAdvancedCardBottomTruncation && renderedElement) {\n            // Unlike containers, the root card element should be allowed to\n            // be shorter than its content (otherwise the overflow truncation\n            // logic would never get triggered)\n            renderedElement.style.removeProperty(\"minHeight\");\n        }\n\n        return renderedElement;\n    }\n\n    protected getHasBackground(): boolean {\n        return true;\n    }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition(\n            Enums.Spacing.Padding,\n            Enums.Spacing.Padding,\n            Enums.Spacing.Padding,\n            Enums.Spacing.Padding);\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return true;\n    }\n\n    protected get renderIfEmpty(): boolean {\n        return true;\n    }\n\n    protected get bypassVersionCheck(): boolean {\n        return false;\n    }\n\n    protected get allowCustomStyle() {\n        return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;\n    }\n\n    protected get hasBackground(): boolean {\n        return true;\n    }\n\n    onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement) => boolean;\n    onExecuteAction?: (action: Action) => void;\n    onElementVisibilityChanged?: (element: CardElement) => void;\n    onImageLoaded?: (image: Image) => void;\n    onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\n    onInputValueChanged?: (input: Input) => void;\n\n    designMode: boolean = false;\n\n    getJsonTypeName(): string {\n        return \"AdaptiveCard\";\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (this.getValue(CardElement.typeNameProperty) !== \"AdaptiveCard\") {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.MissingCardType,\n                Strings.errors.invalidCardType());\n        }\n\n        if (!this.bypassVersionCheck && !this.version) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"version\"));\n        }\n        else if (!this.isVersionSupported()) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.UnsupportedCardVersion,\n                Strings.errors.unsupportedCardVersion(this.version.toString(), this.maxVersion.toString()));\n        }\n    }\n\n    render(target?: HTMLElement): HTMLElement | undefined {\n        let renderedCard: HTMLElement | undefined;\n\n        if (this.shouldFallback() && this._fallbackCard) {\n            this._fallbackCard.hostConfig = this.hostConfig;\n\n            renderedCard = this._fallbackCard.render();\n        }\n        else {\n            renderedCard = super.render();\n\n            if (renderedCard) {\n                renderedCard.classList.add(this.hostConfig.makeCssClassName(\"ac-adaptiveCard\"));\n\n                // Having a tabIndex on the root container for a card can mess up accessibility in some scenarios.\n                // However, we've shipped this behavior before, and so can't just turn it off in a point release. For\n                // now, to unblock accessibility scenarios for our customers, we've got an option to turn it off. In a\n                // future release, we should strongly consider flipping the default such that we *don't* emit a tabIndex\n                // by default.\n                if (GlobalSettings.setTabIndexAtCardRoot) {\n                    renderedCard.tabIndex = 0;\n                }\n\n                if (this.speak) {\n                    renderedCard.setAttribute(\"aria-label\", this.speak);\n                }\n            }\n        }\n\n        if (target) {\n            Utils.appendChild(target, renderedCard);\n\n            this.updateLayout();\n        }\n\n        return renderedCard;\n    }\n\n    updateLayout(processChildren: boolean = true) {\n        super.updateLayout(processChildren);\n\n        if (GlobalSettings.useAdvancedCardBottomTruncation && this.isDisplayed()) {\n            let padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);\n\n            this['handleOverflow']((<HTMLElement>this.renderedElement).offsetHeight - padding);\n        }\n    }\n\n    shouldFallback(): boolean {\n        return super.shouldFallback() || !this.isVersionSupported();\n    }\n\n    get hasVisibleSeparator(): boolean {\n        return false;\n    }\n}\n\nclass InlineAdaptiveCard extends AdaptiveCard {\n    //#region Schema\n\n    protected getSchemaKey(): string {\n        return \"InlineAdaptiveCard\";\n    }\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.remove(\n            AdaptiveCard.$schemaProperty,\n            AdaptiveCard.versionProperty);\n    }\n\n    //#endregion\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition(\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\n            Enums.Spacing.Padding,\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\n            Enums.Spacing.Padding);\n    }\n\n    protected get bypassVersionCheck(): boolean {\n        return true;\n    }\n\n    protected get defaultStyle(): string {\n        if (this.suppressStyle) {\n            return Enums.ContainerStyle.Default;\n        }\n        else {\n            return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;\n        }\n    }\n\n    suppressStyle: boolean = false;\n\n    render(target?: HTMLElement): HTMLElement | undefined {\n        let renderedCard = super.render(target);\n\n        if (renderedCard) {\n            renderedCard.setAttribute(\"aria-live\", \"polite\");\n            renderedCard.removeAttribute(\"tabindex\");\n        }\n\n        return renderedCard;\n    }\n}\n\nexport class GlobalRegistry {\n    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>) {\n        registry.clear();\n\n        registry.register(\"Container\", Container);\n        registry.register(\"TextBlock\", TextBlock);\n        registry.register(\"RichTextBlock\", RichTextBlock, Versions.v1_2);\n        registry.register(\"TextRun\", TextRun, Versions.v1_2);\n        registry.register(\"Image\", Image);\n        registry.register(\"ImageSet\", ImageSet);\n        registry.register(\"Media\", Media, Versions.v1_1);\n        registry.register(\"FactSet\", FactSet);\n        registry.register(\"ColumnSet\", ColumnSet);\n        registry.register(\"ActionSet\", ActionSet, Versions.v1_2);\n        registry.register(\"Input.Text\", TextInput);\n        registry.register(\"Input.Date\", DateInput);\n        registry.register(\"Input.Time\", TimeInput);\n        registry.register(\"Input.Number\", NumberInput);\n        registry.register(\"Input.ChoiceSet\", ChoiceSetInput);\n        registry.register(\"Input.Toggle\", ToggleInput);\n    }\n\n    static populateWithDefaultActions(registry: CardObjectRegistry<Action>) {\n        registry.clear();\n\n        registry.register(OpenUrlAction.JsonTypeName, OpenUrlAction);\n        registry.register(SubmitAction.JsonTypeName, SubmitAction);\n        registry.register(ShowCardAction.JsonTypeName, ShowCardAction);\n        registry.register(ToggleVisibilityAction.JsonTypeName, ToggleVisibilityAction, Versions.v1_2);\n    }\n\n    static readonly elements = new CardObjectRegistry<CardElement>();\n    static readonly actions = new CardObjectRegistry<Action>();\n\n    static reset() {\n        GlobalRegistry.populateWithDefaultElements(GlobalRegistry.elements);\n        GlobalRegistry.populateWithDefaultActions(GlobalRegistry.actions);\n    }\n}\n\nGlobalRegistry.reset();\n\nconst enum TypeErrorType {\n    UnknownType,\n    ForbiddenType\n}\n\nexport class SerializationContext extends BaseSerializationContext {\n    private _elementRegistry?: CardObjectRegistry<CardElement>;\n    private _actionRegistry?: CardObjectRegistry<Action>;\n\n    private internalParseCardObject<T extends CardObject>(\n        parent: CardElement | undefined,\n        source: any,\n        forbiddenTypeNames: string[],\n        allowFallback: boolean,\n        createInstanceCallback: (typeName: string) => T | undefined,\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\n        let result: T | undefined = undefined;\n\n        if (source && typeof source === \"object\") {\n            let typeName = Utils.parseString(source[\"type\"]);\n\n            if (typeName) {\n                if (forbiddenTypeNames.indexOf(typeName) >= 0) {\n                    logParseEvent(typeName, TypeErrorType.ForbiddenType);\n                }\n                else {\n                    let tryToFallback = false;\n\n                    result = createInstanceCallback(typeName);\n\n                    if (!result) {\n                        tryToFallback = GlobalSettings.enableFallback && allowFallback;\n\n                        logParseEvent(typeName, TypeErrorType.UnknownType);\n                    }\n                    else {\n                        result.setParent(parent);\n                        result.parse(source, this);\n\n                        tryToFallback = GlobalSettings.enableFallback && allowFallback && result.shouldFallback();\n                    }\n\n                    if (tryToFallback) {\n                        let fallback = source[\"fallback\"];\n\n                        if (!fallback && parent) {\n                            parent.setShouldFallback(true);\n                        }\n                        if (typeof fallback === \"string\" && fallback.toLowerCase() === \"drop\") {\n                            result = undefined;\n                        }\n                        else if (typeof fallback === \"object\") {\n                            result = this.internalParseCardObject<T>(\n                                parent,\n                                fallback,\n                                forbiddenTypeNames,\n                                true,\n                                createInstanceCallback,\n                                logParseEvent);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    protected cardObjectParsed(o: SerializableObject, source: any) {\n        if (o instanceof Action && this.onParseAction) {\n            this.onParseAction(o, source, this);\n        }\n        else if (o instanceof CardElement && this.onParseElement) {\n            this.onParseElement(o, source, this);\n        }\n    }\n\n    onParseAction?: (action: Action, source: any, context: SerializationContext) => void;\n    onParseElement?: (element: CardElement, source: any, context: SerializationContext) => void;\n\n    parseCardObject<T extends CardObject>(\n        parent: CardElement | undefined,\n        source: any,\n        forbiddenTypeNames: string[],\n        allowFallback: boolean,\n        createInstanceCallback: (typeName: string) => T | undefined,\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\n        let result = this.internalParseCardObject(\n            parent,\n            source,\n            forbiddenTypeNames,\n            allowFallback,\n            createInstanceCallback,\n            logParseEvent);\n\n        if (result !== undefined) {\n            this.cardObjectParsed(result, source);\n        }\n\n        return result;\n    }\n\n    parseElement(parent: CardElement | undefined, source: any, allowFallback: boolean): CardElement | undefined {\n        return this.parseCardObject<CardElement>(\n            parent,\n            source,\n            [], // Forbidden types not supported for elements for now\n            allowFallback,\n            (typeName: string) => {\n                return this.elementRegistry.createInstance(typeName, this.targetVersion);\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                if (errorType === TypeErrorType.UnknownType) {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.UnknownElementType,\n                        Strings.errors.unknownElementType(typeName));\n                }\n                else {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.ElementTypeNotAllowed,\n                        Strings.errors.elementTypeNotAllowed(typeName));\n                }\n            });\n    }\n\n    parseAction(\n        parent: CardElement,\n        source: any,\n        forbiddenActionTypes: string[],\n        allowFallback: boolean): Action | undefined {\n        return this.parseCardObject<Action>(\n            parent,\n            source,\n            forbiddenActionTypes,\n            allowFallback,\n            (typeName: string) => {\n                return this.actionRegistry.createInstance(typeName, this.targetVersion);\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                if (errorType == TypeErrorType.UnknownType) {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.UnknownActionType,\n                        Strings.errors.unknownActionType(typeName));\n                }\n                else {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.ActionTypeNotAllowed,\n                        Strings.errors.actionTypeNotAllowed(typeName));\n                }\n            });\n    }\n\n    get elementRegistry(): CardObjectRegistry<CardElement> {\n        return this._elementRegistry ? this._elementRegistry : GlobalRegistry.elements;\n    }\n\n    // Not using a property setter here because the setter should accept \"undefined\"\n    // whereas the getter should never return undefined.\n    setElementRegistry(value: CardObjectRegistry<CardElement> | undefined) {\n        this._elementRegistry = value;\n    }\n\n    get actionRegistry(): CardObjectRegistry<Action> {\n        return this._actionRegistry ? this._actionRegistry : GlobalRegistry.actions;\n    }\n\n    // Not using a property setter here because the setter should accept \"undefined\"\n    // whereas the getter should never return undefined.\n    setActionRegistry(value: CardObjectRegistry<Action> | undefined) {\n        this._actionRegistry = value;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nabstract class AbstractTextFormatter {\n    private _regularExpression: RegExp;\n\n    protected abstract internalFormat(lang: string | undefined, matches: RegExpExecArray): string;\n\n    constructor(regularExpression: RegExp) {\n        this._regularExpression = regularExpression;\n    }\n\n    format(lang: string | undefined, input: string | undefined): string | undefined {\n        let matches;\n\n        if (input) {\n            let result = input;\n\n            while ((matches = this._regularExpression.exec(input)) != null) {\n                result = result.replace(matches[0], this.internalFormat(lang, matches));\n            };\n\n            return result;\n        }\n        else {\n            return input;\n        }\n    }\n}\n\nclass DateFormatter extends AbstractTextFormatter {\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\n        let date = new Date(Date.parse(matches[1]));\n        let format = matches[2] != undefined ? matches[2].toLowerCase() : \"compact\";\n\n        if (format != \"compact\") {\n            return date.toLocaleDateString(lang, { day: \"numeric\", weekday: format, month: format, year: \"numeric\" });\n        }\n        else {\n            return date.toLocaleDateString();\n        }\n    }\n}\n\nclass TimeFormatter extends AbstractTextFormatter {\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\n        let date = new Date(Date.parse(matches[1]));\n\n        return date.toLocaleTimeString(lang, { hour: 'numeric', minute: '2-digit' });\n    }\n}\n\nexport function formatText(lang: string | undefined, text: string | undefined): string | undefined {\n    const formatters: AbstractTextFormatter[] = [\n        new DateFormatter(/\\{{2}DATE\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\\)\\}{2}/g),\n        new TimeFormatter(/\\{{2}TIME\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))\\)\\}{2}/g)\n    ];\n\n    let result = text;\n\n    for (let formatter of formatters) {\n        result = formatter.format(lang, result);\n    }\n\n    return result;\n}\n"],"sourceRoot":""}